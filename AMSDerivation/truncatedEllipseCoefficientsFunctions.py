import numpy as np
from numba import jit
from time import time

@jit(nopython=True, cache=True)
def A_coefficients_truncated_shadow_False_ideal_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([1, (s_alpha_s ** 4), (s_alpha_s ** 2), (s_alpha_s ** 6), (c_harmonics_alpha[2] * c_harmonics_beta[4]), (s_beta_s ** 2), (s_alpha_s ** 8), (c_harmonics_alpha[4] * c_harmonics_beta[2]), (s_alpha_s ** 2) * (s_beta_s ** 2), (s_beta_s ** 4), (c_alpha_s ** 2) * (c_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 2), (s_alpha_s ** 6) * (s_beta_s ** 2), (c_harmonics_alpha[6] * c_harmonics_beta[2]), (c_harmonics_alpha[2] * c_harmonics_beta[2]), (s_alpha_s ** 2) * (s_beta_s ** 4), (c_alpha_s ** 2) * (c_beta_s ** 4), (s_alpha_s ** 12), (s_alpha_s ** 14), (s_alpha_s ** 8) * (s_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 4), (s_alpha_s ** 6) * (c_beta_s ** 2), (s_alpha_s ** 6) * (s_beta_s ** 4), (c_alpha_s ** 4) * (c_beta_s ** 2), (c_harmonics_alpha[2] * c_harmonics_beta[6]), (c_alpha_s ** 10) * (c_beta_s ** 2), (s_alpha_s ** 4) * (c_beta_s ** 2), (c_alpha_s ** 2) * (c_beta_s ** 6), (s_beta_s ** 6), (c_alpha_s ** 10) * (s_beta_s ** 2), (c_harmonics_alpha[4] * c_harmonics_beta[4]), (s_alpha_s ** 2) * (s_beta_s ** 6), (c_alpha_s ** 2) * (s_beta_s ** 2), (c_alpha_s ** 8) * (c_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 6), (s_alpha_s ** 8) * (s_beta_s ** 4), (s_beta_s ** 14), (s_alpha_s ** 8) * (c_beta_s ** 2), (c_alpha_s ** 12) * (c_beta_s ** 2), (s_alpha_s ** 10), (c_harmonics_alpha[6] * c_harmonics_beta[4]), (c_alpha_s ** 4) * (c_beta_s ** 4), (s_alpha_s ** 6) * (s_beta_s ** 6), (c_alpha_s ** 12) * (s_beta_s ** 2), (s_alpha_s ** 12) * (c_beta_s ** 2), (c_alpha_s ** 10) * (c_beta_s ** 4), (s_beta_s ** 10), (c_alpha_s ** 6) * (c_beta_s ** 2), (c_alpha_s ** 8) * (s_beta_s ** 2), (s_alpha_s ** 14) * (c_beta_s ** 2), (s_alpha_s ** 2) * (c_beta_s ** 4), (c_alpha_s ** 2) * (c_beta_s ** 8), (c_alpha_s ** 2) * (s_beta_s ** 8), (s_alpha_s ** 12) * (c_beta_s ** 4), (c_alpha_s ** 2) * (s_beta_s ** 10), (c_alpha_s ** 10) * (s_beta_s ** 4), (c_harmonics_alpha[8] * c_harmonics_beta[4]), (c_alpha_s ** 14) * (s_beta_s ** 2), (s_alpha_s ** 10) * (s_beta_s ** 2), (c_alpha_s ** 4) * (s_beta_s ** 2), (c_alpha_s ** 8) * (c_beta_s ** 4), (s_alpha_s ** 14) * (c_beta_s ** 4), (s_alpha_s ** 2) * (c_beta_s ** 6), (s_alpha_s ** 6) * (c_beta_s ** 4), (c_harmonics_alpha[14] * c_harmonics_beta[4]), (c_harmonics_alpha[4] * c_harmonics_beta[6]), (s_alpha_s ** 4) * (s_beta_s ** 8), (c_alpha_s ** 2) * (s_beta_s ** 6), (s_alpha_s ** 8) * (s_beta_s ** 6), (c_alpha_s ** 12) * (c_beta_s ** 4), (s_alpha_s ** 6) * (s_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 2), (s_alpha_s ** 2) * (s_beta_s ** 14), (s_alpha_s ** 2) * (s_beta_s ** 8), (c_alpha_s ** 10) * (s_beta_s ** 6), (s_alpha_s ** 12) * (c_beta_s ** 6), (c_alpha_s ** 4) * (c_beta_s ** 6), (c_alpha_s ** 10) * (c_beta_s ** 6), (s_alpha_s ** 4) * (s_beta_s ** 14), (c_alpha_s ** 6) * (c_beta_s ** 4), (c_alpha_s ** 10) * (s_beta_s ** 8), (c_harmonics_alpha[10] * c_harmonics_beta[4]), (c_alpha_s ** 2) * (s_beta_s ** 4), (c_alpha_s ** 12) * (s_beta_s ** 4), (s_alpha_s ** 14) * (c_beta_s ** 6), (c_alpha_s ** 14) * (s_beta_s ** 4), (c_alpha_s ** 2) * (s_beta_s ** 12), (c_harmonics_alpha[8] * c_harmonics_beta[2]), (s_alpha_s ** 6) * (s_beta_s ** 14), (c_alpha_s ** 2) * (c_beta_s ** 10), (s_alpha_s ** 6) * (c_beta_s ** 6), (c_alpha_s ** 10) * (s_beta_s ** 10), (c_alpha_s ** 8) * (s_beta_s ** 4), (s_alpha_s ** 4) * (s_beta_s ** 10), (s_alpha_s ** 6) * (s_beta_s ** 10), (s_alpha_s ** 6) * (c_beta_s ** 8), (s_beta_s ** 8), (c_alpha_s ** 4) * (s_beta_s ** 8), (c_harmonics_alpha[12] * c_harmonics_beta[2]), (c_alpha_s ** 12) * (s_beta_s ** 6), (s_alpha_s ** 12) * (c_beta_s ** 8), (s_alpha_s ** 4) * (s_beta_s ** 12), (c_alpha_s ** 14) * (c_beta_s ** 4), (c_alpha_s ** 8) * (s_beta_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 8), (s_alpha_s ** 6) * (c_beta_s ** 10), (s_alpha_s ** 6) * (s_beta_s ** 12), (c_alpha_s ** 4) * (s_beta_s ** 10), (c_alpha_s ** 8) * (s_beta_s ** 8), (s_alpha_s ** 12) * (s_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 6), (s_alpha_s ** 10) * (c_beta_s ** 4), (c_alpha_s ** 12) * (s_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 10), (s_alpha_s ** 2) * (c_beta_s ** 2), (s_alpha_s ** 8) * (c_beta_s ** 4), (s_alpha_s ** 14) * (c_beta_s ** 8), (s_alpha_s ** 14) * (s_beta_s ** 8), (s_alpha_s ** 12) * (s_beta_s ** 10), (s_alpha_s ** 14) * (s_beta_s ** 2), (c_alpha_s ** 8) * (c_beta_s ** 6), (c_alpha_s ** 12) * (c_beta_s ** 6), (s_alpha_s ** 8) * (s_beta_s ** 8), (c_alpha_s ** 6) * (s_beta_s ** 2), (c_alpha_s ** 14) * (c_beta_s ** 12), (s_alpha_s ** 6) * (c_beta_s ** 12), (s_alpha_s ** 14) * (s_beta_s ** 10), (s_alpha_s ** 4) * (c_beta_s ** 4), (s_alpha_s ** 12) * (s_beta_s ** 6), (s_alpha_s ** 14) * (s_beta_s ** 6), (c_harmonics_alpha[10] * c_harmonics_beta[6]), (s_alpha_s ** 2) * (s_beta_s ** 12), (c_harmonics_alpha[14] * c_harmonics_beta[2]), (s_alpha_s ** 2) * (c_beta_s ** 8), (s_alpha_s ** 10) * (s_beta_s ** 4), (c_alpha_s ** 8) * (s_beta_s ** 10), (c_alpha_s ** 10) * (s_beta_s ** 12), (c_alpha_s ** 4) * (s_beta_s ** 6), (c_harmonics_alpha[6] * c_harmonics_beta[6]), (c_alpha_s ** 14) * (c_beta_s ** 14), (c_alpha_s ** 12) * (s_beta_s ** 10), (s_beta_s ** 12), (s_alpha_s ** 12) * (c_beta_s ** 10), (c_alpha_s ** 14) * (s_beta_s ** 6), (s_alpha_s ** 6) * (c_beta_s ** 14), (c_alpha_s ** 10) * (c_beta_s ** 8), (s_alpha_s ** 12) * (s_beta_s ** 2), (s_alpha_s ** 2) * (s_beta_s ** 10), (s_alpha_s ** 12) * (s_beta_s ** 12), (s_alpha_s ** 10) * (c_beta_s ** 6), (s_alpha_s ** 14) * (s_beta_s ** 4), (s_alpha_s ** 14) * (s_beta_s ** 12), (s_alpha_s ** 14) * (c_beta_s ** 10), (s_alpha_s ** 8) * (s_beta_s ** 14), (s_alpha_s ** 4) * (c_beta_s ** 10), (s_alpha_s ** 12) * (s_beta_s ** 4), (c_alpha_s ** 2) * (c_beta_s ** 12), (s_alpha_s ** 12) * (c_beta_s ** 12), (s_alpha_s ** 4) * (c_beta_s ** 12), (s_alpha_s ** 4) * (c_beta_s ** 8), (c_alpha_s ** 4) * (s_beta_s ** 4), (s_alpha_s ** 8) * (c_beta_s ** 8), (c_alpha_s ** 6) * (s_beta_s ** 8), (s_alpha_s ** 4) * (c_beta_s ** 14), (s_alpha_s ** 14) * (c_beta_s ** 12), (s_alpha_s ** 8) * (c_beta_s ** 6), (c_harmonics_alpha[10] * c_harmonics_beta[10]), (c_alpha_s ** 12) * (s_beta_s ** 12), (s_alpha_s ** 8) * (c_beta_s ** 10), (c_alpha_s ** 4) * (s_beta_s ** 12), (c_alpha_s ** 8) * (s_beta_s ** 12), (c_alpha_s ** 14) * (s_beta_s ** 14), (c_alpha_s ** 6) * (c_beta_s ** 14), (c_alpha_s ** 6) * (s_beta_s ** 10), (s_alpha_s ** 12) * (c_beta_s ** 14), (s_alpha_s ** 8) * (s_beta_s ** 10), (c_harmonics_alpha[4] * c_harmonics_beta[8]), (c_alpha_s ** 6) * (c_beta_s ** 12), (s_alpha_s ** 8) * (c_beta_s ** 12), (s_alpha_s ** 14) * (c_beta_s ** 14), (s_alpha_s ** 8) * (s_beta_s ** 12), ])


    coefficients_array = np.array([0.4385846609371699, 0.018291150091744222, 0.01296834123504817, 0.020414852488860602, 0.014281786322353962, 0.009064748866816033, 0.014858453027996443, 0.008148828706111548, 0.012178664226757152, 0.007277232656698295, -0.009854425880539508, 0.013197673263761043, 0.013292244406715727, -0.00470079313582148, 0.004648476701290503, 0.008771251823595855, -0.008234529685883799, -0.0062710893800316005, -0.006665258353492485, 0.009888960013360728, 0.00937953453913632, 0.007122608078525499, 0.009397707506205975, -0.0055506260403226345, -0.0024835331671065387, -0.007726598148569901, 0.005093476847660036, -0.0057452402989427165, 0.0028019166723769486, -0.00665672888826944, 0.001995857009695147, 0.005165329024589971, -0.0031139153598235127, -0.005183535117024671, 0.006051374104702229, 0.006829343588849904, 0.0032659398938074936, 0.004969493011516352, -0.00578059004536179, 0.0025968622146047907, -0.0015267827837980644, -0.004341456163131064, 0.0062840593098205475, -0.004934722827926517, -0.004852463468757967, -0.005591998356100162, -0.002144084724523311, -0.0032759574261591482, -0.003743886085028487, -0.004815011096201991, -0.0026177353949709387, -0.00335551443047662, -0.00333236905191588, -0.005077778976404542, -0.0034327604218655694, -0.004522129094255042, 0.001021083233371659, 0.003897999945703796, 0.003327245234420882, -0.0020949063268769154, -0.003731702864676586, -0.004921668480605915, -0.0024192250051204107, 0.0032280711790137057, -0.0009266715099539083, -0.000921451969512419, 0.0036873571906544745, -0.002363412353513445, 0.00429296708209707, -0.004109610592123247, 0.004111816378066257, 0.0031973083895602493, 0.003301742176899233, 0.0025131016319406593, -0.00419040997049377, -0.00437882125799335, -0.002540655456556637, -0.003789117687035381, 0.0037114723442212135, -0.0024011156897751048, -0.004179018528923047, 0.000690075090965757, -0.0014940191651945268, -0.003263743377326429, -0.004228212199276496, 0.0033353636716319376, -0.0023343712791229956, -0.0006182090107603868, 0.003825695702039464, -0.0019339173937529487, 0.0024471824752585946, -0.0038884877075459415, -0.0022920538344320895, 0.00251802289968199, 0.003002199739294802, 0.002607699032808316, -0.0008192674233733016, -0.002158113489763248, 0.0005418433441808726, -0.0030963296655188827, -0.0034823670089295365, 0.0025647782937538253, 0.002634672116665334, -0.0023944249701797564, 0.0034757252848898507, 0.002646994552323731, 0.0029438580922588227, -0.0022034132224310883, -0.0026778869549608057, -0.0032949913419918504, 0.002969603925614103, -0.002149537322870617, -0.003170384986087317, 0.0036949558901013457, 0.0007896770097077602, 0.0019098765890053918, -0.0033703586124336684, -0.00339273467015803, -0.0034994371996270902, -0.0018502472487803773, -0.002177499474272713, -0.002606044849888682, 0.002516909342718148, -0.0011704684359709746, 0.0037233236035585787, 0.002553717725773005, -0.0035537709800748203, 0.001275338128735319, -0.002568214641571605, -0.0027570183076361075, 0.00043382915690836217, 0.0015914062654128632, -0.0004327080227033321, -0.0012670192151191966, 0.0019080909121887964, -0.002562207807864934, -0.0030976481817138685, -0.0014773672763528434, -0.0004166681331348536, 0.003675385736494254, -0.002963383079475309, -0.0007429650181949432, -0.002910747074295087, 0.0024377955870711174, 0.002427612963206642, -0.0023065647005098646, -0.001418625901928906, 0.0012886756986476248, -0.003089609020049907, -0.001964265586502829, -0.0019569046392917773, -0.003150820223130862, -0.0028227877840618816, 0.002485884008105026, 0.0015031512155304816, -0.0016439414146998427, -0.0011502340138840848, -0.0025720182449276052, 0.0015376453222514048, 0.0012595250770740902, -0.0008857364493690273, 0.0016237155223215417, -0.0014083171138398053, 0.001500565499392415, -0.0024961927078437107, 0.001386636668050998, 0.0002878855364490828, -0.0022833078097748006, 0.0017247234648561246, -0.001360999246815778, -0.0018383069617405414, 0.0025503173551500676, 0.001674569115915368, -0.0014582428614263487, -0.0023446823667601013, 0.0016372412763957988, 0.00026377610968121367, 0.0014801258615095975, 0.0016927433127723118, -0.002275918873795916, 0.0016570456963333714, ])


    return np.dot(coefficients_array, expressions_array)
@jit(nopython=True, cache=True)
def B_coefficients_truncated_shadow_False_ideal_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([(s_harmonics_alpha[2] * s_harmonics_beta[1]), (s_harmonics_alpha[4] * s_harmonics_beta[1]), (s_harmonics_alpha[10] * s_harmonics_beta[1]), (s_harmonics_alpha[2] * s_harmonics_beta[3]), (s_harmonics_alpha[8] * s_harmonics_beta[1]), (s_harmonics_alpha[2] * s_harmonics_beta[5]), (s_harmonics_alpha[6] * s_harmonics_beta[1]), (s_harmonics_alpha[4] * s_harmonics_beta[3]), (s_harmonics_alpha[4] * s_harmonics_beta[5]), (s_harmonics_alpha[12] * s_harmonics_beta[1]), (s_harmonics_alpha[8] * s_harmonics_beta[5]), (s_harmonics_alpha[10] * s_harmonics_beta[5]), (s_harmonics_alpha[2] * s_harmonics_beta[11]), (s_harmonics_alpha[10] * s_harmonics_beta[9]), (s_harmonics_alpha[10] * s_harmonics_beta[7]), (s_harmonics_alpha[6] * s_harmonics_beta[5]), (s_harmonics_alpha[2] * s_harmonics_beta[7]), (s_harmonics_alpha[10] * s_harmonics_beta[11]), (s_harmonics_alpha[14] * s_harmonics_beta[1]), (s_harmonics_alpha[4] * s_harmonics_beta[11]), (s_harmonics_alpha[8] * s_harmonics_beta[3]), (s_harmonics_alpha[6] * s_harmonics_beta[3]), (s_harmonics_alpha[10] * s_harmonics_beta[15]), (s_harmonics_alpha[8] * s_harmonics_beta[9]), (s_harmonics_alpha[12] * s_harmonics_beta[3]), (s_harmonics_alpha[4] * s_harmonics_beta[7]), (s_harmonics_alpha[12] * s_harmonics_beta[7]), (s_harmonics_alpha[10] * s_harmonics_beta[13]), (s_harmonics_alpha[12] * s_harmonics_beta[9]), (s_harmonics_alpha[8] * s_harmonics_beta[7]), (s_harmonics_alpha[6] * s_harmonics_beta[9]), (s_harmonics_alpha[10] * s_harmonics_beta[3]), (s_harmonics_alpha[4] * s_harmonics_beta[9]), (s_harmonics_alpha[2] * s_harmonics_beta[9]), (s_harmonics_alpha[12] * s_harmonics_beta[15]), (s_harmonics_alpha[12] * s_harmonics_beta[13]), (s_harmonics_alpha[6] * s_harmonics_beta[11]), (s_harmonics_alpha[12] * s_harmonics_beta[11]), (s_harmonics_alpha[2] * s_harmonics_beta[15]), (s_harmonics_alpha[2] * s_harmonics_beta[13]), (s_harmonics_alpha[14] * s_harmonics_beta[11]), (s_harmonics_alpha[8] * s_harmonics_beta[11]), (s_harmonics_alpha[6] * s_harmonics_beta[13]), (s_harmonics_alpha[8] * s_harmonics_beta[13]), (s_harmonics_alpha[4] * s_harmonics_beta[15]), (s_harmonics_alpha[8] * s_harmonics_beta[15]), (s_harmonics_alpha[4] * s_harmonics_beta[13]), (s_harmonics_alpha[6] * s_harmonics_beta[7]), (s_harmonics_alpha[14] * s_harmonics_beta[7]), (s_harmonics_alpha[14] * s_harmonics_beta[9]), (s_harmonics_alpha[14] * s_harmonics_beta[13]), (s_harmonics_alpha[14] * s_harmonics_beta[15]), (s_harmonics_alpha[12] * s_harmonics_beta[5]), (s_harmonics_alpha[6] * s_harmonics_beta[15]), (s_harmonics_alpha[14] * s_harmonics_beta[5]), (s_harmonics_alpha[14] * s_harmonics_beta[3]), ])


    coefficients_array = np.array([-0.2334822669231708, 0.0095113457739457, -0.0067173334280761126, -0.006282513182511164, 0.006114731454998803, 0.004267302753072321, -0.0038710688311533485, 0.003239026583275608, -0.0032023306754269606, 0.0027218425826632062, -0.002283839138166098, 0.0019311579903296976, -0.0012726522636910943, 0.0012870439864841984, -0.0012127421522349945, 0.001113056271489619, -0.0011006745619830621, -0.0010507925983631442, -0.0010200580766711045, 0.001007324403064137, 0.0009337446533157071, -0.0008864352899273359, -0.000872383494657185, -0.0008448130788395381, -0.0008295618283981627, 0.0008190307020550714, 0.0007556234677390871, 0.0007414103629865994, -0.000701124909522427, 0.0006568124450463865, 0.0005956825965909352, 0.0005750275041998371, -0.0005559229996361902, 0.0005434419641556473, 0.0004948819283520258, -0.00044042100253056395, -0.0004309586053078584, 0.00042412636862405255, -0.000377131735336531, 0.0003420930892930522, 0.0003398697879673611, 0.0002917587149093958, 0.00028598569617862147, -0.00027594384370282154, 0.0002693946848274046, 0.0002518016828420793, -0.00023177308281769365, -0.00022217466511440016, 0.00020143135306311877, -0.00018690502054641539, 0.00016499106611611805, -0.00014477645666438483, -7.886811135916854e-05, -8.000094476125151e-05, 6.669510484134113e-05, 5.436299545245403e-05, ])


    return np.dot(coefficients_array, expressions_array)
@jit(nopython=True, cache=True)
def C_coefficients_truncated_shadow_False_ideal_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([1, (s_alpha_s ** 4), (s_alpha_s ** 2), (s_alpha_s ** 6), (c_harmonics_alpha[2] * c_harmonics_beta[4]), (s_beta_s ** 2), (s_alpha_s ** 8), (c_harmonics_alpha[4] * c_harmonics_beta[2]), (s_alpha_s ** 2) * (s_beta_s ** 2), (s_beta_s ** 4), (c_alpha_s ** 2) * (c_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 2), (s_alpha_s ** 6) * (s_beta_s ** 2), (c_harmonics_alpha[6] * c_harmonics_beta[2]), (c_harmonics_alpha[2] * c_harmonics_beta[2]), (s_alpha_s ** 2) * (s_beta_s ** 4), (c_alpha_s ** 2) * (c_beta_s ** 4), (s_alpha_s ** 12), (s_alpha_s ** 14), (s_alpha_s ** 8) * (s_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 4), (s_alpha_s ** 6) * (c_beta_s ** 2), (s_alpha_s ** 6) * (s_beta_s ** 4), (c_alpha_s ** 4) * (c_beta_s ** 2), (c_harmonics_alpha[2] * c_harmonics_beta[6]), (c_alpha_s ** 10) * (c_beta_s ** 2), (s_alpha_s ** 4) * (c_beta_s ** 2), (c_alpha_s ** 2) * (c_beta_s ** 6), (s_beta_s ** 6), (c_alpha_s ** 10) * (s_beta_s ** 2), (c_harmonics_alpha[4] * c_harmonics_beta[4]), (s_alpha_s ** 2) * (s_beta_s ** 6), (c_alpha_s ** 2) * (s_beta_s ** 2), (c_alpha_s ** 8) * (c_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 6), (s_alpha_s ** 8) * (s_beta_s ** 4), (s_beta_s ** 14), (s_alpha_s ** 8) * (c_beta_s ** 2), (c_alpha_s ** 12) * (c_beta_s ** 2), (s_alpha_s ** 10), (c_harmonics_alpha[6] * c_harmonics_beta[4]), (c_alpha_s ** 4) * (c_beta_s ** 4), (s_alpha_s ** 6) * (s_beta_s ** 6), (c_alpha_s ** 12) * (s_beta_s ** 2), (s_alpha_s ** 12) * (c_beta_s ** 2), (c_alpha_s ** 10) * (c_beta_s ** 4), (s_beta_s ** 10), (c_alpha_s ** 6) * (c_beta_s ** 2), (c_alpha_s ** 8) * (s_beta_s ** 2), (s_alpha_s ** 14) * (c_beta_s ** 2), (s_alpha_s ** 2) * (c_beta_s ** 4), (c_alpha_s ** 2) * (c_beta_s ** 8), (c_alpha_s ** 2) * (s_beta_s ** 8), (s_alpha_s ** 12) * (c_beta_s ** 4), (c_alpha_s ** 2) * (s_beta_s ** 10), (c_alpha_s ** 10) * (s_beta_s ** 4), (c_harmonics_alpha[8] * c_harmonics_beta[4]), (c_alpha_s ** 14) * (s_beta_s ** 2), (s_alpha_s ** 10) * (s_beta_s ** 2), (c_alpha_s ** 4) * (s_beta_s ** 2), (c_alpha_s ** 8) * (c_beta_s ** 4), (s_alpha_s ** 14) * (c_beta_s ** 4), (s_alpha_s ** 2) * (c_beta_s ** 6), (s_alpha_s ** 6) * (c_beta_s ** 4), (c_harmonics_alpha[14] * c_harmonics_beta[4]), (c_harmonics_alpha[4] * c_harmonics_beta[6]), (s_alpha_s ** 4) * (s_beta_s ** 8), (c_alpha_s ** 2) * (s_beta_s ** 6), (s_alpha_s ** 8) * (s_beta_s ** 6), (c_alpha_s ** 12) * (c_beta_s ** 4), (s_alpha_s ** 6) * (s_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 2), (s_alpha_s ** 2) * (s_beta_s ** 14), (s_alpha_s ** 2) * (s_beta_s ** 8), (c_alpha_s ** 10) * (s_beta_s ** 6), (s_alpha_s ** 12) * (c_beta_s ** 6), (c_alpha_s ** 4) * (c_beta_s ** 6), (c_alpha_s ** 10) * (c_beta_s ** 6), (s_alpha_s ** 4) * (s_beta_s ** 14), (c_alpha_s ** 6) * (c_beta_s ** 4), (c_alpha_s ** 10) * (s_beta_s ** 8), (c_harmonics_alpha[10] * c_harmonics_beta[4]), (c_alpha_s ** 2) * (s_beta_s ** 4), (c_alpha_s ** 12) * (s_beta_s ** 4), (s_alpha_s ** 14) * (c_beta_s ** 6), (c_alpha_s ** 14) * (s_beta_s ** 4), (c_alpha_s ** 2) * (s_beta_s ** 12), (c_harmonics_alpha[8] * c_harmonics_beta[2]), (s_alpha_s ** 6) * (s_beta_s ** 14), (c_alpha_s ** 2) * (c_beta_s ** 10), (s_alpha_s ** 6) * (c_beta_s ** 6), (c_alpha_s ** 10) * (s_beta_s ** 10), (c_alpha_s ** 8) * (s_beta_s ** 4), (s_alpha_s ** 4) * (s_beta_s ** 10), (s_alpha_s ** 6) * (s_beta_s ** 10), (s_alpha_s ** 6) * (c_beta_s ** 8), (s_beta_s ** 8), (c_alpha_s ** 4) * (s_beta_s ** 8), (c_harmonics_alpha[12] * c_harmonics_beta[2]), (c_alpha_s ** 12) * (s_beta_s ** 6), (s_alpha_s ** 12) * (c_beta_s ** 8), (s_alpha_s ** 4) * (s_beta_s ** 12), (c_alpha_s ** 14) * (c_beta_s ** 4), (c_alpha_s ** 8) * (s_beta_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 8), (s_alpha_s ** 6) * (c_beta_s ** 10), (s_alpha_s ** 6) * (s_beta_s ** 12), (c_alpha_s ** 4) * (s_beta_s ** 10), (c_alpha_s ** 8) * (s_beta_s ** 8), (s_alpha_s ** 12) * (s_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 6), (s_alpha_s ** 10) * (c_beta_s ** 4), (c_alpha_s ** 12) * (s_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 10), (s_alpha_s ** 2) * (c_beta_s ** 2), (s_alpha_s ** 8) * (c_beta_s ** 4), (s_alpha_s ** 14) * (c_beta_s ** 8), (s_alpha_s ** 14) * (s_beta_s ** 8), (s_alpha_s ** 12) * (s_beta_s ** 10), (s_alpha_s ** 14) * (s_beta_s ** 2), (c_alpha_s ** 8) * (c_beta_s ** 6), (c_alpha_s ** 12) * (c_beta_s ** 6), (s_alpha_s ** 8) * (s_beta_s ** 8), (c_alpha_s ** 6) * (s_beta_s ** 2), (c_alpha_s ** 14) * (c_beta_s ** 12), (s_alpha_s ** 6) * (c_beta_s ** 12), (s_alpha_s ** 14) * (s_beta_s ** 10), (s_alpha_s ** 4) * (c_beta_s ** 4), (s_alpha_s ** 12) * (s_beta_s ** 6), (s_alpha_s ** 14) * (s_beta_s ** 6), (c_harmonics_alpha[10] * c_harmonics_beta[6]), (s_alpha_s ** 2) * (s_beta_s ** 12), (c_harmonics_alpha[14] * c_harmonics_beta[2]), (s_alpha_s ** 2) * (c_beta_s ** 8), (s_alpha_s ** 10) * (s_beta_s ** 4), (c_alpha_s ** 8) * (s_beta_s ** 10), (c_alpha_s ** 10) * (s_beta_s ** 12), (c_alpha_s ** 4) * (s_beta_s ** 6), (c_harmonics_alpha[6] * c_harmonics_beta[6]), (c_alpha_s ** 14) * (c_beta_s ** 14), (c_alpha_s ** 12) * (s_beta_s ** 10), (s_beta_s ** 12), (s_alpha_s ** 12) * (c_beta_s ** 10), (c_alpha_s ** 14) * (s_beta_s ** 6), (s_alpha_s ** 6) * (c_beta_s ** 14), (c_alpha_s ** 10) * (c_beta_s ** 8), (s_alpha_s ** 12) * (s_beta_s ** 2), (s_alpha_s ** 2) * (s_beta_s ** 10), (s_alpha_s ** 12) * (s_beta_s ** 12), (s_alpha_s ** 10) * (c_beta_s ** 6), (s_alpha_s ** 14) * (s_beta_s ** 4), (s_alpha_s ** 14) * (s_beta_s ** 12), (s_alpha_s ** 14) * (c_beta_s ** 10), (s_alpha_s ** 8) * (s_beta_s ** 14), (s_alpha_s ** 4) * (c_beta_s ** 10), (s_alpha_s ** 12) * (s_beta_s ** 4), (c_alpha_s ** 2) * (c_beta_s ** 12), (s_alpha_s ** 12) * (c_beta_s ** 12), (s_alpha_s ** 4) * (c_beta_s ** 12), (s_alpha_s ** 4) * (c_beta_s ** 8), ])


    coefficients_array = np.array([0.5614153390627232, -0.018291150091728683, -0.012968341235128428, -0.020414852488926133, -0.014281786322277225, -0.009064748866726265, -0.014858453028245823, -0.008148828706124184, -0.01217866422654068, -0.00727723265678724, 0.009854425880523269, -0.013197673263805672, -0.013292244406774968, 0.004700793135814035, -0.004648476701349591, -0.008771251823602258, 0.00823452968597937, 0.006271089379918431, 0.006665258353536193, -0.009888960013568454, -0.00937953453890631, -0.007122608078438876, -0.009397707506048122, 0.005550626040348765, 0.0024835331670969322, 0.007726598148549023, -0.00509347684762827, 0.005745240298985345, -0.0028019166724699627, 0.0066567288882337745, -0.001995857009708944, -0.0051653290244991065, 0.0031139153599199693, 0.005183535117165579, -0.0060513741047057675, -0.006829343589059053, -0.0032659398937592054, -0.004969493011529477, 0.005780590045343326, -0.00259686221449356, 0.0015267827837961616, 0.004341456163171941, -0.0062840593098513475, 0.004934722827835337, 0.004852463468718478, 0.005591998356142903, 0.0021440847245076185, 0.0032759574262880157, 0.0037438860848993745, 0.0048150110961321215, 0.0026177353950396086, 0.0033555144304858167, 0.003332369051878202, 0.005077778976424207, 0.003432760421872616, 0.004522129094174041, -0.001021083233372401, -0.003897999945735769, -0.003327245234159708, 0.002094906327055438, 0.003731702864619877, 0.004921668480608313, 0.002419225005176742, -0.0032280711789941666, 0.0009266715099538784, 0.0009214519695132647, -0.0036873571904824857, 0.002363412353363235, -0.0042929670821277325, 0.004109610592132686, -0.004111816378090586, -0.003197308389571234, -0.0033017421768629786, -0.002513101631875638, 0.004190409970462743, 0.004378821258176353, 0.002540655456354432, 0.0037891176869513316, -0.0037114723441627195, 0.0024011156897031476, 0.004179018528923366, -0.0006900750909661501, 0.0014940191651812813, 0.0032637433773331716, 0.0042282121992471685, -0.00333536367162604, 0.0023343712791036725, 0.0006182090107567984, -0.003825695701996836, 0.0019339173937079563, -0.002447182475225487, 0.003888487707574733, 0.002292053834418012, -0.0025180228996705394, -0.0030021997392287066, -0.002607699032826332, 0.000819267423384692, 0.0021581134897654306, -0.0005418433441808946, 0.0030963296655663625, 0.0034823670089631363, -0.0025647782937044034, -0.002634672116580745, 0.002394424970188336, -0.0034757252848695744, -0.0026469945523478187, -0.0029438580921655965, 0.0022034132224383616, 0.0026778869550233403, 0.003294991342031984, -0.002969603925584493, 0.002149537322969328, 0.0031703849860514706, -0.003694955890130807, -0.0007896770096344839, -0.0019098765890247916, 0.0033703586124555042, 0.0033927346702298583, 0.0034994371996667053, 0.0018502472488041897, 0.0021774994742715984, 0.002606044849837911, -0.0025169093426959123, 0.0011704684360244323, -0.003723323603477738, -0.0025537177256567518, 0.0035537709801118826, -0.0012753381287576092, 0.0025682146414180915, 0.0027570183075918777, -0.0004338291569082346, -0.0015914062655858867, 0.00043270802270331294, 0.0012670192151093137, -0.0019080909122361437, 0.002562207807907032, 0.003097648181662194, 0.0014773672762893977, 0.0004166681331370855, -0.003675385736504435, 0.00296338307950247, 0.0007429650181693376, 0.002910747074262111, -0.0024377955871259516, -0.00242761296319811, 0.002306564700553815, 0.0014186259020787168, -0.0012886756986974235, 0.00308960901997834, 0.0019642655864701257, 0.001956904639302848, 0.003150820223027479, 0.002822787784043517, -0.0024858840081653575, -0.0015031512155375033, 0.001643941414645754, 0.0011502340139450987, 0.0025720182450266254, -0.0015376453222441047, -0.0012595250770688767, ])


    return np.dot(coefficients_array, expressions_array)
@jit(nopython=True, cache=True)
def D_coefficients_truncated_shadow_False_ideal_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([(c_alpha_s ** 1), (c_alpha_s ** 1) * (c_beta_s ** 2), (c_alpha_s ** 1) * (s_beta_s ** 2), (c_harmonics_alpha[1] * c_harmonics_beta[4]), (c_alpha_s ** 1) * (c_beta_s ** 4), (c_alpha_s ** 1) * (s_beta_s ** 4), (c_alpha_s ** 1) * (c_beta_s ** 6), (c_alpha_s ** 1) * (s_beta_s ** 6), (c_alpha_s ** 1) * (c_beta_s ** 8), (c_alpha_s ** 1) * (s_beta_s ** 8), (c_harmonics_alpha[3] * c_harmonics_beta[4]), (c_alpha_s ** 1) * (c_beta_s ** 10), (c_alpha_s ** 1) * (s_beta_s ** 10), (c_alpha_s ** 1) * (c_beta_s ** 12), (c_harmonics_alpha[3] * c_harmonics_beta[2]), (c_alpha_s ** 1) * (s_beta_s ** 12), (c_alpha_s ** 1) * (c_beta_s ** 14), (c_alpha_s ** 7) * (s_beta_s ** 2), (c_alpha_s ** 7) * (c_beta_s ** 2), (c_alpha_s ** 1) * (s_beta_s ** 14), (c_alpha_s ** 9) * (s_beta_s ** 2), (c_alpha_s ** 9) * (c_beta_s ** 2), (c_alpha_s ** 3) * (s_beta_s ** 2), (c_alpha_s ** 3) * (s_beta_s ** 4), (c_harmonics_alpha[1] * c_harmonics_beta[2]), (c_alpha_s ** 3) * (c_beta_s ** 4), (c_alpha_s ** 3) * (s_beta_s ** 6), (c_alpha_s ** 3) * (c_beta_s ** 2), (c_alpha_s ** 3) * (c_beta_s ** 6), (c_alpha_s ** 3) * (s_beta_s ** 8), (c_alpha_s ** 3) * (c_beta_s ** 8), (c_alpha_s ** 7) * (s_beta_s ** 4), (c_alpha_s ** 7) * (c_beta_s ** 4), (c_alpha_s ** 3) * (s_beta_s ** 10), (c_harmonics_alpha[5] * c_harmonics_beta[4]), (c_alpha_s ** 3) * (c_beta_s ** 10), (c_alpha_s ** 3) * (s_beta_s ** 12), (c_alpha_s ** 3) * (c_beta_s ** 12), (c_alpha_s ** 3) * (s_beta_s ** 14), (c_alpha_s ** 3) * (c_beta_s ** 14), (c_alpha_s ** 13) * (c_beta_s ** 2), (c_harmonics_alpha[1] * c_harmonics_beta[8]), (c_alpha_s ** 13) * (s_beta_s ** 2), (c_alpha_s ** 9) * (s_beta_s ** 4), (c_harmonics_alpha[5] * c_harmonics_beta[2]), (c_alpha_s ** 7) * (s_beta_s ** 6), (c_alpha_s ** 9) * (c_beta_s ** 4), (c_alpha_s ** 7) * (c_beta_s ** 6), (c_alpha_s ** 13) * (c_beta_s ** 4), (c_harmonics_alpha[7] * c_harmonics_beta[2]), (c_alpha_s ** 13) * (s_beta_s ** 4), (c_harmonics_alpha[9] * c_harmonics_beta[4]), (c_alpha_s ** 13) * (c_beta_s ** 6), (c_harmonics_alpha[3] * c_harmonics_beta[6]), (c_alpha_s ** 5) * (c_beta_s ** 8), (c_alpha_s ** 13) * (s_beta_s ** 6), (c_alpha_s ** 5) * (c_beta_s ** 10), (c_alpha_s ** 13) * (c_beta_s ** 8), (c_harmonics_alpha[3] * c_harmonics_beta[8]), (c_alpha_s ** 5) * (s_beta_s ** 8), (c_alpha_s ** 5) * (c_beta_s ** 12), (c_alpha_s ** 5) * (c_beta_s ** 6), (c_alpha_s ** 5) * (s_beta_s ** 10), (c_alpha_s ** 7) * (s_beta_s ** 8), (c_harmonics_alpha[1] * c_harmonics_beta[6]), (c_alpha_s ** 5) * (c_beta_s ** 14), (c_alpha_s ** 5) * (s_beta_s ** 12), (c_alpha_s ** 5) * (s_beta_s ** 6), (c_alpha_s ** 7) * (c_beta_s ** 8), (c_alpha_s ** 13) * (s_beta_s ** 8), (c_alpha_s ** 13) * (c_beta_s ** 10), (c_alpha_s ** 5) * (s_beta_s ** 14), (c_harmonics_alpha[7] * c_harmonics_beta[4]), (c_alpha_s ** 9) * (s_beta_s ** 6), (c_alpha_s ** 13) * (c_beta_s ** 12), (c_alpha_s ** 13) * (s_beta_s ** 10), (c_alpha_s ** 9) * (c_beta_s ** 6), (c_alpha_s ** 13) * (c_beta_s ** 14), (c_alpha_s ** 13) * (s_beta_s ** 12), (c_alpha_s ** 5) * (c_beta_s ** 4), (c_alpha_s ** 7) * (s_beta_s ** 10), (c_harmonics_alpha[15] * c_harmonics_beta[4]), (c_alpha_s ** 13) * (s_beta_s ** 14), (c_alpha_s ** 5) * (s_beta_s ** 4), (c_alpha_s ** 7) * (c_beta_s ** 10), (c_harmonics_alpha[11] * c_harmonics_beta[4]), (c_harmonics_alpha[11] * c_harmonics_beta[6]), (c_alpha_s ** 11) * (c_beta_s ** 8), (c_harmonics_alpha[9] * c_harmonics_beta[2]), (c_alpha_s ** 11) * (c_beta_s ** 6), (c_harmonics_alpha[13] * c_harmonics_beta[4]), (c_alpha_s ** 11) * (c_beta_s ** 10), (c_alpha_s ** 11) * (c_beta_s ** 12), (c_alpha_s ** 11) * (c_beta_s ** 14), (c_alpha_s ** 11) * (c_beta_s ** 4), (c_alpha_s ** 9) * (s_beta_s ** 8), (c_alpha_s ** 11) * (s_beta_s ** 8), (c_alpha_s ** 7) * (s_beta_s ** 12), (c_alpha_s ** 11) * (s_beta_s ** 10), (c_harmonics_alpha[11] * c_harmonics_beta[10]), (c_alpha_s ** 5) * (s_beta_s ** 2), (c_alpha_s ** 11) * (s_beta_s ** 6), (c_harmonics_alpha[5] * c_harmonics_beta[8]), (c_alpha_s ** 11) * (s_beta_s ** 12), (c_alpha_s ** 7) * (c_beta_s ** 12), (c_alpha_s ** 11) * (s_beta_s ** 14), (c_alpha_s ** 5) * (c_beta_s ** 2), (c_alpha_s ** 9) * (c_beta_s ** 8), (c_harmonics_alpha[15] * c_harmonics_beta[2]), (c_alpha_s ** 7) * (s_beta_s ** 14), (c_alpha_s ** 11) * (s_beta_s ** 4), (c_harmonics_alpha[5] * c_harmonics_beta[6]), (c_harmonics_alpha[3] * c_harmonics_beta[10]), (c_alpha_s ** 7) * (c_beta_s ** 14), (c_alpha_s ** 9) * (s_beta_s ** 10), (c_harmonics_alpha[11] * c_harmonics_beta[8]), (c_harmonics_alpha[15] * c_harmonics_beta[10]), (c_harmonics_alpha[15] * c_harmonics_beta[6]), (c_harmonics_alpha[11] * c_harmonics_beta[14]), (c_harmonics_alpha[9] * c_harmonics_beta[8]), (c_alpha_s ** 9) * (c_beta_s ** 10), 1, (c_harmonics_alpha[13] * c_harmonics_beta[2]), (c_alpha_s ** 9) * (s_beta_s ** 12), (c_harmonics_alpha[11] * c_harmonics_beta[12]), (c_harmonics_alpha[9] * c_harmonics_beta[14]), (c_harmonics_alpha[1] * c_harmonics_beta[10]), (c_harmonics_alpha[15] * c_harmonics_beta[8]), (c_harmonics_alpha[3] * c_harmonics_beta[12]), (c_harmonics_alpha[1] * c_harmonics_beta[12]), (c_harmonics_alpha[9] * c_harmonics_beta[6]), (c_harmonics_alpha[9] * c_harmonics_beta[10]), (c_harmonics_alpha[5] * c_harmonics_beta[12]), (c_alpha_s ** 9) * (c_beta_s ** 12), (c_alpha_s ** 9) * (s_beta_s ** 14), (s_alpha_s ** 2), (c_harmonics_alpha[3] * c_harmonics_beta[14]), (s_alpha_s ** 4), (s_alpha_s ** 8), (c_alpha_s ** 11) * (c_beta_s ** 2), (c_alpha_s ** 11) * (s_beta_s ** 2), (c_harmonics_alpha[9] * c_harmonics_beta[12]), (c_harmonics_alpha[11] * c_harmonics_beta[2]), (c_harmonics_alpha[15] * c_harmonics_beta[12]), (c_harmonics_alpha[13] * c_harmonics_beta[10]), (c_harmonics_alpha[7] * c_harmonics_beta[12]), (c_alpha_s ** 14) * (c_beta_s ** 2), (c_alpha_s ** 14) * (s_beta_s ** 2), (c_harmonics_alpha[13] * c_harmonics_beta[12]), (c_harmonics_alpha[1] * c_harmonics_beta[14]), (s_alpha_s ** 14), (c_harmonics_alpha[5] * c_harmonics_beta[14]), (s_alpha_s ** 10), (c_harmonics_alpha[13] * c_harmonics_beta[6]), (c_alpha_s ** 9) * (c_beta_s ** 14), (c_harmonics_alpha[7] * c_harmonics_beta[8]), (c_alpha_s ** 8) * (c_beta_s ** 2), (c_alpha_s ** 8) * (s_beta_s ** 2), (c_alpha_s ** 10) * (c_beta_s ** 2), (c_alpha_s ** 10) * (s_beta_s ** 2), (c_harmonics_alpha[5] * c_harmonics_beta[10]), (c_alpha_s ** 14) * (c_beta_s ** 4), (c_alpha_s ** 14) * (s_beta_s ** 4), (c_harmonics_alpha[7] * c_harmonics_beta[14]), (c_alpha_s ** 14) * (c_beta_s ** 6), (c_alpha_s ** 14) * (s_beta_s ** 6), (s_alpha_s ** 2) * (c_beta_s ** 2), (c_alpha_s ** 8) * (c_beta_s ** 4), (c_alpha_s ** 2) * (s_beta_s ** 2), (c_alpha_s ** 10) * (c_beta_s ** 4), (c_alpha_s ** 8) * (s_beta_s ** 4), (s_alpha_s ** 4) * (c_beta_s ** 2), (s_alpha_s ** 8) * (s_beta_s ** 2), (c_alpha_s ** 10) * (s_beta_s ** 4), (s_alpha_s ** 8) * (c_beta_s ** 2), (c_alpha_s ** 2) * (c_beta_s ** 2), (c_harmonics_alpha[13] * c_harmonics_beta[8]), (s_alpha_s ** 4) * (s_beta_s ** 2), (s_alpha_s ** 2) * (s_beta_s ** 2), (c_alpha_s ** 14) * (c_beta_s ** 8), (s_alpha_s ** 6), (c_alpha_s ** 6) * (c_beta_s ** 2), (c_alpha_s ** 14) * (s_beta_s ** 8), (c_alpha_s ** 6) * (s_beta_s ** 2), (c_harmonics_alpha[15] * c_harmonics_beta[14]), (c_alpha_s ** 8) * (s_beta_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 10), (c_harmonics_alpha[7] * c_harmonics_beta[6]), (c_alpha_s ** 10) * (s_beta_s ** 6), (c_alpha_s ** 8) * (c_beta_s ** 6), (c_alpha_s ** 2) * (s_beta_s ** 4), (c_alpha_s ** 10) * (c_beta_s ** 6), (c_alpha_s ** 14) * (s_beta_s ** 10), (c_alpha_s ** 2) * (c_beta_s ** 4), (s_alpha_s ** 14) * (c_beta_s ** 2), (c_alpha_s ** 14) * (c_beta_s ** 12), (s_alpha_s ** 8) * (s_beta_s ** 4), (c_alpha_s ** 8) * (s_beta_s ** 8), (s_alpha_s ** 10) * (s_beta_s ** 2), (c_alpha_s ** 14) * (s_beta_s ** 12), (c_alpha_s ** 2) * (c_beta_s ** 6), (s_alpha_s ** 14) * (s_beta_s ** 2), (c_alpha_s ** 4) * (s_beta_s ** 2), (c_alpha_s ** 10) * (s_beta_s ** 8), (s_alpha_s ** 2) * (c_beta_s ** 4), (c_alpha_s ** 2) * (c_beta_s ** 8), (s_alpha_s ** 8) * (c_beta_s ** 4), (s_alpha_s ** 4) * (c_beta_s ** 4), (s_beta_s ** 14), (s_alpha_s ** 10) * (c_beta_s ** 2), (c_harmonics_alpha[11] * c_harmonics_beta[7]), (c_harmonics_alpha[11] * c_harmonics_beta[11]), (c_harmonics_alpha[11] * c_harmonics_beta[13]), (c_harmonics_alpha[11] * c_harmonics_beta[1]), (c_harmonics_alpha[11] * c_harmonics_beta[3]), (c_harmonics_alpha[11] * c_harmonics_beta[5]), (c_harmonics_alpha[11] * c_harmonics_beta[9]), (c_alpha_s ** 14) * (s_beta_s ** 14), (c_harmonics_alpha[11] * c_harmonics_beta[15]), (c_alpha_s ** 8) * (c_beta_s ** 8), (c_alpha_s ** 4) * (c_beta_s ** 2), (c_alpha_s ** 10) * (c_beta_s ** 8), (s_alpha_s ** 4) * (s_beta_s ** 4), (c_alpha_s ** 14) * (c_beta_s ** 14), (s_beta_s ** 4), (c_alpha_s ** 8) * (s_beta_s ** 10), (c_alpha_s ** 2) * (c_beta_s ** 10), (s_alpha_s ** 12), (s_alpha_s ** 2) * (s_beta_s ** 4), (c_alpha_s ** 10) * (s_beta_s ** 10), (c_alpha_s ** 6) * (c_beta_s ** 4), (s_alpha_s ** 8) * (c_beta_s ** 6), (c_alpha_s ** 2) * (s_beta_s ** 6), (c_alpha_s ** 8) * (c_beta_s ** 10), (c_alpha_s ** 6) * (s_beta_s ** 4), (c_alpha_s ** 10) * (c_beta_s ** 10), (s_alpha_s ** 8) * (s_beta_s ** 6), (c_alpha_s ** 8) * (c_beta_s ** 14), (s_alpha_s ** 4) * (s_beta_s ** 6), (s_alpha_s ** 2) * (s_beta_s ** 6), (c_alpha_s ** 8) * (c_beta_s ** 12), (c_alpha_s ** 8) * (s_beta_s ** 12), ])


    coefficients_array = np.array([-0.41453516429953496, -0.21201348792439786, -0.20252167634226048, 0.12423407116808098, -0.14466733347089217, -0.13517552191237525, -0.11060954184103898, -0.10188715920238355, -0.0901080891465607, -0.082155135546831, -0.03128938968918849, -0.0764375284456814, -0.06914855902301657, -0.06667965613947148, 0.021108853018337717, -0.059949225932336946, -0.05936672900384538, -0.049170636431520975, -0.04787366924166433, -0.05310667611639987, -0.034309311173663204, -0.03256434766497922, 0.019323524584904293, 0.02539199976802366, -0.009491811604466221, 0.023550354329809994, 0.028329675396311826, 0.017481879073194907, 0.026681154052849522, 0.02948813135172795, 0.028032733920487763, -0.029939606320877686, -0.028642639055672964, 0.02977129295162208, -0.007585216053584025, 0.028480388363013972, 0.02961495645119865, 0.02845991350431741, 0.02923457636050835, 0.028191651095554722, 0.0197362622898178, 0.005330377240493159, 0.017630891620213623, -0.01973655913316156, -0.004588057421618188, -0.020299530447337986, -0.017991595617031637, -0.01905168470562612, 0.02014503133578062, 0.004049796009645043, 0.018039660588435612, -0.0036747342149208106, 0.02029193029012418, -0.0034638022925132248, 0.013300763952986454, 0.01830153057983745, 0.014556568795251744, 0.020053060355334232, -0.0029651944265721517, 0.012878119247225947, 0.015210493639310013, 0.010926496196338679, 0.014117039202745475, -0.014694999749076034, 0.002819052444000997, 0.015521420954701284, 0.014759826317982698, 0.010526483472264855, -0.013496275611978388, 0.01817763166610036, 0.019627811714408222, 0.015064180998009926, -0.0025669145025111503, -0.012407823585255098, 0.01912818971814811, 0.017854342561133142, -0.010747579167482065, 0.01860925797781278, 0.017443668608352413, 0.006321049723185216, -0.011110214983642062, 0.0019751076002433874, 0.017002551700134927, 0.005943668999231541, -0.00995666572734796, -0.001795582062232738, -0.0017801081081122497, 0.010644917238823862, -0.001742824188588223, 0.009294638130499914, 0.001721539938878498, 0.011309433409710844, 0.011610922792122199, 0.01170994242770116, 0.006561367622076003, -0.00818837169602246, 0.008872977812335758, -0.00866060927720746, 0.009630042321342914, -0.001366728295918275, -0.0032445919066302134, 0.007418684780162598, -0.0013310349298962622, 0.01001261444850214, -0.007548288157828647, 0.01018287330812237, -0.0028672111482431605, -0.006612846444644934, 0.00118240000101357, -0.006903702916596861, 0.004581400399641914, 0.0009603762394949167, -0.0009457974470904971, -0.005829055671202379, -0.005527961302014658, 0.0008103823132913457, 0.0007512495690552003, 0.0007146847871623541, -0.0006833577217019835, -0.0006761413882165425, -0.004028355929665839, 0.00022659865705845165, -0.000554846244823514, -0.003740330867148488, 0.0005218328033946243, 0.0004578677936724596, 0.00044689717489047675, -0.00043823398150150583, 0.0004203633566002042, -0.0003995019843126514, 0.000383880938833346, 0.00035740263064568817, -0.0003539485056361715, -0.0023078460889241234, -0.002481757454114613, -0.000255892397527586, -0.00030959783817466753, -0.00033436015813438587, 0.00045827555413923283, 0.0009908127136249703, -0.0009891544735200672, -0.0002611051566808101, 0.00024369000260542474, -0.000230885940795754, -0.00022124391505823224, 0.00022119937982876848, 0.0008191256599125596, 0.0008235423741303679, -0.00021274289048811684, 0.00019432443077923924, -0.0003544272840920851, 0.0001772051230286887, 0.00028644809744111265, -0.00016020978442716065, -0.0011087781653333457, 0.00015128030321892659, -0.0004402675353572689, -0.00043230193229009685, -0.00046822447179848705, -0.0004616196870294705, 0.00013905165750055677, 0.0006190511866718879, 0.0006234678972697357, 0.0001083816486002118, 0.0005273987776444072, 0.0005150458205724819, -0.00013651748389950958, -0.00032403757247181285, 0.00013545037300253152, -0.00034563759128971363, -0.0003160719628651416, -0.0001740837673798413, 0.00023500849269831274, -0.0003390328174920063, 0.0002232670594919294, 0.00012044208208968265, -7.435320525467645e-05, -0.0001602764447517981, -0.00011937497595434718, 0.00047278095572314305, 8.706332601159645e-05, -0.00016603088339296165, 0.0004436583234480491, -0.00015643574502033472, 5.999680184073419e-05, -0.00026909556377397657, 0.0004267100445854453, 5.582559266518229e-05, -0.00028770553310165887, -0.00025478399754516313, 0.0001165190361748291, -0.00027437800236351204, 0.00040075852177743194, 0.00010151071709497682, -0.00018228085845509992, 0.00037913184685086894, 0.00018296665656811453, -0.00024456052899280735, 0.00014878031804548976, 0.000376292233928191, 0.00011276909831970895, -0.00017214639426616393, 9.454891718389404e-05, -0.00025993985707958075, -9.392985113568965e-05, 0.0001263794751270528, 0.0001712252190679978, -0.00012478899163993377, 8.155980645777758e-05, 0.00013766777766163654, 4.045172717494201e-05, 4.0449312598016217e-05, 4.044895059749e-05, 4.0439811714567005e-05, 4.0446908637103416e-05, 4.0450097782935375e-05, 4.0450642184452324e-05, 0.00036234264255878237, 4.044891640452058e-05, -0.00020797173933842535, 8.287579357930526e-05, -0.00022668006868867141, -0.00011098167686588081, 0.00032790899681187113, 3.973169465136818e-05, -0.00021820423437994495, 0.00011726520877088216, -6.549385930707915e-05, -7.678734436092264e-05, -0.00023222556335305119, -0.00011745385807923768, 0.00015686923018296353, 8.632931791854749e-05, -0.00018542204812257187, -0.00010785871092100767, -0.0002024924095792905, 0.00014528082328436998, -0.00020364480799886124, -0.00010226244305372597, -7.669327943794249e-05, -0.00018550942061886327, -0.00018840118859078807, ])


    return np.dot(coefficients_array, expressions_array)
@jit(nopython=True, cache=True)
def E_coefficients_truncated_shadow_False_ideal_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([(s_alpha_s ** 1) * (s_beta_s ** 1), (s_harmonics_alpha[1] * s_harmonics_beta[3]), (s_harmonics_alpha[3] * s_harmonics_beta[1]), (s_alpha_s ** 3) * (s_beta_s ** 1), (s_alpha_s ** 1) * (s_beta_s ** 3), (s_alpha_s ** 5) * (s_beta_s ** 1), (s_alpha_s ** 1) * (s_beta_s ** 5), (s_harmonics_alpha[5] * s_harmonics_beta[1]), (s_alpha_s ** 7) * (s_beta_s ** 1), (s_alpha_s ** 3) * (s_beta_s ** 3), (s_alpha_s ** 1) * (s_beta_s ** 7), (s_harmonics_alpha[3] * s_harmonics_beta[3]), (s_harmonics_alpha[1] * s_harmonics_beta[5]), (s_alpha_s ** 9) * (s_beta_s ** 1), (s_alpha_s ** 1) * (s_beta_s ** 9), (s_alpha_s ** 11) * (s_beta_s ** 1), (s_alpha_s ** 13) * (s_beta_s ** 1), (s_alpha_s ** 1) * (s_beta_s ** 11), (s_alpha_s ** 5) * (s_beta_s ** 3), (s_alpha_s ** 3) * (s_beta_s ** 5), (s_alpha_s ** 1) * (s_beta_s ** 13), (s_harmonics_alpha[7] * s_harmonics_beta[1]), (s_alpha_s ** 7) * (s_beta_s ** 3), (s_alpha_s ** 3) * (s_beta_s ** 7), (s_alpha_s ** 5) * (s_beta_s ** 5), (s_harmonics_alpha[1] * s_harmonics_beta[7]), (s_alpha_s ** 9) * (s_beta_s ** 3), (s_harmonics_alpha[3] * s_harmonics_beta[5]), (s_alpha_s ** 3) * (s_beta_s ** 9), (s_alpha_s ** 11) * (s_beta_s ** 3), (s_harmonics_alpha[5] * s_harmonics_beta[3]), (s_harmonics_alpha[11] * s_harmonics_beta[1]), (s_alpha_s ** 3) * (s_beta_s ** 11), (s_alpha_s ** 7) * (s_beta_s ** 5), (s_alpha_s ** 13) * (s_beta_s ** 3), (s_harmonics_alpha[5] * s_harmonics_beta[5]), (s_alpha_s ** 5) * (s_beta_s ** 7), (s_harmonics_alpha[7] * s_harmonics_beta[3]), (s_alpha_s ** 11) * (s_beta_s ** 13), (s_alpha_s ** 11) * (s_beta_s ** 11), (s_alpha_s ** 13) * (s_beta_s ** 11), (s_alpha_s ** 9) * (s_beta_s ** 13), (s_alpha_s ** 13) * (s_beta_s ** 13), (s_alpha_s ** 13) * (s_beta_s ** 9), (s_alpha_s ** 9) * (s_beta_s ** 11), (s_alpha_s ** 11) * (s_beta_s ** 9), (s_harmonics_alpha[13] * s_harmonics_beta[1]), (s_alpha_s ** 3) * (s_beta_s ** 13), (s_alpha_s ** 7) * (s_beta_s ** 13), (s_alpha_s ** 9) * (s_beta_s ** 9), (s_alpha_s ** 13) * (s_beta_s ** 7), (s_harmonics_alpha[7] * s_harmonics_beta[5]), (s_alpha_s ** 7) * (s_beta_s ** 11), (s_harmonics_alpha[9] * s_harmonics_beta[3]), (s_harmonics_alpha[3] * s_harmonics_beta[7]), (s_alpha_s ** 11) * (s_beta_s ** 7), (s_harmonics_alpha[11] * s_harmonics_beta[5]), (s_harmonics_alpha[7] * s_harmonics_beta[7]), (s_harmonics_alpha[9] * s_harmonics_beta[1]), (s_harmonics_alpha[1] * s_harmonics_beta[11]), (s_alpha_s ** 7) * (s_beta_s ** 9), (s_alpha_s ** 9) * (s_beta_s ** 5), (s_alpha_s ** 5) * (s_beta_s ** 13), (s_harmonics_alpha[13] * s_harmonics_beta[3]), (s_harmonics_alpha[5] * s_harmonics_beta[7]), (s_alpha_s ** 9) * (s_beta_s ** 7), (s_harmonics_alpha[13] * s_harmonics_beta[9]), (s_harmonics_alpha[13] * s_harmonics_beta[11]), (s_harmonics_alpha[11] * s_harmonics_beta[11]), (s_harmonics_alpha[11] * s_harmonics_beta[7]), (s_harmonics_alpha[3] * s_harmonics_beta[9]), (s_harmonics_alpha[9] * s_harmonics_beta[15]), (s_alpha_s ** 5) * (s_beta_s ** 9), (s_alpha_s ** 13) * (s_beta_s ** 5), (s_harmonics_alpha[11] * s_harmonics_beta[9]), (s_harmonics_alpha[9] * s_harmonics_beta[13]), (s_harmonics_alpha[13] * s_harmonics_beta[7]), (s_harmonics_alpha[1] * s_harmonics_beta[15]), (s_harmonics_alpha[7] * s_harmonics_beta[9]), (s_harmonics_alpha[9] * s_harmonics_beta[7]), (s_harmonics_alpha[9] * s_harmonics_beta[9]), (s_harmonics_alpha[13] * s_harmonics_beta[5]), (s_alpha_s ** 5) * (s_beta_s ** 11), (s_harmonics_alpha[7] * s_harmonics_beta[15]), (s_harmonics_alpha[1] * s_harmonics_beta[13]), (s_harmonics_alpha[15] * s_harmonics_beta[7]), (s_harmonics_alpha[5] * s_harmonics_beta[11]), (s_harmonics_alpha[15] * s_harmonics_beta[1]), (s_harmonics_alpha[13] * s_harmonics_beta[15]), (s_harmonics_alpha[7] * s_harmonics_beta[13]), (s_harmonics_alpha[15] * s_harmonics_beta[3]), (s_harmonics_alpha[9] * s_harmonics_beta[11]), (s_harmonics_alpha[13] * s_harmonics_beta[13]), (s_harmonics_alpha[9] * s_harmonics_beta[5]), (s_harmonics_alpha[3] * s_harmonics_beta[13]), (s_harmonics_alpha[11] * s_harmonics_beta[3]), (s_harmonics_alpha[5] * s_harmonics_beta[9]), (s_alpha_s ** 7) * (s_beta_s ** 7), (s_harmonics_alpha[11] * s_harmonics_beta[13]), (s_harmonics_alpha[5] * s_harmonics_beta[13]), (s_harmonics_alpha[15] * s_harmonics_beta[9]), (s_harmonics_alpha[15] * s_harmonics_beta[15]), (s_harmonics_alpha[1] * s_harmonics_beta[9]), (s_harmonics_alpha[3] * s_harmonics_beta[11]), (s_harmonics_alpha[11] * s_harmonics_beta[15]), (s_harmonics_alpha[15] * s_harmonics_beta[11]), (s_harmonics_alpha[5] * s_harmonics_beta[15]), (s_harmonics_alpha[15] * s_harmonics_beta[13]), (s_harmonics_alpha[7] * s_harmonics_beta[11]), (s_harmonics_alpha[15] * s_harmonics_beta[5]), (s_alpha_s ** 11) * (s_beta_s ** 5), (s_harmonics_alpha[3] * s_harmonics_beta[15]), ])


    coefficients_array = np.array([-0.2461657652955841, -0.20634785720158696, -0.16361021837968762, -0.143721769369717, -0.13303735968701366, -0.10028684211206453, -0.08778744276970231, 0.03901708721045841, -0.07651147223699588, -0.06734173875083259, -0.06406422132631295, 0.02814984098305894, 0.02531928280866543, -0.06162860910198802, -0.049710442636846534, -0.05149893497496437, -0.04419554818384881, -0.040209272106110035, -0.04082150216654813, -0.03814670647619479, -0.033518043147628004, -0.010133367492426267, -0.026952785068153063, -0.023496231184522157, -0.018793058710272585, -0.005151640038417729, -0.018643122644858404, 0.004443349421363304, -0.015008328344865167, -0.013224848841691755, 0.0030354935567405016, 0.0026283385720627475, -0.00963006108913092, -0.009022187529016257, -0.009481477373559071, -0.002065783040118204, -0.00809368124355814, -0.0017835096503615979, 0.012143059955381594, 0.011146699379332428, 0.01206372740317496, 0.010842244430639828, 0.012866637801068503, 0.010597596048117197, 0.009571421151443717, 0.009401373524875623, -0.00137471857879033, -0.006006861872807775, 0.008471834006282198, 0.007435216147603179, 0.00787579518043922, 0.0012303641422103339, 0.0067883813365535416, -0.0011269284581167179, -0.0011055396117797146, 0.006250832941742378, -0.0010071857356554745, -0.0009193339730158072, 0.0008887122363167141, 0.0008017711902118124, 0.004072403464814912, -0.0033780385437877057, 0.003902145258252366, 0.0006974621607053942, 0.0006967183892398319, 0.0036924291185458486, 0.0006418658966300968, -0.0005261293880844381, 0.0004930088181556885, 0.0004835453546584527, 0.0004720080654907967, 0.0004787865562952905, -0.0021076340281056833, 0.0025074718743080854, -0.0004464877788818209, -0.00041849924878619224, -0.00039217563551820965, 0.00039789498655581337, 0.0003630989544655669, 0.00034440828512773575, -0.0003329289398779137, 0.00031421582854736945, 0.0015436808258868907, -0.000277447799147105, -0.00024291974765751933, -0.00024834306945495263, -0.00023737629162408247, 0.00024157980462136228, -0.00021491298328916606, 0.0001920615860767549, 0.0001901212084310883, 0.0001826922138807788, 0.0001788088337318689, 0.0001755083050347877, -0.0001535208585531923, 0.00014316830041246825, -0.0001273405636235299, -0.0005366463446072622, -0.00010830619364153303, 9.540402876804045e-05, 9.01301893100553e-05, 7.305384503302056e-05, -6.581997711916392e-05, -6.527951426850478e-05, 6.552070367563101e-05, -5.1366467996694596e-05, -4.974236419912924e-05, 4.4961245046826396e-05, 4.336104807130046e-05, 3.968037205857587e-05, 0.00016206421145103437, -3.1067127121697506e-05, ])


    return np.dot(coefficients_array, expressions_array)
@jit(nopython=True, cache=True)
def F_coefficients_truncated_shadow_False_ideal_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([(s_alpha_s ** 2), (s_beta_s ** 2), (s_alpha_s ** 2) * (c_beta_s ** 2), (s_beta_s ** 4), (c_harmonics_alpha[2] * c_harmonics_beta[4]), (c_harmonics_alpha[4] * c_harmonics_beta[2]), (c_alpha_s ** 2) * (s_beta_s ** 2), (c_harmonics_alpha[2] * c_harmonics_beta[2]), (s_alpha_s ** 4), (s_alpha_s ** 2) * (c_beta_s ** 4), (c_alpha_s ** 4) * (s_beta_s ** 2), (c_harmonics_alpha[6] * c_harmonics_beta[2]), 1, (s_alpha_s ** 4) * (c_beta_s ** 2), (c_alpha_s ** 6) * (s_beta_s ** 2), (c_alpha_s ** 4) * (c_beta_s ** 2), (s_alpha_s ** 2) * (c_beta_s ** 6), (c_harmonics_alpha[2] * c_harmonics_beta[6]), (c_alpha_s ** 2) * (s_beta_s ** 4), (s_alpha_s ** 12), (c_alpha_s ** 4) * (s_beta_s ** 4), (s_alpha_s ** 4) * (c_beta_s ** 4), (c_alpha_s ** 6) * (c_beta_s ** 2), (s_alpha_s ** 8), (s_beta_s ** 10), (s_alpha_s ** 6), (s_beta_s ** 14), (s_alpha_s ** 6) * (s_beta_s ** 2), (s_alpha_s ** 2) * (c_beta_s ** 8), (s_beta_s ** 8), (c_alpha_s ** 6) * (s_beta_s ** 4), (s_alpha_s ** 8) * (s_beta_s ** 2), (s_beta_s ** 6), (c_alpha_s ** 2) * (c_beta_s ** 2), (s_alpha_s ** 4) * (c_beta_s ** 6), (s_alpha_s ** 10), (s_alpha_s ** 12) * (c_beta_s ** 2), (c_alpha_s ** 12) * (c_beta_s ** 2), (s_alpha_s ** 2) * (c_beta_s ** 10), (c_alpha_s ** 4) * (c_beta_s ** 4), (s_alpha_s ** 6) * (s_beta_s ** 4), (c_alpha_s ** 4) * (s_beta_s ** 6), (c_alpha_s ** 10) * (c_beta_s ** 2), (s_alpha_s ** 10) * (c_beta_s ** 2), (c_alpha_s ** 8) * (s_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 6), (s_alpha_s ** 2) * (c_beta_s ** 14), (c_harmonics_alpha[6] * c_harmonics_beta[4]), (s_alpha_s ** 2) * (c_beta_s ** 12), (c_alpha_s ** 4) * (c_beta_s ** 8), (s_alpha_s ** 8) * (s_beta_s ** 4), (c_alpha_s ** 6) * (c_beta_s ** 4), (c_alpha_s ** 4) * (c_beta_s ** 6), (c_alpha_s ** 4) * (c_beta_s ** 10), (c_alpha_s ** 12) * (s_beta_s ** 2), (s_alpha_s ** 2) * (s_beta_s ** 10), (c_alpha_s ** 12) * (c_beta_s ** 4), (s_alpha_s ** 14), (c_alpha_s ** 10) * (c_beta_s ** 4), (s_alpha_s ** 2) * (s_beta_s ** 8), (s_alpha_s ** 12) * (c_beta_s ** 4), (s_beta_s ** 12), (s_alpha_s ** 6) * (c_beta_s ** 2), (s_alpha_s ** 10) * (c_beta_s ** 4), (s_alpha_s ** 6) * (c_beta_s ** 4), (s_alpha_s ** 4) * (c_beta_s ** 8), (c_alpha_s ** 6) * (c_beta_s ** 8), (c_alpha_s ** 6) * (c_beta_s ** 6), (c_alpha_s ** 6) * (s_beta_s ** 6), (s_alpha_s ** 4) * (s_beta_s ** 2), (c_alpha_s ** 4) * (c_beta_s ** 12), (s_alpha_s ** 14) * (s_beta_s ** 2), (c_harmonics_alpha[10] * c_harmonics_beta[4]), (c_alpha_s ** 10) * (s_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 14), (c_alpha_s ** 6) * (c_beta_s ** 10), (c_alpha_s ** 10) * (s_beta_s ** 8), (c_alpha_s ** 14) * (s_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 4), (c_alpha_s ** 12) * (s_beta_s ** 8), (c_alpha_s ** 12) * (s_beta_s ** 6), (c_harmonics_alpha[6] * c_harmonics_beta[6]), (c_alpha_s ** 12) * (s_beta_s ** 4), (c_alpha_s ** 10) * (s_beta_s ** 6), (c_alpha_s ** 10) * (s_beta_s ** 10), (c_alpha_s ** 4) * (s_beta_s ** 14), (c_alpha_s ** 2) * (c_beta_s ** 10), (c_alpha_s ** 12) * (s_beta_s ** 10), (s_alpha_s ** 6) * (s_beta_s ** 6), (c_alpha_s ** 12) * (c_beta_s ** 6), (c_alpha_s ** 10) * (c_beta_s ** 6), (c_harmonics_alpha[8] * c_harmonics_beta[4]), (c_alpha_s ** 6) * (c_beta_s ** 12), (c_alpha_s ** 10) * (s_beta_s ** 4), (c_alpha_s ** 2) * (c_beta_s ** 8), (c_harmonics_alpha[2] * c_harmonics_beta[8]), (c_alpha_s ** 4) * (c_beta_s ** 14), (s_alpha_s ** 12) * (c_beta_s ** 6), (s_alpha_s ** 8) * (s_beta_s ** 6), (c_harmonics_alpha[14] * c_harmonics_beta[4]), (c_alpha_s ** 8) * (c_beta_s ** 2), (s_alpha_s ** 2) * (s_beta_s ** 4), (s_alpha_s ** 2) * (s_beta_s ** 12), (s_alpha_s ** 4) * (c_beta_s ** 10), (s_alpha_s ** 14) * (s_beta_s ** 4), (c_alpha_s ** 10) * (s_beta_s ** 12), (s_alpha_s ** 8) * (c_beta_s ** 4), (c_alpha_s ** 12) * (s_beta_s ** 12), (s_alpha_s ** 10) * (c_beta_s ** 6), (c_alpha_s ** 8) * (s_beta_s ** 4), (c_alpha_s ** 2) * (c_beta_s ** 12), (c_alpha_s ** 4) * (s_beta_s ** 8), (s_alpha_s ** 6) * (s_beta_s ** 14), (s_alpha_s ** 4) * (c_beta_s ** 14), (s_alpha_s ** 6) * (c_beta_s ** 6), (s_alpha_s ** 10) * (s_beta_s ** 2), (c_alpha_s ** 14) * (c_beta_s ** 2), (s_alpha_s ** 8) * (c_beta_s ** 2), (c_alpha_s ** 6) * (s_beta_s ** 14), (s_alpha_s ** 4) * (c_beta_s ** 12), (c_alpha_s ** 6) * (c_beta_s ** 14), (s_alpha_s ** 8) * (s_beta_s ** 14), (c_alpha_s ** 12) * (c_beta_s ** 8), (c_harmonics_alpha[12] * c_harmonics_beta[6]), (s_alpha_s ** 10) * (s_beta_s ** 4), (s_alpha_s ** 4) * (s_beta_s ** 10), (c_alpha_s ** 10) * (c_beta_s ** 8), (s_alpha_s ** 2) * (s_beta_s ** 6), (c_harmonics_alpha[12] * c_harmonics_beta[10]), (c_alpha_s ** 4) * (s_beta_s ** 12), (s_alpha_s ** 4) * (s_beta_s ** 14), (c_alpha_s ** 8) * (s_beta_s ** 10), (s_alpha_s ** 14) * (c_beta_s ** 4), (s_alpha_s ** 14) * (c_beta_s ** 2), (c_alpha_s ** 14) * (s_beta_s ** 4), (c_alpha_s ** 12) * (s_beta_s ** 14), (s_alpha_s ** 2) * (s_beta_s ** 14), (s_alpha_s ** 4) * (s_beta_s ** 8), (s_alpha_s ** 12) * (c_beta_s ** 8), (c_alpha_s ** 6) * (s_beta_s ** 8), (c_alpha_s ** 12) * (c_beta_s ** 10), (c_alpha_s ** 10) * (s_beta_s ** 14), (c_alpha_s ** 8) * (s_beta_s ** 8), (c_alpha_s ** 12) * (c_beta_s ** 14), (c_alpha_s ** 2) * (s_beta_s ** 10), (c_alpha_s ** 12) * (c_beta_s ** 12), (c_alpha_s ** 10) * (c_beta_s ** 14), (s_alpha_s ** 6) * (s_beta_s ** 8), (c_alpha_s ** 2) * (c_beta_s ** 4), (c_alpha_s ** 10) * (c_beta_s ** 10), (s_alpha_s ** 14) * (s_beta_s ** 6), (c_alpha_s ** 8) * (c_beta_s ** 10), (s_alpha_s ** 12) * (s_beta_s ** 10), (s_alpha_s ** 8) * (s_beta_s ** 8), (s_alpha_s ** 12) * (s_beta_s ** 8), (c_alpha_s ** 10) * (c_beta_s ** 12), (s_alpha_s ** 8) * (c_beta_s ** 6), (s_alpha_s ** 6) * (s_beta_s ** 12), (c_harmonics_alpha[12] * c_harmonics_beta[2]), (s_alpha_s ** 10) * (c_beta_s ** 8), (c_harmonics_alpha[12] * c_harmonics_beta[8]), (c_alpha_s ** 4) * (s_beta_s ** 10), (c_alpha_s ** 8) * (c_beta_s ** 8), (c_alpha_s ** 2) * (c_beta_s ** 14), (s_alpha_s ** 8) * (s_beta_s ** 12), (c_alpha_s ** 8) * (s_beta_s ** 12), (c_alpha_s ** 14) * (s_beta_s ** 10), (c_alpha_s ** 6) * (s_beta_s ** 12), (s_alpha_s ** 14) * (s_beta_s ** 14), (s_alpha_s ** 2) * (s_beta_s ** 2), (c_alpha_s ** 8) * (c_beta_s ** 12), (c_alpha_s ** 14) * (c_beta_s ** 10), (c_alpha_s ** 14) * (c_beta_s ** 8), (s_alpha_s ** 12) * (c_beta_s ** 10), (c_alpha_s ** 14) * (s_beta_s ** 8), (c_harmonics_alpha[14] * c_harmonics_beta[10]), (c_harmonics_alpha[10] * c_harmonics_beta[2]), (c_harmonics_alpha[8] * c_harmonics_beta[14]), (c_harmonics_alpha[12] * c_harmonics_beta[4]), (s_alpha_s ** 10) * (s_beta_s ** 14), (s_alpha_s ** 12) * (c_beta_s ** 14), (c_harmonics_alpha[8] * c_harmonics_beta[2]), (c_harmonics_alpha[14] * c_harmonics_beta[6]), (s_alpha_s ** 10) * (s_beta_s ** 10), (s_alpha_s ** 12) * (c_beta_s ** 12), (s_alpha_s ** 8) * (c_beta_s ** 10), (c_harmonics_alpha[14] * c_harmonics_beta[8]), (s_alpha_s ** 4) * (s_beta_s ** 6), (s_alpha_s ** 14) * (c_beta_s ** 6), (c_harmonics_alpha[12] * c_harmonics_beta[14]), (s_alpha_s ** 12) * (s_beta_s ** 12), (c_alpha_s ** 14) * (c_beta_s ** 12), (c_harmonics_alpha[8] * c_harmonics_beta[6]), (c_harmonics_alpha[10] * c_harmonics_beta[6]), (c_harmonics_alpha[10] * c_harmonics_beta[10]), (c_harmonics_alpha[4] * c_harmonics_beta[10]), (s_alpha_s ** 8) * (s_beta_s ** 10), (s_alpha_s ** 8) * (c_beta_s ** 12), (s_alpha_s ** 4) * (s_beta_s ** 12), (c_alpha_s ** 14) * (s_beta_s ** 12), (s_alpha_s ** 6) * (s_beta_s ** 10), (c_harmonics_alpha[8] * c_harmonics_beta[8]), (c_harmonics_alpha[14] * c_harmonics_beta[12]), (s_alpha_s ** 12) * (s_beta_s ** 6), (s_alpha_s ** 10) * (s_beta_s ** 8), (c_harmonics_alpha[6] * c_harmonics_beta[10]), (c_alpha_s ** 6) * (s_beta_s ** 10), (s_alpha_s ** 10) * (c_beta_s ** 14), (c_harmonics_alpha[12] * c_harmonics_beta[12]), (c_harmonics_alpha[4] * c_harmonics_beta[6]), (s_alpha_s ** 10) * (c_beta_s ** 10), (c_alpha_s ** 14) * (c_beta_s ** 6), (c_harmonics_alpha[6] * c_harmonics_beta[8]), (s_alpha_s ** 14) * (c_beta_s ** 10), (s_alpha_s ** 10) * (s_beta_s ** 6), (c_harmonics_alpha[10] * c_harmonics_beta[14]), (s_alpha_s ** 14) * (c_beta_s ** 12), (s_alpha_s ** 10) * (c_beta_s ** 12), (s_alpha_s ** 6) * (c_beta_s ** 8), (c_alpha_s ** 8) * (c_beta_s ** 14), (c_alpha_s ** 14) * (c_beta_s ** 4), (c_alpha_s ** 8) * (c_beta_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 14), (c_alpha_s ** 2) * (c_beta_s ** 6), (s_alpha_s ** 6) * (c_beta_s ** 10), (c_alpha_s ** 13) * (c_beta_s ** 2), (s_alpha_s ** 14) * (s_beta_s ** 12), (c_alpha_s ** 13) * (s_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 12), (s_alpha_s ** 6) * (c_beta_s ** 12), (c_harmonics_alpha[8] * c_harmonics_beta[10]), (s_alpha_s ** 12) * (s_beta_s ** 2), (s_alpha_s ** 14) * (s_beta_s ** 8), (s_alpha_s ** 12) * (s_beta_s ** 4), (s_alpha_s ** 8) * (c_beta_s ** 14), (c_alpha_s ** 9) * (c_beta_s ** 2), (c_alpha_s ** 9) * (s_beta_s ** 2), (c_alpha_s ** 8) * (s_beta_s ** 14), (c_alpha_s ** 2) * (s_beta_s ** 8), (c_harmonics_alpha[14] * c_harmonics_beta[14]), (c_harmonics_alpha[14] * c_harmonics_beta[2]), (c_harmonics_alpha[10] * c_harmonics_beta[12]), (c_alpha_s ** 5) * (c_beta_s ** 2), (s_alpha_s ** 8) * (c_beta_s ** 8), (s_alpha_s ** 12) * (s_beta_s ** 14), (c_harmonics_alpha[2] * c_harmonics_beta[12]), (c_alpha_s ** 5) * (s_beta_s ** 2), (c_harmonics_alpha[2] * c_harmonics_beta[10]), (c_harmonics_alpha[2] * c_harmonics_beta[14]), (s_alpha_s ** 14) * (c_beta_s ** 14), (s_alpha_s ** 10) * (s_beta_s ** 12), (c_alpha_s ** 13) * (c_beta_s ** 4), (c_alpha_s ** 13) * (s_beta_s ** 4), (c_harmonics_alpha[8] * c_harmonics_beta[12]), (c_harmonics_alpha[6] * c_harmonics_beta[14]), (c_harmonics_alpha[10] * c_harmonics_beta[8]), (s_alpha_s ** 14) * (c_beta_s ** 8), (c_harmonics_alpha[6] * c_harmonics_beta[12]), (c_harmonics_alpha[4] * c_harmonics_beta[12]), (c_alpha_s ** 9) * (c_beta_s ** 4), (c_alpha_s ** 9) * (s_beta_s ** 4), (c_harmonics_alpha[4] * c_harmonics_beta[14]), (c_alpha_s ** 14) * (s_beta_s ** 14), (c_alpha_s ** 5) * (c_beta_s ** 4), (c_alpha_s ** 13) * (c_beta_s ** 6), (c_alpha_s ** 5) * (s_beta_s ** 4), (c_alpha_s ** 13) * (s_beta_s ** 6), (c_alpha_s ** 11) * (s_beta_s ** 2), (c_alpha_s ** 11) * (c_beta_s ** 2), (c_alpha_s ** 7) * (s_beta_s ** 2), (c_alpha_s ** 7) * (c_beta_s ** 2), (c_alpha_s ** 9) * (c_beta_s ** 6), (c_alpha_s ** 9) * (s_beta_s ** 6), (c_alpha_s ** 13) * (c_beta_s ** 8), (c_alpha_s ** 13) * (s_beta_s ** 8), (c_alpha_s ** 5) * (c_beta_s ** 6), (c_alpha_s ** 5) * (s_beta_s ** 6), (c_harmonics_alpha[4] * c_harmonics_beta[8]), (c_alpha_s ** 9) * (c_beta_s ** 8), (c_alpha_s ** 9) * (s_beta_s ** 8), (c_alpha_s ** 13) * (c_beta_s ** 10), (c_alpha_s ** 13) * (s_beta_s ** 10), (c_alpha_s ** 9) * (c_beta_s ** 10), (c_alpha_s ** 5) * (c_beta_s ** 8), (c_alpha_s ** 9) * (s_beta_s ** 10), (c_alpha_s ** 13) * (c_beta_s ** 12), (c_alpha_s ** 5) * (s_beta_s ** 8), (c_alpha_s ** 11) * (s_beta_s ** 4), (c_alpha_s ** 13) * (s_beta_s ** 12), (c_alpha_s ** 11) * (c_beta_s ** 4), (s_alpha_s ** 6) * (c_beta_s ** 14), (c_alpha_s ** 7) * (s_beta_s ** 4), (c_alpha_s ** 7) * (c_beta_s ** 4), (c_harmonics_alpha[12] * c_harmonics_beta[7]), (c_harmonics_alpha[12] * c_harmonics_beta[1]), (c_harmonics_alpha[12] * c_harmonics_beta[11]), (c_harmonics_alpha[12] * c_harmonics_beta[3]), (c_harmonics_alpha[12] * c_harmonics_beta[13]), (c_harmonics_alpha[12] * c_harmonics_beta[5]), (c_harmonics_alpha[12] * c_harmonics_beta[9]), (c_alpha_s ** 9) * (c_beta_s ** 12), (c_alpha_s ** 13) * (c_beta_s ** 14), (c_harmonics_alpha[12] * c_harmonics_beta[15]), (c_alpha_s ** 9) * (s_beta_s ** 12), (c_alpha_s ** 13) * (s_beta_s ** 14), (c_alpha_s ** 5) * (c_beta_s ** 10), (c_alpha_s ** 5) * (s_beta_s ** 10), (c_alpha_s ** 9) * (c_beta_s ** 14), (c_alpha_s ** 9) * (s_beta_s ** 14), (c_alpha_s ** 5) * (c_beta_s ** 12), (c_alpha_s ** 11) * (c_beta_s ** 6), (c_alpha_s ** 11) * (s_beta_s ** 6), (c_alpha_s ** 5) * (s_beta_s ** 12), (c_alpha_s ** 7) * (c_beta_s ** 6), (c_alpha_s ** 7) * (s_beta_s ** 6), (s_alpha_s ** 14) * (s_beta_s ** 10), (c_alpha_s ** 5) * (c_beta_s ** 14), (c_alpha_s ** 5) * (s_beta_s ** 14), (c_alpha_s ** 11) * (c_beta_s ** 8), (c_alpha_s ** 11) * (s_beta_s ** 8), (c_alpha_s ** 7) * (c_beta_s ** 8), (c_alpha_s ** 7) * (s_beta_s ** 8), (c_harmonics_alpha[7] * c_harmonics_beta[4]), (c_alpha_s ** 8) * (s_beta_s ** 6), (c_alpha_s ** 11) * (c_beta_s ** 10), (c_alpha_s ** 11) * (s_beta_s ** 10), (c_alpha_s ** 7) * (c_beta_s ** 10), (c_alpha_s ** 7) * (s_beta_s ** 10), (c_alpha_s ** 2) * (c_beta_s ** 13), (s_alpha_s ** 2) * (c_beta_s ** 13), (c_alpha_s ** 1), (c_alpha_s ** 11) * (c_beta_s ** 12), (c_alpha_s ** 7) * (c_beta_s ** 12), (c_alpha_s ** 11) * (s_beta_s ** 12), (c_harmonics_alpha[5] * c_harmonics_beta[4]), (c_alpha_s ** 7) * (s_beta_s ** 12), (c_harmonics_alpha[7] * c_harmonics_beta[6]), (c_harmonics_alpha[5] * c_harmonics_beta[6]), (s_alpha_s ** 2) * (c_beta_s ** 9), (c_harmonics_alpha[3] * c_harmonics_beta[6]), (c_alpha_s ** 2) * (c_beta_s ** 9), (c_harmonics_alpha[9] * c_harmonics_beta[6]), (c_harmonics_alpha[11] * c_harmonics_beta[6]), (c_harmonics_alpha[13] * c_harmonics_beta[6]), (c_alpha_s ** 11) * (c_beta_s ** 14), (c_harmonics_alpha[15] * c_harmonics_beta[6]), (c_alpha_s ** 7) * (c_beta_s ** 14), (c_alpha_s ** 11) * (s_beta_s ** 14), (c_harmonics_alpha[7] * c_harmonics_beta[10]), (c_harmonics_alpha[1] * c_harmonics_beta[6]), (c_harmonics_alpha[3] * c_harmonics_beta[10]), (c_harmonics_alpha[5] * c_harmonics_beta[10]), (c_harmonics_alpha[1] * c_harmonics_beta[10]), (c_harmonics_alpha[9] * c_harmonics_beta[10]), (c_alpha_s ** 7) * (s_beta_s ** 14), (c_harmonics_alpha[11] * c_harmonics_beta[10]), (c_harmonics_alpha[13] * c_harmonics_beta[10]), (c_harmonics_alpha[15] * c_harmonics_beta[10]), (c_alpha_s ** 2) * (c_beta_s ** 5), (s_alpha_s ** 2) * (c_beta_s ** 5), (c_harmonics_alpha[3] * c_harmonics_beta[4]), (c_harmonics_alpha[13] * c_harmonics_beta[2]), (c_harmonics_alpha[11] * c_harmonics_beta[2]), (c_harmonics_alpha[15] * c_harmonics_beta[2]), (c_harmonics_alpha[9] * c_harmonics_beta[2]), (c_harmonics_alpha[1] * c_harmonics_beta[4]), (c_harmonics_alpha[7] * c_harmonics_beta[2]), (c_alpha_s ** 14) * (s_beta_s ** 6), ])


    coefficients_array = np.array([-0.029517508250443466, 0.024097650637475425, -0.030211866191201572, 0.018865300180945944, -0.016030998261359133, 0.014786892323113374, 0.023403292707404544, 0.01361714696678154, -0.014536676735903626, -0.028136415492317164, 0.026957321368861076, -0.010490285818721922, -0.0036253042434353996, -0.018785063327672914, 0.022137092415551427, 0.0175410184108338, -0.02118382385561028, -0.007976924062965718, 0.016095491552683073, -0.012409110951441414, 0.01843092177785342, -0.017928211065362906, 0.01590381929282178, 0.009040041249882056, -0.009794879772212405, 0.006901582864619659, 0.009729548530515001, 0.012622644199902335, -0.014057502156236749, -0.00645533421386307, 0.014818139902348313, 0.012141534613893038, 0.00509420708163285, 0.006114215550600598, -0.013037921748811973, -0.0059941780976556615, -0.011919006761587518, -0.011483360563249933, -0.010443987934318727, 0.009014618828547363, 0.011053450966000812, 0.010380673520648472, -0.009662602482818406, -0.00952320387726865, 0.00846149627898463, 0.007201539396184476, -0.010550357481220478, 0.002725047158985764, -0.009673803716300396, 0.010183529342855869, 0.010437557600690702, 0.008584866772336566, 0.008538467499681528, 0.010284505150751988, -0.008336821598243878, -0.007827616584576105, -0.010917450429870414, 0.004516780813488316, -0.009788225627161883, -0.006810743216864536, -0.010805500754831015, -0.0039872539226555506, -0.005721061340634132, -0.009266614765342228, -0.00729025458282838, -0.00790051097640537, 0.009259519087426083, 0.008015658883970298, 0.008068395263233077, 0.004248386594283723, 0.008918805059752124, 0.00734929269405128, 0.0018498234989050115, -0.005938067787281004, 0.007049981235414019, 0.009248525742706879, -0.01058009633340001, 0.006724865077474151, 0.0051052388564648546, -0.011331702633767178, -0.009659069387525303, -0.0016495791458417649, -0.007770911466566345, -0.00850883371589141, -0.010769644199244113, 0.008297036303992793, 0.005184874461972161, -0.011344889894319069, 0.006563214180228991, -0.008463382386136413, -0.0074687059776246695, 0.0014440527060152765, 0.008037203371844607, -0.0060636909242711, 0.004026538160022389, -0.0013453042518459216, 0.006755361634511822, -0.007615036271237249, 0.006360199031209472, -0.00130834662315323, 0.0038221861687951853, 0.0027698086277770746, -0.0044884749165629845, -0.0053443572570399216, 0.006386936108518838, -0.008815292491923706, -0.004805470385995168, -0.009431844335312026, -0.006250984547991905, 0.004641252541560395, 0.004135272473633138, 0.0044516384272703, 0.007074318422034658, -0.005651306502556961, -0.004369211028793613, 0.003529025764265136, 0.00397070787182728, -0.0031014933736898597, 0.006396395322439373, -0.0048902711340115266, 0.006176473739065518, 0.006578149430137931, -0.005793789669314311, 0.0008989779084217687, 0.003785614877615428, -0.00367245087161087, -0.004775306147671736, -0.0021073323196207686, 0.0007850793131657269, 0.003666875964347847, 0.003926622370768425, -0.004450320813128782, -0.0037948684631359604, -0.0028325118770793196, 0.0036093522845682463, -0.005835744590091134, 0.0026795673019998478, -0.0027145137937434594, -0.004396051843500514, 0.003131718723527001, -0.0045681182797442255, -0.004997100302965489, -0.0034135522873589216, -0.005138213367923645, -0.0019672631843054866, -0.004519581345289255, -0.004413315630549154, 0.0027016353354728773, -0.00119358560035206, -0.0035897408932017453, 0.003470888187503829, 0.0031543910424631223, -0.003913876049877272, 0.002892433161144122, -0.0035019951806300386, -0.0036498253673894507, -0.002432088836956961, 0.00299305588703138, -0.0005074353077370171, -0.0030237342791701277, -0.0005021399494320969, 0.0021879025324540676, 0.0026249023682359475, 0.001856310658424441, 0.003041797965642905, -0.002900699518372074, -0.0034395729957848705, 0.002516655099005613, 0.00402779638747764, 0.0006943579350692196, 0.002497644351115418, 0.0029726221203295743, 0.002637868097847274, -0.002785105137435979, -0.002638330261107205, -0.00036222423066576163, 0.00035190231316998156, -0.00034840427495977735, -0.0003459709979967072, 0.0027425989418850484, -0.0028992629600917983, 0.00033292089760017626, -0.00032399876375419854, -0.0021911366408470493, -0.0024681214976420966, 0.0018687076340061452, 0.00031033574768154316, 0.0010718018015312958, -0.0018411771334196157, 0.00029616158268293394, -0.0023751246071459764, 0.0024147358446556656, -0.00028176511360648333, 0.0002786673701058341, 0.0002769497125330231, 0.00027697967868221254, 0.0016994120416881045, 0.0017820400811218793, -0.0013228199481803002, -0.002254274998040507, 0.0014076535469276985, 0.0002512543552944554, 0.0002488548076643005, -0.0014535566472401774, -0.0015208472694943017, -0.0002445418316223975, 0.0012629638237796658, -0.0018433996314045666, -0.0002326132777707383, -0.00022453198148634013, -0.0014619956211882343, 0.0013050275735048407, 0.00020405807834187643, 0.0015617676465987127, 0.0010265737728472409, 0.00018702486966451306, 0.0015194294143084765, -0.0012608296038017083, -0.0008195095383922323, 0.0011860011732181012, 0.0008551950777588845, 0.000761261750987164, 0.0013663902103500595, 0.0003925654014420696, 0.0007912528290432984, -0.0005337321023131842, 0.001253689656736502, -0.0005308370157201789, 0.0005012209906079874, 0.0007748631459751224, -0.00013391806472100838, -0.0004901041776650339, 0.0009551592936295181, 0.0006234018266751054, 0.0008929865772883917, 0.00037909154228876036, 0.0003814914659055064, 0.0008518892901444526, 0.0003554090066286322, -0.00010453327852415263, 0.00010426115807303107, -0.00010313560844442106, -0.0002415085340067894, 0.0005508854257103659, 0.0008824958315810509, -0.00010077883234512584, -0.00023977424061848374, 9.90249598420165e-05, 9.460379299958524e-05, 0.0008535776507155248, -0.000679355357314384, -0.0003995885117588658, -0.00039669342546910503, 7.641162522461073e-05, -7.581879200892386e-05, -7.393504243895979e-05, 0.0005128332247079598, 7.164489672726421e-05, -6.990166219854221e-05, 0.0002850575416069205, 0.00028745746721162705, 6.895256279867473e-05, 0.0006208290004165045, -0.00018036727367366946, -0.0003321298622628482, -0.0001786329807071397, -0.0003300084842919603, 0.0001754626867581315, 0.00017279857052949818, 0.0001378352178110441, 0.0001357414001809269, 0.00023841011294512072, 0.0002400708958588252, -0.0002899119469480422, -0.00028856426952138535, -0.00014945112901291959, -0.00014840786461131934, -3.8327507046750426e-05, 0.0002093070196675305, 0.00021022866313324913, -0.00026036373691844077, -0.00025969107884033063, 0.0001889290190729568, -0.00013008293987052457, 0.00018920567797846302, -0.0002382164231065468, -0.00012973070348466754, 0.0001329888548788576, -0.00023812010392481464, 0.000130324741434778, -0.00017336763241485956, 0.00010465049182229579, 0.00010255667288043023, -2.593218426327274e-05, -2.5921530700107914e-05, -2.590773212906884e-05, -2.5925351552356612e-05, -2.5904466230982875e-05, -2.5927169012679395e-05, -2.5920002430632568e-05, 0.00017363119905781436, -0.00022082874945285718, -2.590415996968301e-05, 0.00017335702525903828, -0.0002212237945618158, -0.00011653261220309693, -0.00011678363255549936, 0.00016159759300479317, 0.00016085376297096484, -0.00010638445023045322, 0.0001094666718482989, 0.00011137309336755009, -0.00010715095811310996, 8.632295510215689e-05, 8.769948229204311e-05, 0.00014482534806080775, -9.84246328993848e-05, -9.963080265206388e-05, 9.648434917961447e-05, 9.763308227356641e-05, 7.622574747758225e-05, 7.688498362309986e-05, 1.3578268904738603e-05, 6.168947826086556e-05, 8.739160707956815e-05, 8.78792398742313e-05, 6.915115996952855e-05, 6.918437290943534e-05, 4.401222983184504e-05, 4.3437507188527746e-05, 7.434017052641645e-06, 8.055792074138397e-05, 6.383078141438886e-05, 8.048104005719185e-05, 1.0344724666635294e-05, 6.33292407663894e-05, 9.885495347665802e-06, 9.84797762651035e-06, -3.0486079403408764e-05, 9.744969401319238e-06, -3.0037898630365433e-05, 9.729474108379966e-06, 9.583310946569972e-06, 9.544895537798654e-06, 7.517471554575228e-05, 9.541310204303742e-06, 5.963665970582318e-05, 7.461654174240893e-05, 9.061596238254524e-06, 9.058188050747515e-06, 8.998282355535993e-06, 9.010071227915452e-06, 8.94480667727951e-06, 8.918481979856847e-06, 5.867912292428111e-05, 8.776182680189266e-06, 8.73837867192955e-06, 8.734835870182782e-06, 2.0133506968246373e-05, 1.985539679290969e-05, 8.311316741294186e-06, -8.280473125195531e-06, -8.225111254529721e-06, -8.285151024852027e-06, -7.95667409075634e-06, 7.365555046790005e-06, -7.261119940906893e-06, 4.400699344344499e-05, ])


    return np.dot(coefficients_array, expressions_array)

@jit(nopython=True, cache=True)
def A_coefficients_truncated_shadow_True_ideal_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([1, (s_alpha_s ** 2), (c_harmonics_alpha[2] * c_harmonics_beta[4]), (s_alpha_s ** 4), (s_beta_s ** 2), (s_alpha_s ** 6), (s_alpha_s ** 8), (s_alpha_s ** 2) * (s_beta_s ** 2), (s_alpha_s ** 14), (c_alpha_s ** 2) * (c_beta_s ** 2), (c_harmonics_alpha[4] * c_harmonics_beta[2]), (s_alpha_s ** 10), (s_beta_s ** 4), (c_alpha_s ** 4) * (c_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 2), (c_alpha_s ** 6) * (c_beta_s ** 2), (c_alpha_s ** 2) * (c_beta_s ** 4), (s_alpha_s ** 2) * (s_beta_s ** 4), (c_harmonics_alpha[2] * c_harmonics_beta[2]), (c_alpha_s ** 4) * (s_beta_s ** 2), (s_alpha_s ** 6) * (s_beta_s ** 2), (c_alpha_s ** 8) * (c_beta_s ** 2), (c_alpha_s ** 6) * (s_beta_s ** 2), (s_beta_s ** 14), (c_alpha_s ** 2) * (s_beta_s ** 2), (s_alpha_s ** 8) * (s_beta_s ** 2), (c_alpha_s ** 4) * (c_beta_s ** 4), (c_harmonics_alpha[6] * c_harmonics_beta[2]), (c_alpha_s ** 8) * (s_beta_s ** 2), (c_alpha_s ** 2) * (c_beta_s ** 6), (s_alpha_s ** 4) * (s_beta_s ** 4), (c_alpha_s ** 6) * (c_beta_s ** 4), (c_harmonics_alpha[4] * c_harmonics_beta[4]), (c_harmonics_alpha[6] * c_harmonics_beta[4]), (s_alpha_s ** 14) * (c_beta_s ** 2), (s_alpha_s ** 10) * (s_beta_s ** 2), (s_alpha_s ** 2) * (c_beta_s ** 2), (s_alpha_s ** 2) * (s_beta_s ** 6), (c_alpha_s ** 10) * (c_beta_s ** 2), (c_alpha_s ** 8) * (c_beta_s ** 4), (c_harmonics_alpha[4] * c_harmonics_beta[6]), (c_alpha_s ** 4) * (s_beta_s ** 4), (c_alpha_s ** 6) * (s_beta_s ** 4), (s_alpha_s ** 6) * (s_beta_s ** 4), (c_alpha_s ** 4) * (c_beta_s ** 6), (s_alpha_s ** 4) * (c_beta_s ** 2), (c_alpha_s ** 14) * (s_beta_s ** 2), (s_alpha_s ** 14) * (c_beta_s ** 4), (s_alpha_s ** 14) * (s_beta_s ** 2), (s_alpha_s ** 8) * (c_beta_s ** 2), (c_alpha_s ** 10) * (s_beta_s ** 2), (s_alpha_s ** 8) * (s_beta_s ** 4), (c_harmonics_alpha[2] * c_harmonics_beta[6]), (c_alpha_s ** 8) * (s_beta_s ** 4), (c_alpha_s ** 2) * (s_beta_s ** 8), (c_alpha_s ** 4) * (s_beta_s ** 6), (c_alpha_s ** 2) * (s_beta_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 2), (c_alpha_s ** 6) * (c_beta_s ** 6), (s_alpha_s ** 6) * (c_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 4), (s_alpha_s ** 2) * (s_beta_s ** 14), (c_alpha_s ** 6) * (s_beta_s ** 6), (c_alpha_s ** 4) * (s_beta_s ** 8), (s_beta_s ** 6), (c_alpha_s ** 6) * (s_beta_s ** 8), (s_beta_s ** 8), (s_alpha_s ** 4) * (s_beta_s ** 6), (s_alpha_s ** 14) * (c_beta_s ** 6), (c_alpha_s ** 2) * (s_beta_s ** 10), (c_alpha_s ** 8) * (s_beta_s ** 6), (c_alpha_s ** 2) * (c_beta_s ** 8), (c_alpha_s ** 8) * (c_beta_s ** 6), (s_beta_s ** 10), (s_alpha_s ** 10) * (c_beta_s ** 2), (s_alpha_s ** 10) * (s_beta_s ** 4), (c_alpha_s ** 14) * (s_beta_s ** 4), (s_alpha_s ** 14) * (s_beta_s ** 4), (c_alpha_s ** 10) * (c_beta_s ** 4), (c_alpha_s ** 4) * (s_beta_s ** 10), (c_alpha_s ** 8) * (s_beta_s ** 8), (s_alpha_s ** 14) * (s_beta_s ** 6), (c_alpha_s ** 6) * (s_beta_s ** 10), (s_alpha_s ** 2) * (s_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 4), (s_alpha_s ** 2) * (s_beta_s ** 12), (s_alpha_s ** 14) * (s_beta_s ** 8), (c_alpha_s ** 4) * (c_beta_s ** 8), (s_alpha_s ** 14) * (c_beta_s ** 8), (s_alpha_s ** 12), (s_alpha_s ** 6) * (s_beta_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 8), (c_alpha_s ** 8) * (s_beta_s ** 10), (s_alpha_s ** 4) * (s_beta_s ** 14), (c_alpha_s ** 14) * (c_beta_s ** 10), (s_beta_s ** 12), (c_alpha_s ** 6) * (c_beta_s ** 8), (c_alpha_s ** 10) * (s_beta_s ** 4), (s_alpha_s ** 8) * (s_beta_s ** 6), (s_alpha_s ** 14) * (s_beta_s ** 10), (c_alpha_s ** 14) * (c_beta_s ** 12), (s_alpha_s ** 12) * (s_beta_s ** 2), (c_alpha_s ** 14) * (s_beta_s ** 6), (s_alpha_s ** 14) * (c_beta_s ** 10), (c_alpha_s ** 14) * (c_beta_s ** 14), (c_harmonics_alpha[8] * c_harmonics_beta[4]), (s_alpha_s ** 2) * (s_beta_s ** 10), (c_alpha_s ** 10) * (s_beta_s ** 6), (c_alpha_s ** 4) * (s_beta_s ** 12), (c_alpha_s ** 6) * (s_beta_s ** 12), (c_alpha_s ** 8) * (c_beta_s ** 8), (s_alpha_s ** 14) * (s_beta_s ** 12), (c_harmonics_alpha[8] * c_harmonics_beta[14]), (c_alpha_s ** 10) * (s_beta_s ** 8), (c_alpha_s ** 14) * (s_beta_s ** 14), (s_alpha_s ** 2) * (c_beta_s ** 12), (c_alpha_s ** 10) * (c_beta_s ** 6), (s_alpha_s ** 14) * (c_beta_s ** 12), (c_harmonics_alpha[8] * c_harmonics_beta[8]), (c_harmonics_alpha[6] * c_harmonics_beta[10]), (s_alpha_s ** 6) * (s_beta_s ** 14), (c_harmonics_alpha[10] * c_harmonics_beta[4]), (c_alpha_s ** 2) * (s_beta_s ** 12), (s_alpha_s ** 12) * (c_beta_s ** 4), (c_harmonics_alpha[4] * c_harmonics_beta[10]), (s_alpha_s ** 4) * (s_beta_s ** 8), (s_alpha_s ** 2) * (c_beta_s ** 10), (s_alpha_s ** 10) * (s_beta_s ** 6), (c_alpha_s ** 8) * (s_beta_s ** 12), (c_harmonics_alpha[4] * c_harmonics_beta[12]), (c_alpha_s ** 14) * (s_beta_s ** 8), (s_alpha_s ** 14) * (c_beta_s ** 14), (s_alpha_s ** 4) * (s_beta_s ** 12), (s_alpha_s ** 2) * (c_beta_s ** 14), (c_alpha_s ** 14) * (s_beta_s ** 12), (s_alpha_s ** 8) * (s_beta_s ** 14), (c_alpha_s ** 2) * (c_beta_s ** 10), (c_harmonics_alpha[10] * c_harmonics_beta[12]), (c_alpha_s ** 14) * (s_beta_s ** 10), (c_alpha_s ** 12) * (c_beta_s ** 12), (c_alpha_s ** 12) * (c_beta_s ** 10), (s_alpha_s ** 2) * (c_beta_s ** 4), (c_alpha_s ** 10) * (s_beta_s ** 10), (c_harmonics_alpha[2] * c_harmonics_beta[8]), (s_alpha_s ** 8) * (c_beta_s ** 4), (c_harmonics_alpha[6] * c_harmonics_beta[14]), (s_alpha_s ** 12) * (c_beta_s ** 6), (c_alpha_s ** 4) * (c_beta_s ** 10), (c_alpha_s ** 12) * (c_beta_s ** 14), (c_harmonics_alpha[8] * c_harmonics_beta[12]), (s_alpha_s ** 14) * (s_beta_s ** 14), (c_alpha_s ** 6) * (c_beta_s ** 10), (c_alpha_s ** 2) * (s_beta_s ** 14), (s_alpha_s ** 2) * (c_beta_s ** 6), (c_alpha_s ** 12) * (c_beta_s ** 8), (s_alpha_s ** 8) * (s_beta_s ** 8), (c_harmonics_alpha[10] * c_harmonics_beta[2]), (s_alpha_s ** 6) * (s_beta_s ** 8), (s_alpha_s ** 8) * (c_beta_s ** 10), (c_harmonics_alpha[12] * c_harmonics_beta[2]), (s_alpha_s ** 4) * (c_beta_s ** 12), (s_alpha_s ** 4) * (s_beta_s ** 10), (s_alpha_s ** 4) * (c_beta_s ** 10), (s_alpha_s ** 10) * (s_beta_s ** 14), (s_alpha_s ** 8) * (c_beta_s ** 12), (s_alpha_s ** 8) * (c_beta_s ** 8), (s_alpha_s ** 6) * (s_beta_s ** 12), (c_alpha_s ** 12) * (s_beta_s ** 14), (c_alpha_s ** 8) * (c_beta_s ** 10), (s_alpha_s ** 8) * (s_beta_s ** 12), (c_harmonics_alpha[6] * c_harmonics_beta[8]), (c_harmonics_alpha[10] * c_harmonics_beta[10]), (s_alpha_s ** 12) * (c_beta_s ** 2), (s_alpha_s ** 6) * (c_beta_s ** 10), (s_alpha_s ** 4) * (c_beta_s ** 14), (s_alpha_s ** 6) * (c_beta_s ** 12), ])


    coefficients_array = np.array([0.4551241179932208, 0.01579011534627793, 0.016287410059637682, 0.013454745684660053, 0.007788261360135128, 0.011981520010746543, 0.012793182953476078, 0.012681485359721424, -0.014021329461177272, -0.010896891349844898, 0.006274738203976657, 0.010150008162301351, 0.006016066138869259, -0.010698872367376407, 0.010148096730734921, -0.01054564593934089, -0.008791261415107547, 0.00880366020087466, 0.003569188020698695, -0.007426612631328657, 0.008630078480036583, -0.00953033597402573, -0.0084419830134381, 0.006237233899384173, -0.004893223998746174, 0.008534865313131294, -0.00804489687182277, -0.0027382359072619378, -0.008034548322248685, -0.005982328007318099, 0.006818617130453329, -0.007727712667406003, 0.002233596933288612, -0.0021503233466866546, -0.008359679669788397, 0.006867128990399596, 0.0031086299900802625, 0.004954309329789544, -0.005770627915783354, -0.00688378145157283, -0.0017662239065505605, -0.004772637131900792, -0.005624049738958326, 0.005684986669544764, -0.005451520283600718, 0.0033066489749108735, 0.005729899691577551, -0.007619789930697618, -0.005661649786945244, 0.004258317633638829, -0.0046317854028225585, 0.005638824753700124, -0.001369047346458311, -0.005387993800084424, -0.004075444318379679, -0.004712038220504299, -0.0034908975291591702, 0.004973159346220913, -0.005289516955848411, 0.003351441532880225, -0.002787594062401179, 0.005013997016749652, -0.005244312176792476, -0.004782275805621887, 0.0014634117994064247, -0.005094896714665182, -0.0015998673641148893, 0.003733168641404805, -0.006497961583204901, -0.003478206773568224, -0.004950583777048594, -0.0030546379278796987, -0.0046746369461585545, -0.0016517237847676663, 0.0032828791916687176, 0.004417712276837199, 0.004804965503681157, -0.004921760050864842, -0.004028361258335111, -0.004083332237041343, -0.004752512316909258, -0.005303698662504105, -0.004368860320627711, 0.0024755769576986133, 0.004048225159267495, 0.0028185800603949896, -0.00554119678271699, -0.0029889801965197528, -0.00523169274306366, 0.0013435495004802392, 0.0030443019059865958, 0.004247280397534014, 0.004812272033607117, -0.004070901795945623, 0.003552358107795558, 0.005100594207154182, 0.0012055620800300287, -0.0030816433436348678, -0.0028895187464500717, 0.0031814375279675426, -0.005233919860706352, 0.005084829431121306, 0.002211789221272805, 0.0036809760768283088, -0.004365758456527144, 0.0048919108203191635, 0.0005482127023560573, 0.0018264829903446337, -0.002806667319912054, -0.002502847537507559, -0.002946513954759831, -0.002704831002387396, -0.004372765742175504, -0.0004743312979404486, -0.002821566060096694, 0.004267795989567586, 0.0016632560461235391, -0.002368946024903325, -0.003891056562671055, -0.0004561193718001148, -0.0004492888887823513, 0.0028311707882346894, -0.00044392313730116505, -0.0016130179749857827, -0.0021243966832505687, 0.00043924326915457116, 0.0017687454664841412, 0.0014275990422917498, 0.0022943874433154327, -0.002792746115760671, -0.0004176764976139521, 0.0029229230422801234, -0.00366024250016512, 0.0019287504951343332, 0.0015008695243094391, 0.0033072170552876953, 0.0027836148067759245, -0.0011899754900431977, -0.000364304315937275, 0.0028074758708731993, 0.0027639347388138673, 0.002538111630078168, -0.000769195169046989, -0.0023437421630572164, -0.0003479799287002793, 0.0013622770797240265, 0.00034115016244212727, -0.001936332690293182, -0.0014264577562411644, 0.0027475048443110495, 0.00032992290695167334, -0.003095976836419355, -0.0016807127587905432, 0.0012232368813778047, -0.0007976694550429701, 0.0019050755808201266, 0.001635329610011849, -0.00028460221094104155, 0.0013745348875216687, 0.0017037273368072892, -0.0002782627965745087, 0.0013138368427701697, 0.0012213575250207265, 0.001191116779782722, 0.0021016186077992467, 0.0017075181882335176, 0.001396249734311006, 0.0014825873558080977, 0.0021356458162244255, -0.0014579026833024893, 0.001633858468228229, 0.00024296307687305318, 0.00023991818858376174, -0.0008682397183894858, 0.0012088895187047013, 0.0011546046194999538, 0.0012798608019209512, ])


    return np.dot(coefficients_array, expressions_array)
@jit(nopython=True, cache=True)
def B_coefficients_truncated_shadow_True_ideal_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([(s_harmonics_alpha[2] * s_harmonics_beta[1]), (s_harmonics_alpha[4] * s_harmonics_beta[1]), (s_harmonics_alpha[2] * s_harmonics_beta[3]), (s_harmonics_alpha[4] * s_harmonics_beta[3]), (s_harmonics_alpha[6] * s_harmonics_beta[1]), (s_harmonics_alpha[10] * s_harmonics_beta[1]), (s_harmonics_alpha[12] * s_harmonics_beta[1]), (s_harmonics_alpha[8] * s_harmonics_beta[1]), (s_harmonics_alpha[4] * s_harmonics_beta[5]), (s_harmonics_alpha[2] * s_harmonics_beta[5]), (s_harmonics_alpha[14] * s_harmonics_beta[1]), (s_harmonics_alpha[4] * s_harmonics_beta[7]), (s_harmonics_alpha[2] * s_harmonics_beta[9]), (s_harmonics_alpha[2] * s_harmonics_beta[7]), (s_harmonics_alpha[6] * s_harmonics_beta[3]), (s_harmonics_alpha[10] * s_harmonics_beta[11]), (s_harmonics_alpha[6] * s_harmonics_beta[5]), (s_harmonics_alpha[4] * s_harmonics_beta[9]), (s_harmonics_alpha[10] * s_harmonics_beta[13]), (s_harmonics_alpha[12] * s_harmonics_beta[9]), (s_harmonics_alpha[10] * s_harmonics_beta[9]), (s_harmonics_alpha[12] * s_harmonics_beta[7]), (s_harmonics_alpha[12] * s_harmonics_beta[11]), (s_harmonics_alpha[6] * s_harmonics_beta[7]), (s_harmonics_alpha[10] * s_harmonics_beta[15]), (s_harmonics_alpha[2] * s_harmonics_beta[11]), (s_harmonics_alpha[8] * s_harmonics_beta[15]), (s_harmonics_alpha[14] * s_harmonics_beta[13]), (s_harmonics_alpha[8] * s_harmonics_beta[3]), (s_harmonics_alpha[14] * s_harmonics_beta[5]), (s_harmonics_alpha[8] * s_harmonics_beta[13]), (s_harmonics_alpha[14] * s_harmonics_beta[7]), (s_harmonics_alpha[10] * s_harmonics_beta[3]), (s_harmonics_alpha[14] * s_harmonics_beta[3]), (s_harmonics_alpha[6] * s_harmonics_beta[11]), (s_harmonics_alpha[2] * s_harmonics_beta[13]), (s_harmonics_alpha[12] * s_harmonics_beta[13]), (s_harmonics_alpha[14] * s_harmonics_beta[15]), (s_harmonics_alpha[12] * s_harmonics_beta[5]), (s_harmonics_alpha[10] * s_harmonics_beta[7]), (s_harmonics_alpha[14] * s_harmonics_beta[11]), (s_harmonics_alpha[8] * s_harmonics_beta[5]), (s_harmonics_alpha[12] * s_harmonics_beta[3]), (s_harmonics_alpha[6] * s_harmonics_beta[13]), (s_harmonics_alpha[6] * s_harmonics_beta[9]), (s_harmonics_alpha[4] * s_harmonics_beta[13]), (s_harmonics_alpha[4] * s_harmonics_beta[15]), (s_harmonics_alpha[4] * s_harmonics_beta[11]), (s_harmonics_alpha[6] * s_harmonics_beta[15]), (s_harmonics_alpha[14] * s_harmonics_beta[9]), (s_harmonics_alpha[8] * s_harmonics_beta[11]), (s_harmonics_alpha[12] * s_harmonics_beta[15]), (s_harmonics_alpha[10] * s_harmonics_beta[5]), (s_harmonics_alpha[2] * s_harmonics_beta[15]), (s_harmonics_alpha[8] * s_harmonics_beta[7]), (s_harmonics_alpha[8] * s_harmonics_beta[9]), ])


    coefficients_array = np.array([-0.2345124243354104, 0.01256948182911438, -0.007651053004766334, 0.005252456734535845, -0.005193217774865048, -0.00493411256737608, 0.004416526567630939, 0.0035019881927791045, -0.003266393070087991, 0.0025372857681461272, -0.0024732658632489585, 0.0021298592034711835, 0.0020150099421853917, -0.0019235231172351809, -0.0018066228911202068, -0.0018048131039785792, 0.0017558467286935137, -0.0017280394581862526, 0.0017145256302426774, -0.0014807472644822618, 0.0012425022664987343, 0.0011309468947265256, 0.0010811964547867742, -0.0010134793840362478, -0.0010186539466078403, -0.0009712881997065354, 0.0008549157219215216, -0.0007965038278301854, 0.000698445711578583, 0.0006822663795863368, -0.0006260578332041819, -0.0006142843293658124, 0.000603057789198027, -0.0005242929147020284, 0.0005140947807402448, 0.0004992447289316689, -0.0004817657714742274, 0.00046526240544464474, -0.0004400152471791612, -0.0004130588559099897, 0.0003986327729871243, -0.0003827259187515276, -0.0003623276556083043, -0.0003482251558989718, 0.0002750930839522204, 0.0002547923199512526, -0.0002591407529390653, 0.00021255435157821272, -0.0002126469438685581, 0.00019978375249832326, 0.00015229667437987338, -0.00013855964702067674, -0.0001344710624500912, 0.00013187514089033845, 0.00010587853964565361, 1.2316318113424698e-05, ])


    return np.dot(coefficients_array, expressions_array)
@jit(nopython=True, cache=True)
def C_coefficients_truncated_shadow_True_ideal_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([1, (s_alpha_s ** 2), (c_harmonics_alpha[2] * c_harmonics_beta[4]), (s_alpha_s ** 4), (s_beta_s ** 2), (s_alpha_s ** 6), (s_alpha_s ** 8), (s_alpha_s ** 2) * (s_beta_s ** 2), (s_alpha_s ** 14), (c_alpha_s ** 2) * (c_beta_s ** 2), (c_harmonics_alpha[4] * c_harmonics_beta[2]), (s_alpha_s ** 10), (s_beta_s ** 4), (c_alpha_s ** 4) * (c_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 2), (c_alpha_s ** 6) * (c_beta_s ** 2), (c_alpha_s ** 2) * (c_beta_s ** 4), (s_alpha_s ** 2) * (s_beta_s ** 4), (c_harmonics_alpha[2] * c_harmonics_beta[2]), (c_alpha_s ** 4) * (s_beta_s ** 2), (s_alpha_s ** 6) * (s_beta_s ** 2), (c_alpha_s ** 8) * (c_beta_s ** 2), (c_alpha_s ** 6) * (s_beta_s ** 2), (s_beta_s ** 14), (c_alpha_s ** 2) * (s_beta_s ** 2), (s_alpha_s ** 8) * (s_beta_s ** 2), (c_alpha_s ** 4) * (c_beta_s ** 4), (c_harmonics_alpha[6] * c_harmonics_beta[2]), (c_alpha_s ** 8) * (s_beta_s ** 2), (c_alpha_s ** 2) * (c_beta_s ** 6), (s_alpha_s ** 4) * (s_beta_s ** 4), (c_alpha_s ** 6) * (c_beta_s ** 4), (c_harmonics_alpha[4] * c_harmonics_beta[4]), (c_harmonics_alpha[6] * c_harmonics_beta[4]), (s_alpha_s ** 14) * (c_beta_s ** 2), (s_alpha_s ** 10) * (s_beta_s ** 2), (s_alpha_s ** 2) * (c_beta_s ** 2), (s_alpha_s ** 2) * (s_beta_s ** 6), (c_alpha_s ** 10) * (c_beta_s ** 2), (c_alpha_s ** 8) * (c_beta_s ** 4), (c_harmonics_alpha[4] * c_harmonics_beta[6]), (c_alpha_s ** 4) * (s_beta_s ** 4), (c_alpha_s ** 6) * (s_beta_s ** 4), (s_alpha_s ** 6) * (s_beta_s ** 4), (c_alpha_s ** 4) * (c_beta_s ** 6), (s_alpha_s ** 4) * (c_beta_s ** 2), (c_alpha_s ** 14) * (s_beta_s ** 2), (s_alpha_s ** 14) * (c_beta_s ** 4), (s_alpha_s ** 14) * (s_beta_s ** 2), (s_alpha_s ** 8) * (c_beta_s ** 2), (c_alpha_s ** 10) * (s_beta_s ** 2), (s_alpha_s ** 8) * (s_beta_s ** 4), (c_harmonics_alpha[2] * c_harmonics_beta[6]), (c_alpha_s ** 8) * (s_beta_s ** 4), (c_alpha_s ** 2) * (s_beta_s ** 8), (c_alpha_s ** 4) * (s_beta_s ** 6), (c_alpha_s ** 2) * (s_beta_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 2), (c_alpha_s ** 6) * (c_beta_s ** 6), (s_alpha_s ** 6) * (c_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 4), (s_alpha_s ** 2) * (s_beta_s ** 14), (c_alpha_s ** 6) * (s_beta_s ** 6), (c_alpha_s ** 4) * (s_beta_s ** 8), (s_beta_s ** 6), (c_alpha_s ** 6) * (s_beta_s ** 8), (s_beta_s ** 8), (s_alpha_s ** 4) * (s_beta_s ** 6), (s_alpha_s ** 14) * (c_beta_s ** 6), (c_alpha_s ** 2) * (s_beta_s ** 10), (c_alpha_s ** 8) * (s_beta_s ** 6), (c_alpha_s ** 2) * (c_beta_s ** 8), (c_alpha_s ** 8) * (c_beta_s ** 6), (s_beta_s ** 10), (s_alpha_s ** 10) * (c_beta_s ** 2), (s_alpha_s ** 10) * (s_beta_s ** 4), (c_alpha_s ** 14) * (s_beta_s ** 4), (s_alpha_s ** 14) * (s_beta_s ** 4), (c_alpha_s ** 10) * (c_beta_s ** 4), (c_alpha_s ** 4) * (s_beta_s ** 10), (c_alpha_s ** 8) * (s_beta_s ** 8), (s_alpha_s ** 14) * (s_beta_s ** 6), (c_alpha_s ** 6) * (s_beta_s ** 10), (s_alpha_s ** 2) * (s_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 4), (s_alpha_s ** 2) * (s_beta_s ** 12), (s_alpha_s ** 14) * (s_beta_s ** 8), (c_alpha_s ** 4) * (c_beta_s ** 8), (s_alpha_s ** 14) * (c_beta_s ** 8), (s_alpha_s ** 12), (s_alpha_s ** 6) * (s_beta_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 8), (c_alpha_s ** 8) * (s_beta_s ** 10), (s_alpha_s ** 4) * (s_beta_s ** 14), (c_alpha_s ** 14) * (c_beta_s ** 10), (s_beta_s ** 12), (c_alpha_s ** 6) * (c_beta_s ** 8), (c_alpha_s ** 10) * (s_beta_s ** 4), (s_alpha_s ** 8) * (s_beta_s ** 6), (s_alpha_s ** 14) * (s_beta_s ** 10), (c_alpha_s ** 14) * (c_beta_s ** 12), (s_alpha_s ** 12) * (s_beta_s ** 2), (c_alpha_s ** 14) * (s_beta_s ** 6), (s_alpha_s ** 14) * (c_beta_s ** 10), (c_alpha_s ** 14) * (c_beta_s ** 14), (c_harmonics_alpha[8] * c_harmonics_beta[4]), (s_alpha_s ** 2) * (s_beta_s ** 10), (c_alpha_s ** 10) * (s_beta_s ** 6), (c_alpha_s ** 4) * (s_beta_s ** 12), (c_alpha_s ** 6) * (s_beta_s ** 12), (c_alpha_s ** 8) * (c_beta_s ** 8), (s_alpha_s ** 14) * (s_beta_s ** 12), (c_harmonics_alpha[8] * c_harmonics_beta[14]), (c_alpha_s ** 10) * (s_beta_s ** 8), (c_alpha_s ** 14) * (s_beta_s ** 14), (s_alpha_s ** 2) * (c_beta_s ** 12), (c_alpha_s ** 10) * (c_beta_s ** 6), (s_alpha_s ** 14) * (c_beta_s ** 12), (c_harmonics_alpha[8] * c_harmonics_beta[8]), (c_harmonics_alpha[6] * c_harmonics_beta[10]), (s_alpha_s ** 6) * (s_beta_s ** 14), (c_harmonics_alpha[10] * c_harmonics_beta[4]), (c_alpha_s ** 2) * (s_beta_s ** 12), (s_alpha_s ** 12) * (c_beta_s ** 4), (c_harmonics_alpha[4] * c_harmonics_beta[10]), (s_alpha_s ** 4) * (s_beta_s ** 8), (s_alpha_s ** 2) * (c_beta_s ** 10), (s_alpha_s ** 10) * (s_beta_s ** 6), (c_alpha_s ** 8) * (s_beta_s ** 12), (c_harmonics_alpha[4] * c_harmonics_beta[12]), (c_alpha_s ** 14) * (s_beta_s ** 8), (s_alpha_s ** 14) * (c_beta_s ** 14), (s_alpha_s ** 4) * (s_beta_s ** 12), (s_alpha_s ** 2) * (c_beta_s ** 14), (c_alpha_s ** 14) * (s_beta_s ** 12), (s_alpha_s ** 8) * (s_beta_s ** 14), (c_alpha_s ** 2) * (c_beta_s ** 10), (c_harmonics_alpha[10] * c_harmonics_beta[12]), (c_alpha_s ** 14) * (s_beta_s ** 10), (c_alpha_s ** 12) * (c_beta_s ** 12), (c_alpha_s ** 12) * (c_beta_s ** 10), (s_alpha_s ** 2) * (c_beta_s ** 4), (c_alpha_s ** 10) * (s_beta_s ** 10), (c_harmonics_alpha[2] * c_harmonics_beta[8]), (s_alpha_s ** 8) * (c_beta_s ** 4), (c_harmonics_alpha[6] * c_harmonics_beta[14]), (s_alpha_s ** 12) * (c_beta_s ** 6), (c_alpha_s ** 4) * (c_beta_s ** 10), (c_alpha_s ** 12) * (c_beta_s ** 14), (c_harmonics_alpha[8] * c_harmonics_beta[12]), (s_alpha_s ** 14) * (s_beta_s ** 14), (c_alpha_s ** 6) * (c_beta_s ** 10), (c_alpha_s ** 2) * (s_beta_s ** 14), (s_alpha_s ** 2) * (c_beta_s ** 6), (c_alpha_s ** 12) * (c_beta_s ** 8), (s_alpha_s ** 8) * (s_beta_s ** 8), (c_harmonics_alpha[10] * c_harmonics_beta[2]), (s_alpha_s ** 6) * (s_beta_s ** 8), (s_alpha_s ** 8) * (c_beta_s ** 10), (c_harmonics_alpha[12] * c_harmonics_beta[2]), (s_alpha_s ** 4) * (c_beta_s ** 12), (s_alpha_s ** 4) * (s_beta_s ** 10), (s_alpha_s ** 4) * (c_beta_s ** 10), (s_alpha_s ** 10) * (s_beta_s ** 14), ])


    coefficients_array = np.array([0.5448758820067039, -0.015790115346101384, -0.016287410059653964, -0.013454745684643374, -0.007788261360119546, -0.01198152001098012, -0.012793182953394336, -0.012681485359735161, 0.014021329461336052, 0.01089689134980555, -0.006274738203963431, -0.01015000816224103, -0.006016066138790679, 0.010698872367379124, -0.010148096730785042, 0.01054564593931828, 0.008791261415002565, -0.008803660200943279, -0.0035691880205593633, 0.007426612631274163, -0.008630078480007422, 0.009530335974039872, 0.008441983013440705, -0.006237233899491741, 0.004893223998836633, -0.008534865312987873, 0.00804489687177587, 0.002738235907253962, 0.008034548322302085, 0.005982328007431367, -0.006818617130433259, 0.007727712667462086, -0.0022335969333090997, 0.0021503233466830356, 0.008359679669742055, -0.006867128990315121, -0.0031086299900041914, -0.004954309329819158, 0.005770627915868335, 0.006883781451467093, 0.0017662239065668458, 0.004772637131759976, 0.0056240497389324, -0.005684986669735511, 0.005451520283677873, -0.0033066489749015203, -0.005729899691598769, 0.007619789930668138, 0.005661649786860449, -0.004258317633616407, 0.004631785402794452, -0.005638824753707019, 0.0013690473464789093, 0.0053879938001039985, 0.004075444318341811, 0.004712038220572483, 0.0034908975292151957, -0.004973159346173388, 0.005289516955964625, -0.0033514415329082, 0.0027875940624837656, -0.005013997016666074, 0.005244312176774904, 0.00478227580567085, -0.0014634117993472138, 0.005094896714656885, 0.0015998673639927526, -0.0037331686415823743, 0.006497961583116809, 0.003478206773609629, 0.004950583777106263, 0.003054637927806573, 0.004674636946145297, 0.0016517237847993693, -0.003282879191698007, -0.004417712276792196, -0.0048049655036931736, 0.004921760050802836, 0.004028361258240953, 0.004083332237047903, 0.004752512316983333, 0.005303698662508431, 0.004368860320719303, -0.0024755769577948124, -0.0040482251592260255, -0.0028185800603970483, 0.005541196782701405, 0.002988980196591803, 0.00523169274308375, -0.0013435495005449524, -0.003044301905888682, -0.0042472803975394414, -0.004812272033562205, 0.004070901795999358, -0.00355235810774681, -0.005100594207123167, -0.0012055620801266344, 0.003081643343684369, 0.002889518746450765, -0.0031814375278887007, 0.005233919860681924, -0.005084829431037933, -0.002211789221351931, -0.0036809760767679903, 0.004365758456511879, -0.004891910820370831, -0.0005482127023544644, -0.0018264829902077421, 0.002806667319867231, 0.0025028475375290025, 0.002946513954759482, 0.002704831002279024, 0.004372765742281843, 0.0004743312979404237, 0.0028215660600972308, -0.004267795989568379, -0.0016632560461149685, 0.0023689460250405944, 0.0038910565626199575, 0.0004561193718002648, 0.000449288888782418, -0.0028311707882559206, 0.0004439231373007966, 0.0016130179749676951, 0.0021243966832581846, -0.000439243269153342, -0.001768745466541005, -0.0014275990422549286, -0.002294387443400725, 0.0027927461158088426, 0.00041767649761386083, -0.0029229230423693307, 0.0036602425001411036, -0.0019287504950993694, -0.0015008695242845983, -0.0033072170553954065, -0.002783614806583904, 0.0011899754899866665, 0.0003643043159372635, -0.0028074758709432327, -0.0027639347388933627, -0.002538111630075845, 0.0007691951690699792, 0.0023437421631598274, 0.0003479799287116642, -0.0013622770797458263, -0.0003411501624421212, 0.0019363326902796206, 0.001426457756236171, -0.002747504844340129, -0.0003299229069516486, 0.0030959768363751127, 0.0016807127586802642, -0.0012232368814491569, 0.0007976694550806436, -0.0019050755808911865, -0.0016353296100644948, 0.0002846022109394405, -0.0013745348876139268, -0.0017037273368274218, 0.00027826279657420654, -0.001313836842758619, -0.0012213575249528275, -0.0011911167797850186, -0.0021016186078029885, ])


    return np.dot(coefficients_array, expressions_array)
@jit(nopython=True, cache=True)
def D_coefficients_truncated_shadow_True_ideal_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([(c_alpha_s ** 1), (c_alpha_s ** 1) * (c_beta_s ** 2), (c_alpha_s ** 1) * (s_beta_s ** 2), (c_harmonics_alpha[1] * c_harmonics_beta[4]), (c_alpha_s ** 1) * (c_beta_s ** 4), (c_alpha_s ** 1) * (s_beta_s ** 4), (c_alpha_s ** 1) * (c_beta_s ** 6), (c_alpha_s ** 1) * (s_beta_s ** 6), (c_alpha_s ** 1) * (c_beta_s ** 8), (c_harmonics_alpha[3] * c_harmonics_beta[4]), (c_alpha_s ** 1) * (s_beta_s ** 8), (c_harmonics_alpha[3] * c_harmonics_beta[2]), (c_alpha_s ** 1) * (c_beta_s ** 10), (c_alpha_s ** 3) * (s_beta_s ** 2), (c_alpha_s ** 3) * (c_beta_s ** 2), (c_alpha_s ** 1) * (s_beta_s ** 10), (c_alpha_s ** 1) * (c_beta_s ** 12), (c_alpha_s ** 1) * (s_beta_s ** 12), (c_alpha_s ** 1) * (c_beta_s ** 14), (c_alpha_s ** 3) * (s_beta_s ** 4), (c_alpha_s ** 3) * (c_beta_s ** 4), (c_alpha_s ** 5) * (s_beta_s ** 2), (c_alpha_s ** 5) * (c_beta_s ** 2), (c_alpha_s ** 1) * (s_beta_s ** 14), (c_alpha_s ** 3) * (s_beta_s ** 6), (c_alpha_s ** 3) * (c_beta_s ** 6), (c_alpha_s ** 3) * (s_beta_s ** 8), (c_alpha_s ** 3) * (c_beta_s ** 8), (c_harmonics_alpha[1] * c_harmonics_beta[2]), (c_harmonics_alpha[5] * c_harmonics_beta[2]), (c_alpha_s ** 3) * (s_beta_s ** 10), (c_alpha_s ** 3) * (c_beta_s ** 10), (c_alpha_s ** 3) * (s_beta_s ** 12), (c_alpha_s ** 3) * (c_beta_s ** 12), (c_alpha_s ** 3) * (c_beta_s ** 14), (c_alpha_s ** 3) * (s_beta_s ** 14), (c_harmonics_alpha[5] * c_harmonics_beta[4]), (c_alpha_s ** 5) * (s_beta_s ** 4), (c_alpha_s ** 7) * (s_beta_s ** 2), (c_alpha_s ** 5) * (c_beta_s ** 4), (c_alpha_s ** 7) * (c_beta_s ** 2), (c_alpha_s ** 13) * (s_beta_s ** 2), (c_alpha_s ** 13) * (c_beta_s ** 2), (c_harmonics_alpha[11] * c_harmonics_beta[2]), (c_alpha_s ** 5) * (s_beta_s ** 6), (c_alpha_s ** 5) * (c_beta_s ** 6), (c_harmonics_alpha[1] * c_harmonics_beta[8]), (c_harmonics_alpha[9] * c_harmonics_beta[2]), (c_harmonics_alpha[3] * c_harmonics_beta[6]), (c_harmonics_alpha[5] * c_harmonics_beta[8]), (c_harmonics_alpha[7] * c_harmonics_beta[2]), (c_alpha_s ** 7) * (s_beta_s ** 4), (c_harmonics_alpha[13] * c_harmonics_beta[2]), (c_harmonics_alpha[1] * c_harmonics_beta[6]), (c_alpha_s ** 9) * (c_beta_s ** 4), (c_alpha_s ** 5) * (s_beta_s ** 8), (c_alpha_s ** 9) * (c_beta_s ** 6), (c_harmonics_alpha[5] * c_harmonics_beta[6]), (c_alpha_s ** 9) * (c_beta_s ** 8), (c_alpha_s ** 7) * (c_beta_s ** 4), (c_alpha_s ** 5) * (c_beta_s ** 8), (c_alpha_s ** 11) * (c_beta_s ** 4), (c_alpha_s ** 13) * (s_beta_s ** 4), (c_alpha_s ** 9) * (c_beta_s ** 10), (c_alpha_s ** 11) * (c_beta_s ** 6), (c_harmonics_alpha[3] * c_harmonics_beta[10]), (c_harmonics_alpha[7] * c_harmonics_beta[6]), (c_alpha_s ** 11) * (c_beta_s ** 8), (c_alpha_s ** 9) * (c_beta_s ** 12), (c_alpha_s ** 9) * (c_beta_s ** 2), (c_alpha_s ** 9) * (s_beta_s ** 6), (c_alpha_s ** 11) * (c_beta_s ** 2), (c_alpha_s ** 9) * (s_beta_s ** 8), (c_alpha_s ** 9) * (s_beta_s ** 4), (c_alpha_s ** 11) * (c_beta_s ** 10), (c_alpha_s ** 9) * (c_beta_s ** 14), (c_alpha_s ** 9) * (s_beta_s ** 10), (c_alpha_s ** 11) * (c_beta_s ** 12), (c_alpha_s ** 13) * (c_beta_s ** 4), (c_alpha_s ** 11) * (s_beta_s ** 6), (c_alpha_s ** 9) * (s_beta_s ** 12), (c_alpha_s ** 11) * (s_beta_s ** 4), (c_alpha_s ** 11) * (s_beta_s ** 8), (c_alpha_s ** 11) * (c_beta_s ** 14), (c_alpha_s ** 5) * (s_beta_s ** 10), (c_alpha_s ** 9) * (s_beta_s ** 14), (c_harmonics_alpha[15] * c_harmonics_beta[2]), (c_harmonics_alpha[11] * c_harmonics_beta[12]), (c_alpha_s ** 11) * (s_beta_s ** 10), (c_alpha_s ** 11) * (s_beta_s ** 12), (c_harmonics_alpha[11] * c_harmonics_beta[14]), (c_harmonics_alpha[7] * c_harmonics_beta[12]), (c_alpha_s ** 5) * (c_beta_s ** 10), (c_harmonics_alpha[9] * c_harmonics_beta[14]), (c_harmonics_alpha[7] * c_harmonics_beta[4]), (c_alpha_s ** 11) * (s_beta_s ** 14), (c_harmonics_alpha[11] * c_harmonics_beta[10]), (c_alpha_s ** 9) * (s_beta_s ** 2), (c_alpha_s ** 11) * (s_beta_s ** 2), (c_harmonics_alpha[15] * c_harmonics_beta[12]), (c_harmonics_alpha[1] * c_harmonics_beta[10]), (c_harmonics_alpha[5] * c_harmonics_beta[12]), (c_harmonics_alpha[13] * c_harmonics_beta[8]), (c_harmonics_alpha[7] * c_harmonics_beta[10]), (c_harmonics_alpha[15] * c_harmonics_beta[10]), (c_alpha_s ** 7) * (s_beta_s ** 6), (c_alpha_s ** 13) * (s_beta_s ** 6), (c_harmonics_alpha[15] * c_harmonics_beta[6]), (c_alpha_s ** 5) * (s_beta_s ** 12), (c_harmonics_alpha[13] * c_harmonics_beta[6]), (c_harmonics_alpha[5] * c_harmonics_beta[14]), (c_alpha_s ** 5) * (c_beta_s ** 12), (c_harmonics_alpha[11] * c_harmonics_beta[8]), (c_harmonics_alpha[15] * c_harmonics_beta[4]), (c_harmonics_alpha[1] * c_harmonics_beta[12]), (c_alpha_s ** 5) * (s_beta_s ** 14), (c_alpha_s ** 13) * (c_beta_s ** 6), (c_alpha_s ** 7) * (c_beta_s ** 14), (c_alpha_s ** 7) * (c_beta_s ** 6), (c_harmonics_alpha[9] * c_harmonics_beta[10]), (c_harmonics_alpha[9] * c_harmonics_beta[8]), (c_alpha_s ** 7) * (c_beta_s ** 12), (c_harmonics_alpha[11] * c_harmonics_beta[6]), (c_alpha_s ** 13) * (s_beta_s ** 8), (c_harmonics_alpha[9] * c_harmonics_beta[4]), (c_harmonics_alpha[3] * c_harmonics_beta[14]), (c_alpha_s ** 5) * (c_beta_s ** 14), (c_harmonics_alpha[3] * c_harmonics_beta[8]), (c_harmonics_alpha[15] * c_harmonics_beta[14]), (c_harmonics_alpha[11] * c_harmonics_beta[4]), (c_alpha_s ** 7) * (c_beta_s ** 10), (c_harmonics_alpha[9] * c_harmonics_beta[12]), (c_harmonics_alpha[3] * c_harmonics_beta[12]), (c_alpha_s ** 7) * (s_beta_s ** 14), 1, (c_harmonics_alpha[13] * c_harmonics_beta[14]), (c_alpha_s ** 7) * (s_beta_s ** 8), (c_alpha_s ** 13) * (s_beta_s ** 10), (c_alpha_s ** 7) * (s_beta_s ** 12), (c_alpha_s ** 13) * (c_beta_s ** 8), (c_harmonics_alpha[13] * c_harmonics_beta[10]), (c_harmonics_alpha[5] * c_harmonics_beta[10]), (c_harmonics_alpha[13] * c_harmonics_beta[4]), (c_alpha_s ** 13) * (c_beta_s ** 14), (c_harmonics_alpha[7] * c_harmonics_beta[14]), (s_alpha_s ** 2), (s_alpha_s ** 8), (s_alpha_s ** 4), (c_harmonics_alpha[15] * c_harmonics_beta[8]), (c_harmonics_alpha[7] * c_harmonics_beta[8]), (c_alpha_s ** 14) * (c_beta_s ** 2), (c_alpha_s ** 13) * (c_beta_s ** 12), (c_alpha_s ** 13) * (s_beta_s ** 12), (c_alpha_s ** 14) * (s_beta_s ** 2), (s_alpha_s ** 14), (s_alpha_s ** 10), (c_alpha_s ** 8) * (s_beta_s ** 2), (c_alpha_s ** 8) * (c_beta_s ** 2), (c_alpha_s ** 10) * (s_beta_s ** 2), (c_alpha_s ** 10) * (c_beta_s ** 2), (c_alpha_s ** 14) * (c_beta_s ** 4), (c_alpha_s ** 14) * (s_beta_s ** 4), (c_alpha_s ** 7) * (s_beta_s ** 10), (c_alpha_s ** 7) * (c_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 6), (c_alpha_s ** 14) * (s_beta_s ** 6), (c_alpha_s ** 8) * (s_beta_s ** 4), (c_alpha_s ** 2) * (c_beta_s ** 2), (c_alpha_s ** 8) * (c_beta_s ** 4), (c_alpha_s ** 10) * (s_beta_s ** 4), (s_alpha_s ** 2) * (s_beta_s ** 2), (c_alpha_s ** 10) * (c_beta_s ** 4), (s_alpha_s ** 2) * (c_beta_s ** 2), (s_alpha_s ** 8) * (c_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 2), (s_alpha_s ** 8) * (s_beta_s ** 2), (s_alpha_s ** 4) * (c_beta_s ** 2), (s_alpha_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 8), (c_alpha_s ** 14) * (s_beta_s ** 8), (c_alpha_s ** 6) * (s_beta_s ** 2), (c_harmonics_alpha[9] * c_harmonics_beta[6]), (c_alpha_s ** 6) * (c_beta_s ** 2), (c_alpha_s ** 8) * (s_beta_s ** 6), (c_alpha_s ** 8) * (c_beta_s ** 6), (c_alpha_s ** 13) * (s_beta_s ** 14), (c_alpha_s ** 10) * (s_beta_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 10), (c_alpha_s ** 10) * (c_beta_s ** 6), (c_alpha_s ** 14) * (s_beta_s ** 10), (c_alpha_s ** 2) * (c_beta_s ** 4), (c_alpha_s ** 14) * (c_beta_s ** 12), (s_alpha_s ** 14) * (c_beta_s ** 2), (c_alpha_s ** 14) * (s_beta_s ** 12), (s_alpha_s ** 14) * (s_beta_s ** 2), (c_alpha_s ** 4) * (c_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 4), (s_alpha_s ** 8) * (c_beta_s ** 4), (s_alpha_s ** 2) * (s_beta_s ** 4), (s_alpha_s ** 10) * (c_beta_s ** 2), (c_alpha_s ** 8) * (s_beta_s ** 8), (s_alpha_s ** 8) * (s_beta_s ** 4), (s_alpha_s ** 10) * (s_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 4), (c_harmonics_alpha[9] * c_harmonics_beta[11]), (c_harmonics_alpha[9] * c_harmonics_beta[13]), (c_harmonics_alpha[9] * c_harmonics_beta[7]), (s_alpha_s ** 2) * (c_beta_s ** 4), (c_harmonics_alpha[9] * c_harmonics_beta[3]), (c_harmonics_alpha[9] * c_harmonics_beta[1]), (c_harmonics_alpha[9] * c_harmonics_beta[5]), (c_harmonics_alpha[9] * c_harmonics_beta[9]), (s_alpha_s ** 4) * (c_beta_s ** 4), (c_alpha_s ** 10) * (s_beta_s ** 8), (c_alpha_s ** 8) * (c_beta_s ** 8), (c_harmonics_alpha[9] * c_harmonics_beta[15]), (c_alpha_s ** 4) * (s_beta_s ** 2), (c_alpha_s ** 10) * (c_beta_s ** 8), (c_alpha_s ** 14) * (s_beta_s ** 14), ])


    coefficients_array = np.array([-0.4411997493471783, -0.22750559978786944, -0.21369414955447272, 0.1228811599661923, -0.15699548611679856, -0.14318403589190104, -0.1212199414558026, -0.10844946697332933, -0.09959456901109763, -0.038734650524196015, -0.08786507037295942, 0.034210954612027, -0.08511246549655091, 0.05772505972811209, 0.055919210619701044, -0.07428757723891875, -0.0747311418223187, -0.06467449829087307, -0.06691855681218138, 0.05382917674917937, 0.05202332771397506, -0.04700868456403073, -0.045781865295260654, -0.05751538572319073, 0.0517842614573293, 0.05017236016410828, 0.04984735610949014, 0.04842940239410079, -0.013811450266336267, -0.013311163002429792, 0.047978428130758435, 0.046726477090515056, 0.046218211808521065, 0.04510431834557809, 0.04358562657665029, 0.04458474096017516, -0.008942922797191518, -0.027392714054255304, -0.02380966434463416, -0.026165894851003246, -0.021542894338313478, -0.021640686855802897, -0.018830544571802173, 0.00461729734465018, -0.017574374094583855, -0.016368264288390926, 0.003901828637743409, -0.0035887617778991056, -0.0033432335494582824, -0.0032959397140648115, 0.0032221335357488523, -0.011454295813761561, -0.0028569477514421124, 0.002844162771924067, 0.011199559859874737, -0.011918879630575724, 0.01336136577001723, 0.0026020420176007474, 0.014335463216052146, -0.009187525752225483, -0.010733479261772467, 0.0109833434507706, -0.01187721387291507, 0.014722468451124423, 0.012766443296376788, -0.00233861983433353, -0.0022803322317281913, 0.013538858060037467, 0.0148058738044592, 0.006746787373240379, 0.010835502862200868, 0.007274252925588932, 0.011938760960028584, 0.008544536337843895, 0.013813688631273415, 0.01472651091398533, 0.012441402802266051, 0.013833751019352079, -0.009067071499479103, 0.0101215007749099, 0.01262692069762483, 0.00819551011600358, 0.011036806379150789, 0.01371937057163846, -0.00834447437660497, 0.012637975444896305, 0.0017323257471744066, 0.0016534764474832378, 0.011439010977650795, 0.011570930549876417, -0.0015187021493841925, -0.0015132009013652005, -0.00718045053015207, 0.0015008271660741977, -0.00142752739801058, 0.011555055689446148, -0.0013587707071452055, 0.004091763847145136, 0.004486419632876134, -0.001303853400276313, 0.0012458221132322636, 0.0012351428546596536, -0.001217792774799254, 0.0012023512407322529, 0.0012142583672620753, -0.0052278802924102235, -0.0069212119725500865, -0.00116761460033908, -0.005934545129480767, 0.0010215711820983698, -0.000965440664114345, -0.004792564943452693, 0.0008541252114272332, 0.0008341945417666268, -0.0007861682541412615, -0.004230998324935475, -0.004259600444612019, 0.004560334523240859, -0.003058572652923269, -0.0006313758399909269, 0.0006325211969341675, 0.0037018723940197684, -0.0006039430415804977, -0.004082653103228078, -0.0005754129548159707, 0.0005710355892379726, -0.003111302896713255, -0.0005003672242195643, 0.00048073919016985035, -0.0004373056114949884, 0.002399122022947524, -0.00043160788755450003, 0.00042213020979263595, 0.0027264923299119754, 0.00016580106967111104, -0.0003956355719786711, -0.001723400067505933, -0.0023110455721983246, 0.0017971911594428828, -0.0015695724266535354, 0.00023304644025750522, 0.00022646130068452062, -0.00022644060551409745, 0.0018431845009793915, 0.0002054130411763525, -0.00016688598302385155, 0.0002985545071255248, -0.00021520888151117004, -0.00016017104136155328, 0.00015242987521642403, 0.0005368311755587506, 0.0011295199858359327, -0.0011358777963500501, 0.0005302442269289304, -0.00022841020637057944, 0.0001870020817626389, -0.0002820159935639513, -0.0002768138697210709, -0.00030086756711363244, -0.00029520846664284213, 0.0004039637579595344, 0.0003973768031589892, 0.0004154856805318662, 0.00034844508745902105, 0.00033811184875380984, 0.0003303612777861089, -0.00021104039844713305, 8.613743860049293e-05, -0.00020583828699014632, -0.00022548657180306055, -8.480615380057857e-05, -0.00021982745399234355, -8.207989007818193e-05, 0.0001496357091149822, 8.074860231396486e-05, -0.0001086280315269593, 0.00014891879773581016, -0.00010658090562218399, 5.841865685129473e-05, 0.00029980244056385276, 0.000290888250148386, -0.00010410656921174048, -3.937784542724544e-05, -9.928081620981012e-05, -0.00017657996023263527, -0.00016932312237990247, -0.00032072667316913547, -0.00018863726163303833, 0.00027344706825398787, -0.00018129575265802232, 0.0002670037124942527, 6.791958144009248e-05, 0.0002470709537914549, -0.00011423146220617623, 0.0002467328966932042, -0.00011417870543536728, 6.163641321789434e-05, 6.2530767511304e-05, 0.00011288150952748296, -6.224348843485496e-05, 9.368180075638833e-05, -0.00015202276347071905, 0.00011216460252798537, 9.332027466825355e-05, -8.075506581478301e-05, 2.7731213311782384e-05, 2.773109738484721e-05, 2.773024616178855e-05, -5.9517224781732506e-05, 2.7707113126275804e-05, 2.7674323750710993e-05, 2.7723689548997927e-05, 2.773145676729672e-05, -7.870793335354303e-05, -0.00016284886316499371, -0.00014271115365673725, 2.7731084945879706e-05, 5.692673490313304e-05, -0.0001538250084242972, 0.0002237698731897971, ])


    return np.dot(coefficients_array, expressions_array)
@jit(nopython=True, cache=True)
def E_coefficients_truncated_shadow_True_ideal_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([(s_alpha_s ** 1) * (s_beta_s ** 1), (s_harmonics_alpha[1] * s_harmonics_beta[3]), (s_harmonics_alpha[3] * s_harmonics_beta[1]), (s_alpha_s ** 3) * (s_beta_s ** 1), (s_alpha_s ** 1) * (s_beta_s ** 3), (s_alpha_s ** 5) * (s_beta_s ** 1), (s_alpha_s ** 1) * (s_beta_s ** 5), (s_harmonics_alpha[5] * s_harmonics_beta[1]), (s_alpha_s ** 7) * (s_beta_s ** 1), (s_alpha_s ** 3) * (s_beta_s ** 3), (s_alpha_s ** 1) * (s_beta_s ** 7), (s_harmonics_alpha[1] * s_harmonics_beta[5]), (s_harmonics_alpha[3] * s_harmonics_beta[3]), (s_alpha_s ** 9) * (s_beta_s ** 1), (s_alpha_s ** 1) * (s_beta_s ** 9), (s_alpha_s ** 11) * (s_beta_s ** 1), (s_alpha_s ** 1) * (s_beta_s ** 11), (s_alpha_s ** 13) * (s_beta_s ** 1), (s_alpha_s ** 5) * (s_beta_s ** 3), (s_alpha_s ** 3) * (s_beta_s ** 5), (s_alpha_s ** 1) * (s_beta_s ** 13), (s_alpha_s ** 7) * (s_beta_s ** 3), (s_alpha_s ** 3) * (s_beta_s ** 7), (s_harmonics_alpha[7] * s_harmonics_beta[1]), (s_harmonics_alpha[1] * s_harmonics_beta[7]), (s_alpha_s ** 5) * (s_beta_s ** 5), (s_alpha_s ** 9) * (s_beta_s ** 3), (s_alpha_s ** 3) * (s_beta_s ** 9), (s_harmonics_alpha[3] * s_harmonics_beta[5]), (s_alpha_s ** 11) * (s_beta_s ** 3), (s_alpha_s ** 3) * (s_beta_s ** 11), (s_alpha_s ** 7) * (s_beta_s ** 5), (s_alpha_s ** 13) * (s_beta_s ** 3), (s_alpha_s ** 5) * (s_beta_s ** 7), (s_harmonics_alpha[13] * s_harmonics_beta[1]), (s_harmonics_alpha[9] * s_harmonics_beta[1]), (s_alpha_s ** 11) * (s_beta_s ** 13), (s_alpha_s ** 13) * (s_beta_s ** 11), (s_alpha_s ** 11) * (s_beta_s ** 11), (s_alpha_s ** 3) * (s_beta_s ** 13), (s_alpha_s ** 13) * (s_beta_s ** 13), (s_alpha_s ** 9) * (s_beta_s ** 13), (s_alpha_s ** 13) * (s_beta_s ** 9), (s_alpha_s ** 9) * (s_beta_s ** 11), (s_alpha_s ** 11) * (s_beta_s ** 9), (s_harmonics_alpha[9] * s_harmonics_beta[9]), (s_alpha_s ** 7) * (s_beta_s ** 13), (s_alpha_s ** 9) * (s_beta_s ** 9), (s_alpha_s ** 13) * (s_beta_s ** 7), (s_harmonics_alpha[13] * s_harmonics_beta[11]), (s_harmonics_alpha[9] * s_harmonics_beta[3]), (s_harmonics_alpha[11] * s_harmonics_beta[13]), (s_harmonics_alpha[7] * s_harmonics_beta[11]), (s_alpha_s ** 7) * (s_beta_s ** 11), (s_harmonics_alpha[15] * s_harmonics_beta[1]), (s_alpha_s ** 11) * (s_beta_s ** 7), (s_harmonics_alpha[9] * s_harmonics_beta[11]), (s_harmonics_alpha[13] * s_harmonics_beta[13]), (s_harmonics_alpha[7] * s_harmonics_beta[9]), (s_harmonics_alpha[7] * s_harmonics_beta[5]), (s_harmonics_alpha[11] * s_harmonics_beta[1]), (s_harmonics_alpha[13] * s_harmonics_beta[9]), (s_harmonics_alpha[1] * s_harmonics_beta[11]), (s_alpha_s ** 9) * (s_beta_s ** 5), (s_harmonics_alpha[11] * s_harmonics_beta[15]), (s_alpha_s ** 7) * (s_beta_s ** 9), (s_harmonics_alpha[9] * s_harmonics_beta[7]), (s_harmonics_alpha[11] * s_harmonics_beta[11]), (s_alpha_s ** 5) * (s_beta_s ** 13), (s_harmonics_alpha[5] * s_harmonics_beta[5]), (s_alpha_s ** 9) * (s_beta_s ** 7), (s_harmonics_alpha[5] * s_harmonics_beta[7]), (s_harmonics_alpha[7] * s_harmonics_beta[13]), (s_alpha_s ** 5) * (s_beta_s ** 9), (s_harmonics_alpha[1] * s_harmonics_beta[13]), (s_harmonics_alpha[11] * s_harmonics_beta[7]), (s_harmonics_alpha[15] * s_harmonics_beta[7]), (s_harmonics_alpha[15] * s_harmonics_beta[15]), (s_harmonics_alpha[9] * s_harmonics_beta[5]), (s_harmonics_alpha[13] * s_harmonics_beta[3]), (s_harmonics_alpha[15] * s_harmonics_beta[9]), (s_harmonics_alpha[3] * s_harmonics_beta[7]), (s_harmonics_alpha[5] * s_harmonics_beta[3]), (s_alpha_s ** 13) * (s_beta_s ** 5), (s_harmonics_alpha[13] * s_harmonics_beta[7]), (s_harmonics_alpha[5] * s_harmonics_beta[11]), (s_harmonics_alpha[15] * s_harmonics_beta[13]), (s_harmonics_alpha[9] * s_harmonics_beta[15]), (s_harmonics_alpha[7] * s_harmonics_beta[3]), (s_alpha_s ** 5) * (s_beta_s ** 11), (s_harmonics_alpha[11] * s_harmonics_beta[5]), (s_alpha_s ** 7) * (s_beta_s ** 7), (s_harmonics_alpha[15] * s_harmonics_beta[5]), (s_harmonics_alpha[11] * s_harmonics_beta[9]), (s_harmonics_alpha[1] * s_harmonics_beta[9]), (s_harmonics_alpha[3] * s_harmonics_beta[15]), (s_harmonics_alpha[9] * s_harmonics_beta[13]), (s_harmonics_alpha[3] * s_harmonics_beta[11]), (s_harmonics_alpha[7] * s_harmonics_beta[7]), (s_harmonics_alpha[5] * s_harmonics_beta[13]), (s_harmonics_alpha[13] * s_harmonics_beta[5]), (s_harmonics_alpha[13] * s_harmonics_beta[15]), (s_harmonics_alpha[15] * s_harmonics_beta[11]), (s_harmonics_alpha[5] * s_harmonics_beta[9]), (s_harmonics_alpha[11] * s_harmonics_beta[3]), (s_harmonics_alpha[3] * s_harmonics_beta[13]), (s_harmonics_alpha[1] * s_harmonics_beta[15]), (s_harmonics_alpha[3] * s_harmonics_beta[9]), (s_harmonics_alpha[5] * s_harmonics_beta[15]), (s_alpha_s ** 11) * (s_beta_s ** 5), (s_harmonics_alpha[7] * s_harmonics_beta[15]), ])


    coefficients_array = np.array([-0.24204932451033676, -0.1981757857000688, -0.1640662353108674, -0.1405204345472757, -0.1319930469791797, -0.09783109591207381, -0.0876413901688899, 0.034864533763158054, -0.07462010065052399, -0.06661067004718892, -0.06426669529166931, 0.02735207388144001, 0.025947136927464247, -0.060158201831983, -0.050066715435539824, -0.05034386273702951, -0.0406366559618579, -0.04327942785608192, -0.04038723467499937, -0.03812504226225582, -0.0339773776804909, -0.026751763787873032, -0.023741094147657193, -0.00659724064298042, -0.0055018433162594025, -0.018916373322482912, -0.01861543925719757, -0.015364565429005873, 0.003614013595049488, -0.013323619767747453, -0.010032983414160035, -0.009263506948008315, -0.009672101948918058, -0.00841287173580152, -0.0017836723749511208, 0.0016530810922650943, 0.01173005719737812, 0.01162658844930231, 0.010707448487190761, -0.006426651935962479, 0.012460297987472254, 0.010425154301658919, 0.01013310619968702, 0.009134557861463029, 0.008942161570977075, -0.0013297538721343267, 0.008053961859359542, 0.006988614449376196, 0.00740056083336591, -0.001117120338726899, -0.0011251158148732987, -0.001108775584910681, -0.0010785658761170128, 0.006359788208474566, 0.001008024255517692, 0.005793495521282358, 0.0009821331756198327, 0.0009032270976251886, 0.0008833719766044237, -0.0008697317628712117, 0.0008653497749900928, 0.0008715822644254854, 0.0008141800487808368, -0.003705952415400254, 0.0007377255676811073, 0.003648087828147458, 0.0006726960000730148, 0.0006624956268435219, 0.0034858728032017834, -0.0006148172990325343, 0.003264748534195873, -0.0005854522282610022, 0.0005482415819999086, -0.002499331248115473, -0.000533283147849222, -0.0005194833100483569, 0.0005221967698565124, -0.0005207333109463949, 0.000491171704670388, 0.00047288079484090757, -0.00046448883179163073, -0.00042461609283687187, 0.00038395543166379727, 0.0020775420811296247, -0.00036876601574819813, 0.00033760454245366876, 0.0003332075221563123, -0.0003101859738126609, 0.00025311141749382937, 0.0011289334859983906, 0.00019622899255282298, -0.0009190457407096286, -0.00019615144225377168, 0.00018576250680606154, 0.00017850552191175112, 0.0001801846163723508, -0.0001738036051963656, -0.00015940263722180885, 0.00014442207399951028, -0.00014448689443588168, -0.00012481856940785342, -0.0001096221828785395, 0.00010534113876240874, 0.00010375442835218579, 8.690578121795553e-05, -7.806404027858955e-05, -7.88187619110224e-05, 5.6662602722330786e-05, -4.944920125087041e-05, -0.00022653348146778175, 2.2210946266358567e-05, ])


    return np.dot(coefficients_array, expressions_array)
@jit(nopython=True, cache=True)
def F_coefficients_truncated_shadow_True_ideal_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([1, (s_alpha_s ** 2), (s_beta_s ** 2), (s_alpha_s ** 4), (s_beta_s ** 4), (s_alpha_s ** 2) * (c_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 2), (c_harmonics_alpha[2] * c_harmonics_beta[4]), (c_harmonics_alpha[2] * c_harmonics_beta[2]), (s_alpha_s ** 2) * (c_beta_s ** 4), (s_alpha_s ** 4) * (c_beta_s ** 2), (c_harmonics_alpha[4] * c_harmonics_beta[2]), (s_beta_s ** 14), (c_alpha_s ** 4) * (s_beta_s ** 2), (s_alpha_s ** 6), (s_alpha_s ** 4) * (c_beta_s ** 4), (s_beta_s ** 10), (c_alpha_s ** 2) * (s_beta_s ** 4), (s_alpha_s ** 2) * (c_beta_s ** 6), (c_harmonics_alpha[2] * c_harmonics_beta[6]), (s_beta_s ** 8), (c_harmonics_alpha[6] * c_harmonics_beta[2]), (s_alpha_s ** 6) * (c_beta_s ** 2), (s_alpha_s ** 10), (s_alpha_s ** 14), (s_alpha_s ** 4) * (c_beta_s ** 6), (c_alpha_s ** 4) * (s_beta_s ** 4), (s_alpha_s ** 6) * (c_beta_s ** 4), (s_alpha_s ** 8), (c_alpha_s ** 4) * (c_beta_s ** 2), (s_alpha_s ** 8) * (s_beta_s ** 2), (s_alpha_s ** 10) * (s_beta_s ** 2), (c_alpha_s ** 14) * (s_beta_s ** 2), (s_alpha_s ** 2) * (c_beta_s ** 8), (c_alpha_s ** 6) * (s_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 14), (s_alpha_s ** 2) * (s_beta_s ** 8), (s_alpha_s ** 2) * (s_beta_s ** 10), (c_alpha_s ** 2) * (c_beta_s ** 2), (c_alpha_s ** 2) * (c_beta_s ** 10), (s_beta_s ** 6), (c_alpha_s ** 10) * (c_beta_s ** 2), (s_alpha_s ** 14) * (c_beta_s ** 2), (c_alpha_s ** 2) * (c_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 2), (s_alpha_s ** 8) * (s_beta_s ** 4), (c_alpha_s ** 8) * (c_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 6), (s_alpha_s ** 2) * (c_beta_s ** 14), (c_harmonics_alpha[6] * c_harmonics_beta[4]), (c_harmonics_alpha[2] * c_harmonics_beta[8]), (s_alpha_s ** 4) * (c_beta_s ** 8), (s_alpha_s ** 10) * (s_beta_s ** 4), (s_alpha_s ** 6) * (c_beta_s ** 6), (c_alpha_s ** 4) * (c_beta_s ** 8), (c_alpha_s ** 4) * (c_beta_s ** 10), (s_alpha_s ** 12) * (s_beta_s ** 2), (c_alpha_s ** 10) * (c_beta_s ** 4), (s_alpha_s ** 2) * (s_beta_s ** 14), (s_alpha_s ** 4) * (s_beta_s ** 8), (c_alpha_s ** 8) * (c_beta_s ** 4), (c_alpha_s ** 2) * (c_beta_s ** 12), (s_alpha_s ** 4) * (s_beta_s ** 10), (c_harmonics_alpha[6] * c_harmonics_beta[6]), (s_alpha_s ** 2) * (c_beta_s ** 10), (s_alpha_s ** 14) * (c_beta_s ** 4), (s_alpha_s ** 2) * (c_beta_s ** 12), (c_alpha_s ** 4) * (s_beta_s ** 14), (s_alpha_s ** 8) * (c_beta_s ** 2), (s_alpha_s ** 2) * (s_beta_s ** 4), (c_alpha_s ** 8) * (s_beta_s ** 8), (c_alpha_s ** 14) * (s_beta_s ** 4), (c_alpha_s ** 10) * (s_beta_s ** 8), (s_alpha_s ** 8) * (c_beta_s ** 4), (c_alpha_s ** 8) * (s_beta_s ** 10), (s_alpha_s ** 4) * (c_beta_s ** 14), (s_alpha_s ** 6) * (s_beta_s ** 2), (c_alpha_s ** 4) * (c_beta_s ** 12), (c_alpha_s ** 10) * (s_beta_s ** 10), (c_alpha_s ** 6) * (s_beta_s ** 4), (c_harmonics_alpha[4] * c_harmonics_beta[6]), (c_harmonics_alpha[6] * c_harmonics_beta[8]), (c_alpha_s ** 4) * (s_beta_s ** 6), (s_alpha_s ** 12) * (s_beta_s ** 4), (s_alpha_s ** 12) * (c_beta_s ** 2), (c_alpha_s ** 10) * (s_beta_s ** 6), (s_alpha_s ** 12), (s_alpha_s ** 4) * (c_beta_s ** 10), (s_alpha_s ** 6) * (s_beta_s ** 4), (s_alpha_s ** 4) * (c_beta_s ** 12), (c_alpha_s ** 8) * (s_beta_s ** 6), (s_alpha_s ** 8) * (s_beta_s ** 14), (c_alpha_s ** 4) * (c_beta_s ** 6), (s_alpha_s ** 12) * (c_beta_s ** 4), (c_harmonics_alpha[4] * c_harmonics_beta[10]), (c_harmonics_alpha[4] * c_harmonics_beta[4]), (s_alpha_s ** 2) * (s_beta_s ** 2), (c_harmonics_alpha[8] * c_harmonics_beta[12]), (c_harmonics_alpha[8] * c_harmonics_beta[6]), (c_alpha_s ** 6) * (s_beta_s ** 10), (c_alpha_s ** 10) * (s_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 6), (c_alpha_s ** 10) * (c_beta_s ** 6), (c_alpha_s ** 6) * (s_beta_s ** 8), (s_alpha_s ** 10) * (s_beta_s ** 14), (c_alpha_s ** 2) * (s_beta_s ** 10), (c_alpha_s ** 14) * (c_beta_s ** 8), (s_alpha_s ** 6) * (s_beta_s ** 14), (s_alpha_s ** 10) * (s_beta_s ** 6), (c_harmonics_alpha[8] * c_harmonics_beta[14]), (c_harmonics_alpha[12] * c_harmonics_beta[14]), (c_alpha_s ** 8) * (c_beta_s ** 6), (s_alpha_s ** 8) * (s_beta_s ** 6), (c_harmonics_alpha[8] * c_harmonics_beta[4]), (c_harmonics_alpha[12] * c_harmonics_beta[2]), (c_harmonics_alpha[14] * c_harmonics_beta[2]), (s_alpha_s ** 2) * (s_beta_s ** 6), (c_alpha_s ** 12) * (s_beta_s ** 8), (c_alpha_s ** 2) * (c_beta_s ** 4), (s_alpha_s ** 4) * (s_beta_s ** 2), (c_alpha_s ** 14) * (c_beta_s ** 4), (c_alpha_s ** 14) * (c_beta_s ** 10), (c_harmonics_alpha[4] * c_harmonics_beta[12]), (s_alpha_s ** 14) * (c_beta_s ** 6), (c_harmonics_alpha[6] * c_harmonics_beta[10]), (c_harmonics_alpha[10] * c_harmonics_beta[10]), (c_alpha_s ** 10) * (s_beta_s ** 12), (s_beta_s ** 12), (c_alpha_s ** 12) * (s_beta_s ** 10), (c_alpha_s ** 8) * (s_beta_s ** 12), (s_alpha_s ** 4) * (s_beta_s ** 14), (c_harmonics_alpha[12] * c_harmonics_beta[12]), (c_alpha_s ** 14) * (c_beta_s ** 6), (s_alpha_s ** 2) * (s_beta_s ** 12), (s_alpha_s ** 10) * (c_beta_s ** 4), (c_alpha_s ** 6) * (c_beta_s ** 10), (c_harmonics_alpha[14] * c_harmonics_beta[10]), (c_alpha_s ** 12) * (c_beta_s ** 4), (c_alpha_s ** 10) * (s_beta_s ** 4), (c_harmonics_alpha[10] * c_harmonics_beta[2]), (s_alpha_s ** 6) * (c_beta_s ** 8), (c_alpha_s ** 4) * (c_beta_s ** 14), (c_harmonics_alpha[14] * c_harmonics_beta[8]), (c_alpha_s ** 6) * (c_beta_s ** 8), (c_alpha_s ** 12) * (c_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 12), (s_alpha_s ** 12) * (s_beta_s ** 14), (s_alpha_s ** 6) * (s_beta_s ** 10), (c_harmonics_alpha[14] * c_harmonics_beta[12]), (c_alpha_s ** 14) * (c_beta_s ** 12), (c_harmonics_alpha[4] * c_harmonics_beta[8]), (c_alpha_s ** 2) * (c_beta_s ** 14), (s_alpha_s ** 6) * (s_beta_s ** 8), (c_alpha_s ** 4) * (c_beta_s ** 4), (c_alpha_s ** 6) * (c_beta_s ** 4), (c_alpha_s ** 6) * (s_beta_s ** 14), (s_alpha_s ** 10) * (c_beta_s ** 2), (c_harmonics_alpha[10] * c_harmonics_beta[8]), (c_harmonics_alpha[10] * c_harmonics_beta[12]), (c_harmonics_alpha[8] * c_harmonics_beta[8]), (c_alpha_s ** 14) * (s_beta_s ** 14), (c_alpha_s ** 14) * (s_beta_s ** 6), (c_alpha_s ** 12) * (s_beta_s ** 6), (s_alpha_s ** 8) * (c_beta_s ** 6), (c_alpha_s ** 2) * (s_beta_s ** 8), (c_harmonics_alpha[6] * c_harmonics_beta[14]), (c_alpha_s ** 6) * (c_beta_s ** 12), (c_alpha_s ** 4) * (s_beta_s ** 10), (s_alpha_s ** 6) * (c_beta_s ** 14), (c_harmonics_alpha[12] * c_harmonics_beta[10]), (c_alpha_s ** 2) * (c_beta_s ** 6), (s_alpha_s ** 10) * (c_beta_s ** 10), (s_alpha_s ** 12) * (s_beta_s ** 6), (c_alpha_s ** 12) * (s_beta_s ** 12), (c_harmonics_alpha[8] * c_harmonics_beta[2]), (c_alpha_s ** 8) * (s_beta_s ** 4), (c_alpha_s ** 14) * (c_beta_s ** 14), (s_alpha_s ** 14) * (s_beta_s ** 8), (c_harmonics_alpha[10] * c_harmonics_beta[4]), (s_alpha_s ** 12) * (c_beta_s ** 6), (s_alpha_s ** 10) * (s_beta_s ** 12), (s_alpha_s ** 14) * (s_beta_s ** 10), (s_alpha_s ** 8) * (c_beta_s ** 10), (c_alpha_s ** 2) * (s_beta_s ** 12), (s_alpha_s ** 8) * (s_beta_s ** 12), (c_alpha_s ** 6) * (s_beta_s ** 12), (c_alpha_s ** 12) * (s_beta_s ** 2), (s_alpha_s ** 10) * (c_beta_s ** 12), (s_alpha_s ** 10) * (c_beta_s ** 8), (c_alpha_s ** 10) * (c_beta_s ** 14), (s_alpha_s ** 14) * (s_beta_s ** 14), (c_harmonics_alpha[8] * c_harmonics_beta[10]), (c_alpha_s ** 10) * (c_beta_s ** 8), (c_harmonics_alpha[14] * c_harmonics_beta[4]), (c_alpha_s ** 12) * (c_beta_s ** 6), (c_alpha_s ** 6) * (c_beta_s ** 2), (s_alpha_s ** 14) * (s_beta_s ** 4), (c_alpha_s ** 8) * (c_beta_s ** 14), (c_harmonics_alpha[2] * c_harmonics_beta[14]), (c_alpha_s ** 8) * (s_beta_s ** 2), (s_alpha_s ** 6) * (c_beta_s ** 12), (s_alpha_s ** 8) * (c_beta_s ** 12), (s_alpha_s ** 14) * (c_beta_s ** 8), (c_alpha_s ** 4) * (s_beta_s ** 8), (s_alpha_s ** 6) * (c_beta_s ** 10), (s_alpha_s ** 10) * (s_beta_s ** 8), (c_harmonics_alpha[12] * c_harmonics_beta[6]), (s_alpha_s ** 12) * (c_beta_s ** 10), (c_harmonics_alpha[12] * c_harmonics_beta[4]), (s_alpha_s ** 14) * (s_beta_s ** 2), (c_alpha_s ** 12) * (c_beta_s ** 10), (c_harmonics_alpha[2] * c_harmonics_beta[12]), (c_alpha_s ** 4) * (s_beta_s ** 12), (c_harmonics_alpha[2] * c_harmonics_beta[10]), (s_alpha_s ** 14) * (c_beta_s ** 14), (s_alpha_s ** 8) * (c_beta_s ** 8), (c_alpha_s ** 10) * (c_beta_s ** 12), (s_alpha_s ** 10) * (c_beta_s ** 6), (s_alpha_s ** 12) * (c_beta_s ** 12), (s_alpha_s ** 12) * (s_beta_s ** 12), (s_alpha_s ** 10) * (c_beta_s ** 14), (c_alpha_s ** 8) * (c_beta_s ** 8), (c_harmonics_alpha[14] * c_harmonics_beta[14]), (s_alpha_s ** 8) * (s_beta_s ** 8), (c_alpha_s ** 14) * (s_beta_s ** 12), (c_alpha_s ** 6) * (c_beta_s ** 14), (c_alpha_s ** 6) * (s_beta_s ** 6), (s_alpha_s ** 10) * (s_beta_s ** 10), (s_alpha_s ** 4) * (s_beta_s ** 4), (s_alpha_s ** 14) * (s_beta_s ** 6), (c_alpha_s ** 12) * (c_beta_s ** 8), (c_alpha_s ** 10) * (c_beta_s ** 10), (c_alpha_s ** 10) * (s_beta_s ** 14), (c_harmonics_alpha[4] * c_harmonics_beta[14]), (s_alpha_s ** 14) * (s_beta_s ** 12), (c_alpha_s ** 12) * (c_beta_s ** 12), (c_alpha_s ** 12) * (s_beta_s ** 14), (s_alpha_s ** 12) * (c_beta_s ** 8), (c_harmonics_alpha[12] * c_harmonics_beta[8]), (s_alpha_s ** 14) * (c_beta_s ** 12), (s_alpha_s ** 12) * (s_beta_s ** 10), (c_harmonics_alpha[10] * c_harmonics_beta[6]), (s_alpha_s ** 6) * (s_beta_s ** 6), (s_alpha_s ** 14) * (c_beta_s ** 10), (c_harmonics_alpha[6] * c_harmonics_beta[12]), (c_alpha_s ** 14) * (s_beta_s ** 10), (c_alpha_s ** 12) * (c_beta_s ** 14), (c_alpha_s ** 8) * (c_beta_s ** 12), (c_alpha_s ** 13) * (c_beta_s ** 2), (c_alpha_s ** 13) * (s_beta_s ** 2), (s_alpha_s ** 6) * (s_beta_s ** 12), (c_alpha_s ** 9) * (c_beta_s ** 2), (c_alpha_s ** 9) * (s_beta_s ** 2), (s_alpha_s ** 8) * (c_beta_s ** 14), (c_alpha_s ** 5) * (c_beta_s ** 2), (c_alpha_s ** 5) * (s_beta_s ** 2), (c_alpha_s ** 8) * (c_beta_s ** 10), (c_alpha_s ** 13) * (c_beta_s ** 4), (c_alpha_s ** 13) * (s_beta_s ** 4), (c_alpha_s ** 9) * (c_beta_s ** 4), (c_alpha_s ** 9) * (s_beta_s ** 4), (c_alpha_s ** 5) * (c_beta_s ** 4), (c_alpha_s ** 13) * (c_beta_s ** 6), (c_alpha_s ** 14) * (s_beta_s ** 8), (c_alpha_s ** 5) * (s_beta_s ** 4), (c_alpha_s ** 13) * (s_beta_s ** 6), (c_alpha_s ** 8) * (s_beta_s ** 14), (s_alpha_s ** 12) * (c_beta_s ** 14), (c_alpha_s ** 11) * (s_beta_s ** 2), (c_alpha_s ** 11) * (c_beta_s ** 2), (c_alpha_s ** 7) * (s_beta_s ** 2), (c_alpha_s ** 7) * (c_beta_s ** 2), (c_alpha_s ** 9) * (c_beta_s ** 6), (c_alpha_s ** 9) * (s_beta_s ** 6), (s_alpha_s ** 12) * (s_beta_s ** 8), (c_alpha_s ** 13) * (c_beta_s ** 8), (c_alpha_s ** 13) * (s_beta_s ** 8), (c_alpha_s ** 5) * (c_beta_s ** 6), (c_alpha_s ** 5) * (s_beta_s ** 6), (c_alpha_s ** 9) * (c_beta_s ** 8), (c_alpha_s ** 9) * (s_beta_s ** 8), (c_alpha_s ** 13) * (c_beta_s ** 10), (c_alpha_s ** 13) * (s_beta_s ** 10), (c_harmonics_alpha[10] * c_harmonics_beta[14]), (c_alpha_s ** 12) * (s_beta_s ** 4), (c_alpha_s ** 9) * (c_beta_s ** 10), (c_alpha_s ** 5) * (c_beta_s ** 8), (c_alpha_s ** 9) * (s_beta_s ** 10), (c_alpha_s ** 13) * (c_beta_s ** 12), (c_alpha_s ** 5) * (s_beta_s ** 8), (c_alpha_s ** 11) * (s_beta_s ** 4), (c_alpha_s ** 13) * (s_beta_s ** 12), (c_alpha_s ** 11) * (c_beta_s ** 4), (c_harmonics_alpha[14] * c_harmonics_beta[6]), (c_alpha_s ** 7) * (s_beta_s ** 4), (c_alpha_s ** 7) * (c_beta_s ** 4), (s_alpha_s ** 8) * (s_beta_s ** 10), (c_alpha_s ** 9) * (c_beta_s ** 12), (c_alpha_s ** 13) * (c_beta_s ** 14), (c_alpha_s ** 9) * (s_beta_s ** 12), (c_alpha_s ** 13) * (s_beta_s ** 14), (c_alpha_s ** 5) * (c_beta_s ** 10), (c_alpha_s ** 5) * (s_beta_s ** 10), ])


    coefficients_array = np.array([0.02570791258465483, -0.026814431312924207, 0.02435519954568041, -0.027328765475587984, 0.019820823790037512, -0.028680590324880968, 0.022489040536642885, -0.01307286783909484, 0.01238309959120589, -0.026778920057395097, -0.02518763730264942, 0.011291522570627821, 0.020082757929447855, 0.01848175335201282, -0.010833301584514603, -0.022637062508682006, -0.012616215970469316, 0.01605299450354674, -0.018467761047864923, -0.006977465635369602, -0.010416263458731216, -0.006793455879700179, -0.014765211622605601, 0.009212723103030975, -0.009028193754195427, -0.015815596528278776, 0.012694611841149417, -0.014044251433752828, 0.005605483370074817, 0.00781834380707011, 0.010721915525403405, 0.011512114279743036, 0.012791461727291356, -0.009716121971363297, 0.008401427955590214, 0.012165657294567245, -0.008610668097255136, -0.009119568695544472, 0.004325390781214089, 0.008571191295504233, 0.0034380058424926326, -0.008459274308143442, -0.010076155675421503, 0.007051979696196932, 0.009068441578366813, 0.009508637841384164, -0.006814247711364877, 0.006079665276996349, -0.008863818512591545, 0.0022840568248668593, -0.0022867311467645026, -0.008886941858615742, 0.009920631067944228, -0.009068422472123772, 0.007881159811247197, 0.008716334746622484, 0.007373605238014851, -0.008680760685591739, 0.007917100639779606, -0.008025147065668084, -0.007748974274048336, 0.006546229700890598, -0.008200980657870487, -0.0018267642476624633, -0.005984110864415856, -0.009304637968375067, -0.006358970548143166, 0.00908099098364591, -0.005116432170051866, 0.0037678292874709766, -0.009199820925221125, 0.008574959929079914, -0.009859407825660974, -0.006329709858664085, -0.009392993503926726, -0.007681262749245839, 0.003931910042925812, 0.006965708722164145, -0.009880008628344254, 0.005092805563990826, -0.001429506986803776, 0.0013995917228665539, 0.004859880161947699, 0.006675918292558458, -0.00492439425196295, -0.0070872685731150015, 0.0024492109874678, -0.005838967423996625, 0.004652870242769668, -0.00593949153266314, -0.005881961365881218, 0.008691478223728621, 0.004078792459826463, -0.005622081195149092, 0.0011374281093792173, 0.0011402100511730324, 0.0018661590132832704, 0.001128642658904997, 0.0011278069874443358, -0.005895038747849332, -0.0036085142922586363, -0.003861444561918989, -0.0056449791520895845, -0.005150112885345392, 0.008556145349839363, -0.0034966472719001186, 0.007120272242105488, 0.00647652107501764, 0.005509452836597803, -0.0010258510823893644, 0.001009495137368828, -0.004698396202539463, 0.004874068332286081, -0.0010032929629405236, -0.0010006102640285454, 0.0010014465082041906, -0.002641659443017634, -0.006437126782084731, -0.002110655251880583, -0.002141128170455901, 0.004851939780311564, 0.00729050518156453, -0.0009516658455353576, -0.005855765182103051, -0.000928665011126465, 0.0009250015043082798, -0.006760323635342428, -0.0016871275068708078, -0.0067182021509621355, -0.006056224473854972, 0.004832434328198806, -0.0009013175015868653, 0.0054017735154745184, -0.003255604028717419, -0.0038908744139485576, 0.004549199308941022, -0.0008752363946021312, -0.0041094465566191415, -0.0038300006642314754, -0.0007945606324111866, -0.0037453137234233053, 0.003945736371155048, 0.000778498620303754, 0.003568711790811952, -0.0026565141568973332, -0.003656763623397388, 0.00646254192424784, -0.0039654131026364975, 0.0007335678889902657, 0.00608588646734322, -0.0007312985049025564, 0.002763180610834596, -0.0035095874860104834, 0.002031202294481869, -0.0024197512391262964, 0.004352237933567581, -0.0022993912040776086, -0.0006786455402075133, -0.0006300747747298252, -0.0006311908968690241, 0.005700188454999623, 0.0038086243927040945, -0.0035183372531244115, -0.002908418031624019, -0.0018055953618976125, 0.0005960818299235432, 0.0033013242635369544, -0.002578059230395618, -0.003502752046263975, 0.0005662266539381512, 0.0014266279343289419, 0.0036740877902183586, 0.003021090379255922, -0.0040541342532682545, 0.0004987608917278124, -0.001896656733250006, 0.004219411021999708, -0.0033617151701135113, 0.000462219733443236, -0.0026649402296060123, 0.003403358543518391, -0.0035847932612740638, 0.002683934661553589, 0.0015684765199027715, 0.00289884274731684, -0.0024780498120643736, 0.0015327745374420956, 0.0030386966283203966, 0.0024226431115800737, -0.003062793538128459, 0.0035262272503062244, -0.0003621710738364722, -0.002124068956431528, -0.0003583505040363868, -0.0019641995707724356, 0.0008888711559793389, 0.0018194796321247513, -0.00233260561501116, -0.0003351489874652441, -0.0009619301700902266, -0.0018556280419686694, 0.0020804977967708955, -0.0022333770288330604, -0.001220074335063382, -0.0015266885403201844, 0.0017724020946931044, -0.0002870873186852398, 0.0020712515776464295, 0.00027515317654716354, 0.0010479619231230368, 0.00172674982208534, 0.00024283773223896554, 0.0011673169266787997, 0.00022451141183477146, -0.00202099860934447, 0.0011596775845899737, -0.0014927305695369708, -0.001071179397190604, 0.0016056095582304088, 0.0016372039492568832, 0.0014427739662142482, -0.0009803730578238567, -0.0001733488091393216, 0.0008863026094564986, 0.001339819203927016, 0.0009497814273802327, -0.0006193510029444192, 0.0009518566697313049, 0.00040944662464353996, -0.0008578754504237426, 0.000860437277873672, -0.0008695685478378404, -0.0010423669485915186, 0.00013166767143855048, -0.0011408835283505832, 0.0009421671914440875, 0.0010340907187837626, 0.0007663960447435004, 0.00011291451235363766, -0.0009241133262271386, -0.0007394987661413517, 9.67026866989655e-05, 0.0003980014826995193, -0.0007182351409250827, 9.118695810893631e-05, -0.0006697859240745368, -0.0006648952959964834, -0.0005107978397275056, -0.0002839036930671265, -0.0002819837866112776, -0.0004125564773499081, 0.00020042867818379002, 0.0002020043725584986, 0.00038932656376804864, -0.00012868504237952653, -0.00012757218179804545, 0.0002804081840047891, -0.00021231176552764772, -0.0002103918578129506, 0.00015094116494202906, 0.0001525168608256301, -9.590037720637074e-05, -0.00017627392315936938, 0.0002109538488731578, -9.478751582881189e-05, -0.00017483777314670386, 0.00019435527744101206, 0.0002334771962807348, 9.270628174214727e-05, 9.094689482594759e-05, 7.274615597434165e-05, 7.138334056587916e-05, 0.00012642755905864516, 0.00012754295419229394, -0.00015954222275800167, -0.00015370411472342483, -0.00015275172008928585, -7.929416510658435e-05, -7.860906273084109e-05, 0.00011115043636582485, 0.00011180552858913301, -0.0001378986919898055, -0.0001373693116392064, 1.730053452124432e-05, 7.984213952264485e-05, 0.00010046270821041111, -6.887404386540989e-05, 0.00010071519638819335, -0.0001260486599696268, -6.861670370345278e-05, 7.058860230791646e-05, -0.0001258815552445553, 6.882921469624566e-05, 1.5112619477720516e-05, 5.5517961860933916e-05, 5.415514685111116e-05, 8.917921685760047e-05, 9.244306041014283e-05, -0.000116745196899569, 9.235064138271023e-05, -0.00011688828025392296, -6.157368001489329e-05, -6.16906732335556e-05, ])


    return np.dot(coefficients_array, expressions_array)

@jit(nopython=True, cache=True)
def A_coefficients_truncated_shadow_False_single_ideal_optical_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([1, (s_alpha_s ** 4), (s_alpha_s ** 2), (s_alpha_s ** 6), (c_harmonics_alpha[2] * c_harmonics_beta[4]), (s_beta_s ** 2), (s_alpha_s ** 8), (c_harmonics_alpha[4] * c_harmonics_beta[2]), (s_alpha_s ** 2) * (s_beta_s ** 2), (c_alpha_s ** 2) * (c_beta_s ** 2), (s_beta_s ** 4), (s_alpha_s ** 4) * (s_beta_s ** 2), (s_alpha_s ** 6) * (s_beta_s ** 2), (c_harmonics_alpha[6] * c_harmonics_beta[2]), (c_harmonics_alpha[2] * c_harmonics_beta[2]), (c_alpha_s ** 2) * (c_beta_s ** 4), (s_alpha_s ** 2) * (s_beta_s ** 4), (s_alpha_s ** 12), (s_alpha_s ** 4) * (s_beta_s ** 4), (s_alpha_s ** 8) * (s_beta_s ** 2), (s_alpha_s ** 14), (s_alpha_s ** 6) * (c_beta_s ** 2), (s_alpha_s ** 6) * (s_beta_s ** 4), (c_alpha_s ** 4) * (c_beta_s ** 2), (s_alpha_s ** 4) * (c_beta_s ** 2), (c_alpha_s ** 2) * (c_beta_s ** 6), (c_harmonics_alpha[2] * c_harmonics_beta[6]), (c_alpha_s ** 10) * (c_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 2), (c_alpha_s ** 10) * (s_beta_s ** 2), (s_alpha_s ** 2) * (s_beta_s ** 6), (c_harmonics_alpha[4] * c_harmonics_beta[4]), (s_beta_s ** 6), (s_alpha_s ** 4) * (s_beta_s ** 6), (c_alpha_s ** 12) * (c_beta_s ** 2), (s_alpha_s ** 8) * (s_beta_s ** 4), (c_alpha_s ** 4) * (c_beta_s ** 4), (c_harmonics_alpha[6] * c_harmonics_beta[4]), (c_alpha_s ** 8) * (c_beta_s ** 2), (s_alpha_s ** 8) * (c_beta_s ** 2), (s_alpha_s ** 6) * (s_beta_s ** 6), (c_alpha_s ** 12) * (s_beta_s ** 2), (s_alpha_s ** 12) * (c_beta_s ** 2), (c_alpha_s ** 2) * (c_beta_s ** 8), (c_alpha_s ** 10) * (c_beta_s ** 4), (s_alpha_s ** 2) * (c_beta_s ** 4), (s_beta_s ** 14), (c_alpha_s ** 6) * (c_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 8), (s_alpha_s ** 14) * (c_beta_s ** 2), (s_alpha_s ** 12) * (c_beta_s ** 4), (c_alpha_s ** 8) * (s_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 6), (s_alpha_s ** 2) * (c_beta_s ** 6), (s_alpha_s ** 10), (c_alpha_s ** 4) * (s_beta_s ** 2), (c_alpha_s ** 10) * (s_beta_s ** 4), (s_alpha_s ** 4) * (s_beta_s ** 8), (c_harmonics_alpha[4] * c_harmonics_beta[6]), (c_alpha_s ** 2) * (s_beta_s ** 10), (c_alpha_s ** 14) * (s_beta_s ** 2), (c_harmonics_alpha[8] * c_harmonics_beta[4]), (s_alpha_s ** 6) * (c_beta_s ** 4), (s_alpha_s ** 2) * (s_beta_s ** 8), (s_alpha_s ** 14) * (c_beta_s ** 4), (c_alpha_s ** 12) * (c_beta_s ** 4), (c_alpha_s ** 8) * (c_beta_s ** 4), (s_alpha_s ** 6) * (s_beta_s ** 8), (c_alpha_s ** 2) * (s_beta_s ** 4), (c_alpha_s ** 4) * (c_beta_s ** 6), (s_alpha_s ** 10) * (s_beta_s ** 2), (s_alpha_s ** 8) * (s_beta_s ** 6), (s_alpha_s ** 12) * (c_beta_s ** 6), (c_harmonics_alpha[14] * c_harmonics_beta[4]), (c_alpha_s ** 10) * (s_beta_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 2), (s_alpha_s ** 2) * (s_beta_s ** 14), (c_alpha_s ** 10) * (c_beta_s ** 6), (s_beta_s ** 10), (c_alpha_s ** 12) * (s_beta_s ** 4), (c_harmonics_alpha[12] * c_harmonics_beta[2]), (s_alpha_s ** 4) * (s_beta_s ** 10), (c_alpha_s ** 6) * (c_beta_s ** 4), (s_alpha_s ** 4) * (s_beta_s ** 14), (c_alpha_s ** 10) * (s_beta_s ** 8), (s_alpha_s ** 14) * (c_beta_s ** 6), (c_harmonics_alpha[10] * c_harmonics_beta[4]), (s_alpha_s ** 2) * (c_beta_s ** 2), (s_alpha_s ** 6) * (s_beta_s ** 10), (s_alpha_s ** 4) * (s_beta_s ** 12), (s_alpha_s ** 10) * (c_beta_s ** 4), (c_alpha_s ** 14) * (s_beta_s ** 4), (c_alpha_s ** 2) * (c_beta_s ** 10), (c_alpha_s ** 2) * (s_beta_s ** 12), (c_alpha_s ** 12) * (s_beta_s ** 6), (s_alpha_s ** 2) * (s_beta_s ** 12), (s_alpha_s ** 6) * (s_beta_s ** 14), (s_alpha_s ** 2) * (s_beta_s ** 10), (s_alpha_s ** 12) * (c_beta_s ** 8), (s_alpha_s ** 6) * (s_beta_s ** 12), (c_alpha_s ** 4) * (s_beta_s ** 8), (s_alpha_s ** 6) * (c_beta_s ** 6), (s_alpha_s ** 6) * (c_beta_s ** 10), (s_alpha_s ** 6) * (c_beta_s ** 8), (c_alpha_s ** 10) * (s_beta_s ** 10), (c_alpha_s ** 8) * (s_beta_s ** 4), (s_alpha_s ** 12) * (s_beta_s ** 8), (c_alpha_s ** 4) * (s_beta_s ** 6), (c_alpha_s ** 12) * (c_beta_s ** 6), (s_alpha_s ** 6) * (c_beta_s ** 12), (c_harmonics_alpha[8] * c_harmonics_beta[2]), (c_alpha_s ** 12) * (s_beta_s ** 8), (c_harmonics_alpha[6] * c_harmonics_beta[6]), (s_alpha_s ** 4) * (c_beta_s ** 4), (s_alpha_s ** 12) * (s_beta_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 10), (s_alpha_s ** 2) * (c_beta_s ** 8), (c_alpha_s ** 8) * (s_beta_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 4), (s_alpha_s ** 10) * (c_beta_s ** 6), (s_alpha_s ** 12) * (s_beta_s ** 10), (s_alpha_s ** 14) * (c_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 12), (s_beta_s ** 8), (c_alpha_s ** 8) * (c_beta_s ** 6), (c_alpha_s ** 8) * (s_beta_s ** 8), (s_alpha_s ** 12) * (s_beta_s ** 2), (s_alpha_s ** 14) * (s_beta_s ** 8), (c_alpha_s ** 4) * (s_beta_s ** 10), (c_alpha_s ** 14) * (c_beta_s ** 6), (s_alpha_s ** 8) * (s_beta_s ** 8), (c_alpha_s ** 5) * (c_beta_s ** 2), (c_alpha_s ** 5) * (s_beta_s ** 2), (s_alpha_s ** 4) * (c_beta_s ** 10), (s_alpha_s ** 14) * (s_beta_s ** 6), (s_alpha_s ** 4) * (c_beta_s ** 12), (s_alpha_s ** 8) * (c_beta_s ** 4), (s_alpha_s ** 12) * (c_beta_s ** 10), (c_alpha_s ** 4) * (s_beta_s ** 4), (s_alpha_s ** 14) * (s_beta_s ** 10), (c_harmonics_alpha[10] * c_harmonics_beta[6]), (c_alpha_s ** 14) * (c_beta_s ** 14), (s_alpha_s ** 12) * (s_beta_s ** 4), (c_alpha_s ** 9) * (c_beta_s ** 2), (c_alpha_s ** 12) * (s_beta_s ** 10), (s_alpha_s ** 6) * (c_beta_s ** 14), (c_alpha_s ** 10) * (s_beta_s ** 12), (c_alpha_s ** 9) * (s_beta_s ** 2), (c_alpha_s ** 13) * (c_beta_s ** 2), (c_alpha_s ** 10) * (c_beta_s ** 8), (c_alpha_s ** 13) * (s_beta_s ** 2), (s_alpha_s ** 12) * (s_beta_s ** 12), (s_alpha_s ** 14) * (s_beta_s ** 2), (c_harmonics_alpha[8] * c_harmonics_beta[6]), (s_alpha_s ** 10) * (c_beta_s ** 2), (c_alpha_s ** 8) * (s_beta_s ** 10), (c_alpha_s ** 6) * (s_beta_s ** 2), (c_alpha_s ** 14) * (s_beta_s ** 6), (s_alpha_s ** 14) * (s_beta_s ** 4), (c_harmonics_alpha[4] * c_harmonics_beta[8]), (s_alpha_s ** 4) * (c_beta_s ** 8), (c_alpha_s ** 6) * (c_beta_s ** 12), (s_alpha_s ** 14) * (s_beta_s ** 12), (s_alpha_s ** 10) * (s_beta_s ** 4), (s_alpha_s ** 14) * (c_beta_s ** 10), (s_alpha_s ** 12) * (c_beta_s ** 12), (s_alpha_s ** 4) * (c_beta_s ** 14), (s_alpha_s ** 12) * (c_beta_s ** 14), (s_alpha_s ** 8) * (s_beta_s ** 14), (c_harmonics_alpha[10] * c_harmonics_beta[2]), (s_alpha_s ** 8) * (s_beta_s ** 10), (s_alpha_s ** 10) * (c_beta_s ** 8), (s_alpha_s ** 8) * (c_beta_s ** 10), (c_alpha_s ** 6) * (c_beta_s ** 14), (c_alpha_s ** 4) * (c_beta_s ** 8), (s_alpha_s ** 12) * (s_beta_s ** 14), (c_alpha_s ** 12) * (s_beta_s ** 12), (c_alpha_s ** 2) * (c_beta_s ** 12), (s_alpha_s ** 8) * (c_beta_s ** 12), (c_alpha_s ** 6) * (c_beta_s ** 10), ])


    coefficients_array = np.array([0.4383153469728792, 0.018984110931580048, 0.013399128256064517, 0.020593053135405524, 0.014186836010409444, 0.009041024206112483, 0.014237409530028526, 0.008345002331880217, 0.012379213647945959, -0.01006093882114649, 0.00681599570306355, 0.0135200143216369, 0.013352568281931773, -0.004712045034638043, 0.004636549653677524, -0.00861188479162585, 0.008705131112032695, -0.006562585032515809, 0.009454720705673842, 0.009547031759631102, -0.0057557458351630494, 0.0072404848490094965, 0.009301226876310298, -0.005616756808296809, 0.005464096628147246, -0.006295974487980969, -0.002383736555068881, -0.007308861815780349, -0.0033381894396140085, -0.006293400068941199, 0.005057322614373913, 0.0018421244103330005, 0.002301330937005202, 0.006072924962246929, -0.0057550356128335855, 0.0064467737035650485, -0.004558913855215708, -0.0015863738312344687, -0.004607664515680859, 0.004690377769763844, 0.006168201436046174, -0.004966052765872922, -0.004964315569450754, -0.00373974258318761, -0.005389840967969703, -0.002654167920947558, 0.0023198542867143663, -0.0029489630061551764, -0.0033825263356317323, -0.004325812879021906, -0.005251489467175133, -0.0032189858433153765, -0.002755991676951151, -0.0026804419619398155, 0.0017042463555689293, -0.0021973887683664193, -0.004374379220772191, 0.003931973578150882, -0.0009604644180341951, -0.003076297978857912, 0.0035476188191979124, 0.0009244944081568963, 0.0031891434423601574, 0.0027202163668006993, -0.004637691598475215, -0.004192495587471257, -0.0034230169875807026, 0.004198020132357162, -0.0018891354084769893, -0.0029002273866649848, 0.0028479751839963876, 0.003942226075108183, -0.004627129186967497, -0.000788589600265562, -0.004105681690518815, 0.002905763766724696, 0.0029343075193640697, -0.0037395176511110986, -0.001193210222188019, -0.0034035127410339486, 0.0006981792949459503, 0.0030441103550028566, -0.0022962833432133628, 0.0035044797979009363, -0.003964751976640117, -0.004087638247655464, 0.0006314294644634211, 0.001019914613079868, 0.003334456379913144, 0.0029970254991223207, -0.0025581778227362914, 0.0029630102957212087, -0.001875952076506793, -0.002079425142751922, -0.0032489365545877065, 0.0020694956580018637, 0.0035626657702255418, 0.0018830877580485626, -0.003654950644462253, 0.00320662756274971, -0.002170769124185907, 0.002270827472419105, 0.0028161103725994146, 0.0025153556351892423, -0.0035006381094643668, -0.0020343383152843764, -0.003360693455517915, -0.0017403893301201434, -0.0027845317460609923, 0.0028022090636122396, -0.0004896609347108208, -0.003175949036767103, -0.00048363701514721484, 0.0013988030172197702, -0.0027969775356243005, 0.0036112459889837867, -0.0013960137569553567, -0.0022209894186324105, 0.003196534847526389, 0.0023211552430708322, -0.0024178658523147135, -0.0033752446925793106, -0.0032058754745279863, 0.0037084835413367925, -0.0006623099704626224, -0.002051718353553199, -0.0023697157869934805, -0.0015982694565115497, -0.003133966397677556, -0.0019152753805287035, 0.002606365647911177, 0.0023736987093425244, 0.0010095192250761222, 0.001016844722579284, 0.0018177542921250362, -0.002603743745688976, 0.0019383033477247194, 0.0015901197160382715, -0.0028841185266344003, -0.0011395458168216885, -0.003150765547251989, 0.0003867317047522465, 0.003457677211739773, -0.0018854433587380992, -0.0011889504897943759, -0.0027898936643909523, 0.0023546369834783077, -0.002779190272962118, -0.001185245513762441, 0.0013842828265909054, -0.002216962150503261, 0.0013838466086461272, -0.003006248728650228, -0.0014299329501796635, -0.0003553389704436142, -0.001143728804896472, -0.002067773518421304, -0.0008891420594627578, 0.002093191368009334, -0.0017418116724297866, 0.00032548690168093504, 0.0012726516236405557, 0.00180882882805813, -0.0028097760694263158, 0.0014335261678073347, -0.002505826788996467, -0.002480250307286157, 0.0015082282066818046, -0.0024788045783655918, 0.0020878238453874366, 0.0002846136742182116, 0.0017309511196134189, -0.0016921698889852848, 0.001685269450610983, 0.0016764506816886902, -0.001071077202724898, -0.0023838644564108855, -0.0021583981666273224, -0.0009467215139663006, 0.0017383106841432668, 0.0013629223285536167, ])


    return np.dot(coefficients_array, expressions_array)
@jit(nopython=True, cache=True)
def B_coefficients_truncated_shadow_False_single_ideal_optical_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([(s_harmonics_alpha[2] * s_harmonics_beta[1]), (s_harmonics_alpha[4] * s_harmonics_beta[1]), (s_harmonics_alpha[2] * s_harmonics_beta[3]), (s_harmonics_alpha[10] * s_harmonics_beta[1]), (s_harmonics_alpha[8] * s_harmonics_beta[1]), (s_harmonics_alpha[2] * s_harmonics_beta[5]), (s_harmonics_alpha[6] * s_harmonics_beta[1]), (s_harmonics_alpha[4] * s_harmonics_beta[5]), (s_harmonics_alpha[12] * s_harmonics_beta[1]), (s_harmonics_alpha[4] * s_harmonics_beta[3]), (s_harmonics_alpha[8] * s_harmonics_beta[5]), (s_harmonics_alpha[6] * s_harmonics_beta[5]), (s_harmonics_alpha[2] * s_harmonics_beta[11]), (s_harmonics_alpha[10] * s_harmonics_beta[5]), (s_harmonics_alpha[10] * s_harmonics_beta[11]), (s_harmonics_alpha[10] * s_harmonics_beta[7]), (s_harmonics_alpha[10] * s_harmonics_beta[9]), (s_harmonics_alpha[6] * s_harmonics_beta[3]), (s_harmonics_alpha[2] * s_harmonics_beta[7]), (s_harmonics_alpha[4] * s_harmonics_beta[11]), (s_harmonics_alpha[8] * s_harmonics_beta[9]), (s_harmonics_alpha[2] * s_harmonics_beta[9]), (s_harmonics_alpha[14] * s_harmonics_beta[1]), (s_harmonics_alpha[10] * s_harmonics_beta[13]), (s_harmonics_alpha[4] * s_harmonics_beta[7]), (s_harmonics_alpha[8] * s_harmonics_beta[3]), (s_harmonics_alpha[8] * s_harmonics_beta[11]), (s_harmonics_alpha[8] * s_harmonics_beta[7]), (s_harmonics_alpha[12] * s_harmonics_beta[3]), (s_harmonics_alpha[10] * s_harmonics_beta[3]), (s_harmonics_alpha[12] * s_harmonics_beta[7]), (s_harmonics_alpha[12] * s_harmonics_beta[9]), (s_harmonics_alpha[2] * s_harmonics_beta[13]), (s_harmonics_alpha[12] * s_harmonics_beta[13]), (s_harmonics_alpha[6] * s_harmonics_beta[11]), (s_harmonics_alpha[10] * s_harmonics_beta[15]), (s_harmonics_alpha[4] * s_harmonics_beta[9]), (s_harmonics_alpha[12] * s_harmonics_beta[11]), (s_harmonics_alpha[12] * s_harmonics_beta[15]), (s_harmonics_alpha[2] * s_harmonics_beta[15]), (s_harmonics_alpha[4] * s_harmonics_beta[13]), (s_harmonics_alpha[6] * s_harmonics_beta[9]), (s_harmonics_alpha[12] * s_harmonics_beta[5]), (s_harmonics_alpha[8] * s_harmonics_beta[13]), (s_harmonics_alpha[6] * s_harmonics_beta[7]), (s_harmonics_alpha[14] * s_harmonics_beta[3]), (s_harmonics_alpha[13] * s_harmonics_beta[9]), (s_harmonics_alpha[11] * s_harmonics_beta[15]), (s_harmonics_alpha[5] * s_harmonics_beta[11]), (s_harmonics_alpha[4] * s_harmonics_beta[15]), (s_harmonics_alpha[8] * s_harmonics_beta[15]), (s_harmonics_alpha[6] * s_harmonics_beta[13]), (s_harmonics_alpha[5] * s_harmonics_beta[3]), (s_harmonics_alpha[7] * s_harmonics_beta[13]), (s_harmonics_alpha[14] * s_harmonics_beta[9]), (s_harmonics_alpha[9] * s_harmonics_beta[11]), ])


    coefficients_array = np.array([-0.2340494221473139, 0.00886510288020755, -0.006414052509546367, -0.00606804980031541, 0.005841843483143711, 0.004172223028064242, -0.0036388568970104444, -0.0029230112420959424, 0.0028350430274502974, 0.0027277904662436174, -0.0022903800951234064, 0.0014249852782688324, -0.001416294788477346, 0.001412438770711789, -0.0012299019914317258, -0.0011887013117654092, 0.0011866165705988095, -0.0011215969148292992, -0.001108662453871988, 0.0010539911646412577, -0.0009505995979333425, 0.0009138942333064622, -0.0007941532022071298, 0.0007773080581713163, 0.0007613539981029129, 0.0006949991515462477, 0.0006831070574252812, 0.0006548392715061962, -0.000638770368590961, 0.00060403003245903, 0.0005667616914714116, -0.0005452808892015761, 0.00048712036490700973, -0.0004674984809538418, -0.00046163394320972894, -0.0004621510126964035, -0.00044524470792930174, 0.00042192546930478104, 0.0004022829245298196, -0.00034890378560290864, -0.0003367707321458067, 0.000337169046614432, -0.00030449322038155987, -0.00027008825814929917, -0.0002625885552443415, 0.00022529901426313238, 0.00020600203725081896, 0.00020595912881839275, 0.0001995041195592141, 0.00020150847153881321, 0.00020104350788096567, 0.00018543216258512394, -0.00018273319763774647, 0.0001695013854867084, -0.0001619050845082554, 0.0001591750671304192, ])


    return np.dot(coefficients_array, expressions_array)
@jit(nopython=True, cache=True)
def C_coefficients_truncated_shadow_False_single_ideal_optical_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([1, (s_alpha_s ** 4), (s_alpha_s ** 2), (s_alpha_s ** 6), (c_harmonics_alpha[2] * c_harmonics_beta[4]), (s_beta_s ** 2), (s_alpha_s ** 8), (c_harmonics_alpha[4] * c_harmonics_beta[2]), (s_alpha_s ** 2) * (s_beta_s ** 2), (c_alpha_s ** 2) * (c_beta_s ** 2), (s_beta_s ** 4), (s_alpha_s ** 4) * (s_beta_s ** 2), (s_alpha_s ** 6) * (s_beta_s ** 2), (c_harmonics_alpha[6] * c_harmonics_beta[2]), (c_harmonics_alpha[2] * c_harmonics_beta[2]), (c_alpha_s ** 2) * (c_beta_s ** 4), (s_alpha_s ** 2) * (s_beta_s ** 4), (s_alpha_s ** 12), (s_alpha_s ** 4) * (s_beta_s ** 4), (s_alpha_s ** 8) * (s_beta_s ** 2), (s_alpha_s ** 14), (s_alpha_s ** 6) * (c_beta_s ** 2), (s_alpha_s ** 6) * (s_beta_s ** 4), (c_alpha_s ** 4) * (c_beta_s ** 2), (s_alpha_s ** 4) * (c_beta_s ** 2), (c_alpha_s ** 2) * (c_beta_s ** 6), (c_harmonics_alpha[2] * c_harmonics_beta[6]), (c_alpha_s ** 10) * (c_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 2), (c_alpha_s ** 10) * (s_beta_s ** 2), (s_alpha_s ** 2) * (s_beta_s ** 6), (c_harmonics_alpha[4] * c_harmonics_beta[4]), (s_beta_s ** 6), (s_alpha_s ** 4) * (s_beta_s ** 6), (c_alpha_s ** 12) * (c_beta_s ** 2), (s_alpha_s ** 8) * (s_beta_s ** 4), (c_alpha_s ** 4) * (c_beta_s ** 4), (c_harmonics_alpha[6] * c_harmonics_beta[4]), (c_alpha_s ** 8) * (c_beta_s ** 2), (s_alpha_s ** 8) * (c_beta_s ** 2), (s_alpha_s ** 6) * (s_beta_s ** 6), (c_alpha_s ** 12) * (s_beta_s ** 2), (s_alpha_s ** 12) * (c_beta_s ** 2), (c_alpha_s ** 2) * (c_beta_s ** 8), (c_alpha_s ** 10) * (c_beta_s ** 4), (s_alpha_s ** 2) * (c_beta_s ** 4), (s_beta_s ** 14), (c_alpha_s ** 6) * (c_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 8), (s_alpha_s ** 14) * (c_beta_s ** 2), (s_alpha_s ** 12) * (c_beta_s ** 4), (c_alpha_s ** 8) * (s_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 6), (s_alpha_s ** 2) * (c_beta_s ** 6), (s_alpha_s ** 10), (c_alpha_s ** 4) * (s_beta_s ** 2), (c_alpha_s ** 10) * (s_beta_s ** 4), (s_alpha_s ** 4) * (s_beta_s ** 8), (c_harmonics_alpha[4] * c_harmonics_beta[6]), (c_alpha_s ** 2) * (s_beta_s ** 10), (c_alpha_s ** 14) * (s_beta_s ** 2), (c_harmonics_alpha[8] * c_harmonics_beta[4]), (s_alpha_s ** 6) * (c_beta_s ** 4), (s_alpha_s ** 2) * (s_beta_s ** 8), (s_alpha_s ** 14) * (c_beta_s ** 4), (c_alpha_s ** 12) * (c_beta_s ** 4), (c_alpha_s ** 8) * (c_beta_s ** 4), (s_alpha_s ** 6) * (s_beta_s ** 8), (c_alpha_s ** 2) * (s_beta_s ** 4), (c_alpha_s ** 4) * (c_beta_s ** 6), (s_alpha_s ** 10) * (s_beta_s ** 2), (s_alpha_s ** 8) * (s_beta_s ** 6), (s_alpha_s ** 12) * (c_beta_s ** 6), (c_harmonics_alpha[14] * c_harmonics_beta[4]), (c_alpha_s ** 10) * (s_beta_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 2), (s_alpha_s ** 2) * (s_beta_s ** 14), (c_alpha_s ** 10) * (c_beta_s ** 6), (s_beta_s ** 10), (c_alpha_s ** 12) * (s_beta_s ** 4), (c_harmonics_alpha[12] * c_harmonics_beta[2]), (s_alpha_s ** 4) * (s_beta_s ** 10), (c_alpha_s ** 6) * (c_beta_s ** 4), (s_alpha_s ** 4) * (s_beta_s ** 14), (c_alpha_s ** 10) * (s_beta_s ** 8), (s_alpha_s ** 14) * (c_beta_s ** 6), (c_harmonics_alpha[10] * c_harmonics_beta[4]), (s_alpha_s ** 2) * (c_beta_s ** 2), (s_alpha_s ** 6) * (s_beta_s ** 10), (s_alpha_s ** 4) * (s_beta_s ** 12), (s_alpha_s ** 10) * (c_beta_s ** 4), (c_alpha_s ** 14) * (s_beta_s ** 4), (c_alpha_s ** 2) * (c_beta_s ** 10), (c_alpha_s ** 2) * (s_beta_s ** 12), (c_alpha_s ** 12) * (s_beta_s ** 6), (s_alpha_s ** 2) * (s_beta_s ** 12), (s_alpha_s ** 6) * (s_beta_s ** 14), (s_alpha_s ** 2) * (s_beta_s ** 10), (s_alpha_s ** 12) * (c_beta_s ** 8), (s_alpha_s ** 6) * (s_beta_s ** 12), (c_alpha_s ** 4) * (s_beta_s ** 8), (s_alpha_s ** 6) * (c_beta_s ** 6), (s_alpha_s ** 6) * (c_beta_s ** 10), (s_alpha_s ** 6) * (c_beta_s ** 8), (c_alpha_s ** 10) * (s_beta_s ** 10), (c_alpha_s ** 8) * (s_beta_s ** 4), (s_alpha_s ** 12) * (s_beta_s ** 8), (c_alpha_s ** 4) * (s_beta_s ** 6), (c_alpha_s ** 12) * (c_beta_s ** 6), (s_alpha_s ** 6) * (c_beta_s ** 12), (c_harmonics_alpha[8] * c_harmonics_beta[2]), (c_alpha_s ** 12) * (s_beta_s ** 8), (c_harmonics_alpha[6] * c_harmonics_beta[6]), (s_alpha_s ** 4) * (c_beta_s ** 4), (s_alpha_s ** 12) * (s_beta_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 10), (s_alpha_s ** 2) * (c_beta_s ** 8), (c_alpha_s ** 8) * (s_beta_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 4), (s_alpha_s ** 10) * (c_beta_s ** 6), (s_alpha_s ** 12) * (s_beta_s ** 10), (s_alpha_s ** 14) * (c_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 12), (s_beta_s ** 8), (c_alpha_s ** 8) * (c_beta_s ** 6), (c_alpha_s ** 8) * (s_beta_s ** 8), (s_alpha_s ** 12) * (s_beta_s ** 2), (s_alpha_s ** 14) * (s_beta_s ** 8), (c_alpha_s ** 4) * (s_beta_s ** 10), (c_alpha_s ** 14) * (c_beta_s ** 6), (s_alpha_s ** 8) * (s_beta_s ** 8), (c_alpha_s ** 5) * (c_beta_s ** 2), (c_alpha_s ** 5) * (s_beta_s ** 2), (s_alpha_s ** 4) * (c_beta_s ** 10), (s_alpha_s ** 14) * (s_beta_s ** 6), (s_alpha_s ** 4) * (c_beta_s ** 12), (s_alpha_s ** 8) * (c_beta_s ** 4), (s_alpha_s ** 12) * (c_beta_s ** 10), (c_alpha_s ** 4) * (s_beta_s ** 4), (s_alpha_s ** 14) * (s_beta_s ** 10), (c_harmonics_alpha[10] * c_harmonics_beta[6]), (c_alpha_s ** 14) * (c_beta_s ** 14), (s_alpha_s ** 12) * (s_beta_s ** 4), (c_alpha_s ** 9) * (c_beta_s ** 2), (c_alpha_s ** 12) * (s_beta_s ** 10), (s_alpha_s ** 6) * (c_beta_s ** 14), (c_alpha_s ** 10) * (s_beta_s ** 12), (c_alpha_s ** 9) * (s_beta_s ** 2), (c_alpha_s ** 13) * (c_beta_s ** 2), (c_alpha_s ** 10) * (c_beta_s ** 8), (c_alpha_s ** 13) * (s_beta_s ** 2), (s_alpha_s ** 12) * (s_beta_s ** 12), (s_alpha_s ** 14) * (s_beta_s ** 2), (c_harmonics_alpha[8] * c_harmonics_beta[6]), (s_alpha_s ** 10) * (c_beta_s ** 2), (c_alpha_s ** 8) * (s_beta_s ** 10), (c_alpha_s ** 6) * (s_beta_s ** 2), (c_alpha_s ** 14) * (s_beta_s ** 6), (s_alpha_s ** 14) * (s_beta_s ** 4), ])


    coefficients_array = np.array([0.5616846530271884, -0.018984110931540538, -0.013399128256278628, -0.020593053135232103, -0.014186836010298992, -0.009041024206093951, -0.014237409529826958, -0.008345002331852135, -0.01237921364796171, 0.010060938821172788, -0.006815995702965675, -0.013520014321715346, -0.013352568282027745, 0.004712045034704689, -0.004636549653614658, 0.008611884791836935, -0.008705131112180364, 0.006562585032478867, -0.009454720705800043, -0.009547031759762402, 0.005755745835196954, -0.0072404848491909165, -0.009301226876294016, 0.005616756808123396, -0.005464096628106366, 0.006295974487875192, 0.002383736555003909, 0.00730886181580506, 0.0033381894396596855, 0.006293400068964959, -0.005057322614345615, -0.0018421244103276778, -0.0023013309371147012, -0.006072924962269888, 0.005755035612846821, -0.006446773703522114, 0.004558913855221137, 0.0015863738312282606, 0.004607664515712883, -0.004690377769690052, -0.006168201436088364, 0.004966052765897077, 0.004964315569482325, 0.0037397425832998367, 0.005389840967818294, 0.0026541679209183713, -0.002319854286889881, 0.0029489630061383877, 0.00338252633561467, 0.004325812879117812, 0.005251489467157939, 0.0032189858431597063, 0.002755991677046219, 0.0026804419617982374, -0.0017042463556816495, 0.0021973887683564486, 0.004374379220834795, -0.003931973578281299, 0.0009604644180391735, 0.003076297978836534, -0.0035476188191204024, -0.0009244944081570926, -0.0031891434423592193, -0.0027202163667666935, 0.004637691598492608, 0.004192495587378023, 0.0034230169874847906, -0.004198020132220584, 0.0018891354084955023, 0.0029002273867741297, -0.0028479751839417134, -0.003942226075072194, 0.004627129186943945, 0.0007885896002655426, 0.0041056816904818105, -0.0029057637667842845, -0.002934307519319624, 0.0037395176510643786, 0.0011932102221362778, 0.003403512740927483, -0.0006981792949456998, -0.0030441103552155185, 0.002296283343224682, -0.0035044797972518297, 0.003964751976754151, 0.004087638247732352, -0.000631429464463586, -0.0010199146130794323, -0.0033344563799444296, -0.0029970254991779225, 0.0025581778227351114, -0.0029630102956359587, 0.001875952076581458, 0.0020794251428629383, 0.0032489365546010257, -0.0020694956581920835, -0.0035626657702500174, -0.0018830877568874825, 0.003654950644454299, -0.0032066275626605224, 0.0021707691241742238, -0.0022708274724674658, -0.0028161103726134238, -0.0025153556351722828, 0.003500638109471731, 0.002034338315429898, 0.003360693455601613, 0.0017403893300793826, 0.0027845317460908356, -0.002802209063598566, 0.0004896609347160673, 0.003175949036818339, 0.00048363701514935245, -0.0013988030172339143, 0.002796977535582991, -0.0036112459890043015, 0.0013960137569694136, 0.002220989418742851, -0.003196534847596022, -0.0023211552430817597, 0.002417865852293418, 0.003375244692552652, 0.0032058754745238898, -0.0037084835413020547, 0.0006623099703415098, 0.002051718353517529, 0.002369715786914142, 0.0015982694562967936, 0.003133966397716362, 0.0019152753804041035, -0.0026063656479766635, -0.0023736987093471874, -0.0010095192250818943, -0.0010168447225287229, -0.0018177542921044049, 0.002603743745680631, -0.0019383033477088246, -0.0015901197159761515, 0.002884118526630678, 0.0011395458168496483, 0.0031507655472375862, -0.0003867317047521658, -0.0034576772117002282, 0.0018854433587513853, 0.0011889504898172827, 0.002789893664379058, -0.002354636983456816, 0.0027791902729179248, 0.0011852455137441103, -0.0013842828266254436, 0.00221696215051797, -0.0013838466086682551, 0.0030062487285800474, 0.0014299329502029893, 0.0003553389704445448, 0.0011437288049226217, 0.0020677735184134374, 0.0008891420595805783, -0.0020931913680027397, 0.0017418116724242463, ])


    return np.dot(coefficients_array, expressions_array)
@jit(nopython=True, cache=True)
def D_coefficients_truncated_shadow_False_single_ideal_optical_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([(c_alpha_s ** 1), (c_alpha_s ** 1) * (c_beta_s ** 2), (c_alpha_s ** 1) * (s_beta_s ** 2), (c_harmonics_alpha[1] * c_harmonics_beta[4]), (c_alpha_s ** 1) * (c_beta_s ** 4), (c_alpha_s ** 1) * (s_beta_s ** 4), (c_alpha_s ** 1) * (c_beta_s ** 6), (c_alpha_s ** 1) * (s_beta_s ** 6), (c_alpha_s ** 1) * (c_beta_s ** 8), (c_alpha_s ** 1) * (s_beta_s ** 8), (c_harmonics_alpha[3] * c_harmonics_beta[4]), (c_alpha_s ** 1) * (c_beta_s ** 10), (c_alpha_s ** 1) * (s_beta_s ** 10), (c_alpha_s ** 1) * (c_beta_s ** 12), (c_alpha_s ** 1) * (s_beta_s ** 12), (c_harmonics_alpha[3] * c_harmonics_beta[2]), (c_alpha_s ** 1) * (c_beta_s ** 14), (c_alpha_s ** 7) * (s_beta_s ** 2), (c_alpha_s ** 1) * (s_beta_s ** 14), (c_alpha_s ** 7) * (c_beta_s ** 2), (c_alpha_s ** 9) * (s_beta_s ** 2), (c_alpha_s ** 3) * (s_beta_s ** 2), (c_alpha_s ** 9) * (c_beta_s ** 2), (c_alpha_s ** 3) * (s_beta_s ** 4), (c_alpha_s ** 3) * (c_beta_s ** 2), (c_alpha_s ** 3) * (c_beta_s ** 4), (c_harmonics_alpha[1] * c_harmonics_beta[2]), (c_alpha_s ** 3) * (s_beta_s ** 6), (c_alpha_s ** 3) * (c_beta_s ** 6), (c_alpha_s ** 3) * (s_beta_s ** 8), (c_alpha_s ** 3) * (c_beta_s ** 8), (c_alpha_s ** 7) * (s_beta_s ** 4), (c_alpha_s ** 3) * (s_beta_s ** 10), (c_alpha_s ** 7) * (c_beta_s ** 4), (c_alpha_s ** 3) * (c_beta_s ** 10), (c_harmonics_alpha[5] * c_harmonics_beta[4]), (c_alpha_s ** 3) * (s_beta_s ** 12), (c_alpha_s ** 3) * (c_beta_s ** 12), (c_alpha_s ** 3) * (s_beta_s ** 14), (c_alpha_s ** 3) * (c_beta_s ** 14), (c_harmonics_alpha[1] * c_harmonics_beta[8]), (c_alpha_s ** 13) * (c_beta_s ** 2), (c_harmonics_alpha[5] * c_harmonics_beta[2]), (c_alpha_s ** 9) * (s_beta_s ** 4), (c_alpha_s ** 7) * (s_beta_s ** 6), (c_alpha_s ** 13) * (s_beta_s ** 2), (c_alpha_s ** 7) * (c_beta_s ** 6), (c_alpha_s ** 9) * (c_beta_s ** 4), (c_alpha_s ** 13) * (c_beta_s ** 4), (c_harmonics_alpha[7] * c_harmonics_beta[2]), (c_alpha_s ** 13) * (s_beta_s ** 4), (c_alpha_s ** 13) * (c_beta_s ** 6), (c_harmonics_alpha[3] * c_harmonics_beta[6]), 1, (c_harmonics_alpha[9] * c_harmonics_beta[4]), (c_harmonics_alpha[3] * c_harmonics_beta[8]), (c_alpha_s ** 5) * (c_beta_s ** 8), (c_alpha_s ** 5) * (c_beta_s ** 10), (c_alpha_s ** 13) * (s_beta_s ** 6), (c_alpha_s ** 13) * (c_beta_s ** 8), (c_alpha_s ** 5) * (c_beta_s ** 12), (c_alpha_s ** 5) * (s_beta_s ** 8), (c_alpha_s ** 7) * (s_beta_s ** 8), (c_alpha_s ** 5) * (s_beta_s ** 10), (c_alpha_s ** 5) * (c_beta_s ** 6), (c_alpha_s ** 5) * (c_beta_s ** 14), (c_harmonics_alpha[1] * c_harmonics_beta[6]), (c_alpha_s ** 5) * (s_beta_s ** 12), (c_alpha_s ** 7) * (c_beta_s ** 8), (c_alpha_s ** 5) * (s_beta_s ** 6), (c_alpha_s ** 13) * (c_beta_s ** 10), (c_alpha_s ** 13) * (s_beta_s ** 8), (c_alpha_s ** 5) * (s_beta_s ** 14), (c_alpha_s ** 9) * (s_beta_s ** 6), (c_alpha_s ** 13) * (c_beta_s ** 12), (c_alpha_s ** 13) * (s_beta_s ** 10), (c_alpha_s ** 9) * (c_beta_s ** 6), (c_alpha_s ** 13) * (c_beta_s ** 14), (c_alpha_s ** 13) * (s_beta_s ** 12), (c_harmonics_alpha[7] * c_harmonics_beta[4]), (c_alpha_s ** 7) * (s_beta_s ** 10), (s_alpha_s ** 2), (c_alpha_s ** 13) * (s_beta_s ** 14), (c_alpha_s ** 5) * (c_beta_s ** 4), (s_alpha_s ** 8), (c_harmonics_alpha[9] * c_harmonics_beta[2]), (c_alpha_s ** 7) * (c_beta_s ** 10), (c_alpha_s ** 11) * (c_beta_s ** 8), (c_harmonics_alpha[11] * c_harmonics_beta[4]), (c_alpha_s ** 11) * (c_beta_s ** 6), (c_alpha_s ** 5) * (s_beta_s ** 4), (c_alpha_s ** 5) * (s_beta_s ** 2), (c_alpha_s ** 11) * (c_beta_s ** 10), (c_harmonics_alpha[11] * c_harmonics_beta[6]), (c_alpha_s ** 11) * (c_beta_s ** 12), (c_alpha_s ** 5) * (c_beta_s ** 2), (c_alpha_s ** 11) * (c_beta_s ** 14), (c_harmonics_alpha[15] * c_harmonics_beta[4]), (c_alpha_s ** 11) * (c_beta_s ** 4), (s_alpha_s ** 4), (c_alpha_s ** 11) * (s_beta_s ** 8), (c_alpha_s ** 11) * (s_beta_s ** 10), (c_alpha_s ** 9) * (s_beta_s ** 8), (c_alpha_s ** 7) * (s_beta_s ** 12), (c_alpha_s ** 11) * (s_beta_s ** 6), (c_alpha_s ** 11) * (s_beta_s ** 12), (c_harmonics_alpha[5] * c_harmonics_beta[8]), (c_harmonics_alpha[13] * c_harmonics_beta[4]), (c_harmonics_alpha[13] * c_harmonics_beta[2]), (c_alpha_s ** 11) * (s_beta_s ** 14), (c_alpha_s ** 7) * (c_beta_s ** 12), (c_harmonics_alpha[3] * c_harmonics_beta[10]), (c_alpha_s ** 14) * (c_beta_s ** 2), (c_harmonics_alpha[5] * c_harmonics_beta[6]), (c_alpha_s ** 9) * (c_beta_s ** 8), (c_alpha_s ** 14) * (s_beta_s ** 2), (c_alpha_s ** 7) * (s_beta_s ** 14), (c_alpha_s ** 11) * (s_beta_s ** 4), (c_harmonics_alpha[11] * c_harmonics_beta[8]), (c_alpha_s ** 7) * (c_beta_s ** 14), (c_harmonics_alpha[11] * c_harmonics_beta[10]), (c_alpha_s ** 10) * (s_beta_s ** 2), (c_alpha_s ** 10) * (c_beta_s ** 2), (c_alpha_s ** 9) * (s_beta_s ** 10), (s_alpha_s ** 14), (c_harmonics_alpha[9] * c_harmonics_beta[10]), (c_alpha_s ** 8) * (s_beta_s ** 2), (c_alpha_s ** 8) * (c_beta_s ** 2), (s_alpha_s ** 10), (s_alpha_s ** 6), (c_harmonics_alpha[11] * c_harmonics_beta[14]), (c_harmonics_alpha[9] * c_harmonics_beta[8]), (c_alpha_s ** 14) * (c_beta_s ** 4), (c_harmonics_alpha[11] * c_harmonics_beta[12]), (c_harmonics_alpha[15] * c_harmonics_beta[6]), (c_alpha_s ** 14) * (s_beta_s ** 4), (c_alpha_s ** 9) * (c_beta_s ** 10), (c_harmonics_alpha[1] * c_harmonics_beta[10]), (c_harmonics_alpha[5] * c_harmonics_beta[12]), (s_alpha_s ** 2) * (s_beta_s ** 2), (c_alpha_s ** 2) * (c_beta_s ** 2), (c_harmonics_alpha[15] * c_harmonics_beta[10]), (c_alpha_s ** 9) * (s_beta_s ** 12), (c_harmonics_alpha[9] * c_harmonics_beta[6]), (c_alpha_s ** 10) * (s_beta_s ** 4), (c_alpha_s ** 10) * (c_beta_s ** 4), (s_alpha_s ** 8) * (c_beta_s ** 2), (c_alpha_s ** 8) * (s_beta_s ** 4), (c_alpha_s ** 14) * (s_beta_s ** 6), (s_alpha_s ** 8) * (s_beta_s ** 2), (c_harmonics_alpha[1] * c_harmonics_beta[14]), (c_alpha_s ** 2) * (s_beta_s ** 2), (c_alpha_s ** 14) * (c_beta_s ** 6), (c_alpha_s ** 8) * (c_beta_s ** 4), (c_harmonics_alpha[3] * c_harmonics_beta[12]), (s_alpha_s ** 2) * (c_beta_s ** 2), (s_alpha_s ** 12), (s_alpha_s ** 4) * (s_beta_s ** 2), (c_harmonics_alpha[15] * c_harmonics_beta[2]), (c_alpha_s ** 4) * (c_beta_s ** 2), (c_alpha_s ** 2) * (c_beta_s ** 14), (c_harmonics_alpha[9] * c_harmonics_beta[12]), (c_alpha_s ** 10) * (c_beta_s ** 6), (c_alpha_s ** 14) * (s_beta_s ** 8), (c_harmonics_alpha[15] * c_harmonics_beta[14]), (c_harmonics_alpha[3] * c_harmonics_beta[14]), (s_alpha_s ** 2) * (s_beta_s ** 4), (s_alpha_s ** 4) * (c_beta_s ** 2), (c_harmonics_alpha[10] * c_harmonics_beta[2]), (c_alpha_s ** 4) * (s_beta_s ** 2), (c_alpha_s ** 8) * (c_beta_s ** 6), (c_alpha_s ** 10) * (s_beta_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 8), (c_alpha_s ** 11) * (s_beta_s ** 2), (c_alpha_s ** 9) * (s_beta_s ** 14), (c_alpha_s ** 9) * (c_beta_s ** 12), (c_harmonics_alpha[4] * c_harmonics_beta[10]), (c_alpha_s ** 8) * (s_beta_s ** 6), (s_alpha_s ** 2) * (c_beta_s ** 8), (c_alpha_s ** 10) * (c_beta_s ** 8), (c_alpha_s ** 14) * (s_beta_s ** 10), (c_alpha_s ** 2) * (c_beta_s ** 4), (c_alpha_s ** 11) * (c_beta_s ** 2), (s_alpha_s ** 2) * (c_beta_s ** 6), (c_alpha_s ** 8) * (c_beta_s ** 8), (s_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 10), (s_alpha_s ** 2) * (c_beta_s ** 4), (c_harmonics_alpha[12] * c_harmonics_beta[2]), (s_alpha_s ** 8) * (c_beta_s ** 4), (c_alpha_s ** 14) * (c_beta_s ** 14), (s_beta_s ** 4), (c_alpha_s ** 14) * (c_beta_s ** 12), (s_alpha_s ** 4) * (s_beta_s ** 4), (c_harmonics_alpha[2] * c_harmonics_beta[6]), (c_harmonics_alpha[14] * c_harmonics_beta[10]), (s_alpha_s ** 8) * (s_beta_s ** 4), (c_alpha_s ** 10) * (s_beta_s ** 8), (c_harmonics_alpha[15] * c_harmonics_beta[8]), (s_alpha_s ** 2) * (c_beta_s ** 10), (c_alpha_s ** 10) * (c_beta_s ** 10), (c_alpha_s ** 14) * (s_beta_s ** 12), (c_harmonics_alpha[8] * c_harmonics_beta[2]), (c_alpha_s ** 6) * (s_beta_s ** 2), (c_alpha_s ** 4) * (c_beta_s ** 14), (c_alpha_s ** 8) * (c_beta_s ** 10), (c_alpha_s ** 2) * (s_beta_s ** 8), (c_harmonics_alpha[15] * c_harmonics_beta[12]), (c_alpha_s ** 12) * (s_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 4), (c_harmonics_alpha[14] * c_harmonics_beta[2]), (c_harmonics_alpha[13] * c_harmonics_beta[8]), (s_alpha_s ** 14) * (s_beta_s ** 2), (s_alpha_s ** 6) * (c_beta_s ** 2), (c_alpha_s ** 8) * (s_beta_s ** 8), (s_alpha_s ** 4) * (c_beta_s ** 4), (c_harmonics_alpha[11] * c_harmonics_beta[2]), (c_alpha_s ** 4) * (c_beta_s ** 4), (s_alpha_s ** 10) * (c_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 6), (c_alpha_s ** 6) * (c_beta_s ** 2), (c_alpha_s ** 12) * (c_beta_s ** 2), (s_alpha_s ** 14) * (c_beta_s ** 2), (c_alpha_s ** 14) * (s_beta_s ** 14), (s_alpha_s ** 4) * (c_beta_s ** 8), (c_alpha_s ** 10) * (s_beta_s ** 10), (s_alpha_s ** 4) * (c_beta_s ** 6), (c_harmonics_alpha[6] * c_harmonics_beta[12]), (c_harmonics_alpha[4] * c_harmonics_beta[8]), (s_beta_s ** 2), (s_alpha_s ** 2) * (s_beta_s ** 6), (c_harmonics_alpha[2] * c_harmonics_beta[8]), (c_harmonics_alpha[4] * c_harmonics_beta[4]), (s_alpha_s ** 8) * (s_beta_s ** 6), (s_alpha_s ** 10) * (s_beta_s ** 2), (s_alpha_s ** 2) * (c_beta_s ** 14), (c_harmonics_alpha[9] * c_harmonics_beta[14]), (c_harmonics_alpha[2] * c_harmonics_beta[12]), (c_alpha_s ** 10) * (s_beta_s ** 12), (c_alpha_s ** 4) * (s_beta_s ** 4), (c_alpha_s ** 8) * (s_beta_s ** 10), (s_alpha_s ** 6) * (s_beta_s ** 2), ])


    coefficients_array = np.array([-0.41465063529017016, -0.21203633644438405, -0.20261429884376797, 0.12387650076807387, -0.14472044440351023, -0.1352984068559573, -0.11068310265350664, -0.10201985667342177, -0.09019557033238862, -0.08229111597527508, -0.03139174926782525, -0.07653452300952994, -0.06928569986031664, -0.0667829626979904, -0.06008661021952472, 0.021074426864017042, -0.05947396074500095, -0.04854490921988979, -0.05324377782376531, -0.047230319613255, -0.033565709546420595, 0.020319083727518353, -0.031813684086867966, 0.02609648271408338, 0.0185211622079611, 0.02429856122189738, -0.009422037594798576, 0.0288910120499177, 0.027281430939067975, 0.029961541506493588, 0.028540300608789912, -0.02949508141096482, 0.030183907405063503, -0.02818049175065838, 0.028923333892896867, -0.00721674752329208, 0.029982529726664986, 0.028854950647084238, 0.029567253096303835, 0.028549726362316268, 0.0050822905688318425, 0.01848719957084822, -0.004635444692335639, -0.01919685636809848, -0.019945666394072293, 0.01639234034329175, -0.018680078905561556, -0.01744483088601885, 0.019198195438022817, 0.0037901995803905414, 0.017103336126393365, 0.019498013683600216, -0.003293792472836204, -0.0013245973865258645, -0.0031154764534295303, -0.003066794401062836, 0.012862359100727982, 0.014151512435447832, 0.01751451364943937, 0.0193548868147064, 0.014830771515946941, 0.012413521384979222, -0.01439770984212335, 0.013687342928510902, 0.010440691628362956, 0.015162025042256621, 0.0027186283628090773, 0.01435672254519698, -0.013181124587255715, 0.010012637945777857, 0.018996433514395835, 0.01748274603365125, 0.014682391451739961, -0.011970848458051998, 0.01854671578751135, 0.017223359709301993, -0.010301985619384347, 0.018066902025824193, 0.016860416715274485, -0.0020363573480138663, -0.010852398459456106, 0.001529518263737329, 0.016456810835486176, 0.005759448029452392, -0.0027049616220370123, -0.0017923804376381756, -0.009680983546515769, 0.010585721799007753, -0.0017143969291805177, 0.009232966964579183, 0.0053521784668926695, -0.00398952457728043, 0.011251817425208671, -0.0016055448646351798, 0.011554380733898079, -0.003582254924998164, 0.011654230178389402, 0.001485849155829559, 0.006496005803235505, 0.0015671634325775073, 0.008810581335934903, 0.009567122872521148, -0.007816019512170942, -0.008432143379242469, 0.00735649258112043, 0.009949244026592963, -0.0012972021990801566, 0.001278588569256183, -0.0012732259153205876, 0.010119253197839061, -0.007302066951860428, -0.00114007343657064, -0.004269121170042149, 0.0011197166768151365, -0.006230319363512167, -0.004204537042634202, -0.006697980465797643, 0.004518197499186566, 0.0008993512004053118, -0.005605750039753293, -0.000861176836700184, 0.0027636373559513476, 0.0027028696707419963, -0.00520098638962606, 0.0015664562189515402, 0.0008011008249270677, 0.002264107522890287, 0.0022020381062551066, -0.0012517729844018215, -0.0009715500024221659, -0.0007275822099171613, -0.0007227115782763259, -0.0031980820612900725, 0.000623803782808761, 0.0006290135164472679, -0.003133497935633047, -0.0036900363004848083, 0.0005908854050534551, -0.0005704014146070318, 0.0008492710001811592, -0.0008291424170305981, 0.0005119236798985075, -0.0034472961353527037, 0.0004896024496313618, 0.0020964253459636816, 0.002035657675920505, -0.0013929634815481808, 0.0017253724257645985, -0.0026730979440411856, -0.001311998139624268, 0.0004319277681426422, -0.000700375782243237, -0.0025874429583051597, 0.001663303002863178, 0.00041709164350537867, 0.0006802471933997655, 0.000753024460169985, 0.000846151845775808, 0.0003931504950030565, -0.0007883780856774241, -0.001377818591188876, -0.0003536653693671988, 0.001790305810910597, -0.0024166759095669466, 0.0003494167183163186, -0.0003414314964056408, 0.0007299550813597003, 0.0007210115333929178, -0.0003269990663618702, -0.0007034949202681075, 0.0014921975742268221, 0.001674565199054183, -0.0021807818146778297, -0.001057058719763072, -0.002215180714267794, -0.0020026834802297873, -0.00029292098006745, 0.0013577427703339922, 0.0008422775685717573, 0.001666336713047704, -0.0021575124240958057, -0.0005862589795615225, 0.0009207495583733482, 0.0006940831035406787, 0.0014179762004199973, -0.00039570187646077026, -0.0019808400594000537, 0.0005609312780204098, -0.0002569454178238067, -0.0010166126311726756, -0.0022551096062561568, 0.0002724627698621281, -0.002013386841589016, 0.000703897270516214, -0.00023928649600787636, -0.00023729620123965104, -0.0009356472873058565, 0.0013740878701677197, -0.00023349382990636025, 0.0007461883970294346, 0.001480032642539559, -0.0019213766075917896, -0.00022332681809759513, 0.0005763836337813797, -0.0011195795706818415, 0.001255485909429173, -0.0006357641329670439, -0.00021715982045296544, 0.0007562907440860958, -0.0004574923167857443, -0.00020987749556309107, 0.0002096771339574698, 0.0008106571589311436, -0.0005347041011859267, 0.0010869971221327001, 0.0005787569632042861, -0.00020018577082434234, -0.0005684333008881603, -0.0006606619857789143, -0.0005201246207975944, 0.000508101885996662, 0.0006942873653615004, 0.0007557990875779494, -0.0017573501557803224, 0.00074784310091109, 0.0012573282759707192, 0.00065270596236892, -0.000183801177947635, -0.00018346933988799399, 0.00014889522934310556, 0.0004774873536273217, -0.00017903552811488618, -0.00017837280435777057, -0.0008532615661630377, -0.0005911109958837482, -0.0006735855597407716, 0.00017407232955541773, -0.00017029293234400232, 0.001218801153240054, -0.00048355012421600436, 0.0010014044625870299, -0.0004368458350545839, ])


    return np.dot(coefficients_array, expressions_array)
@jit(nopython=True, cache=True)
def E_coefficients_truncated_shadow_False_single_ideal_optical_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([(s_alpha_s ** 1) * (s_beta_s ** 1), (s_harmonics_alpha[1] * s_harmonics_beta[3]), (s_harmonics_alpha[3] * s_harmonics_beta[1]), (s_alpha_s ** 3) * (s_beta_s ** 1), (s_alpha_s ** 1) * (s_beta_s ** 3), (s_alpha_s ** 5) * (s_beta_s ** 1), (s_alpha_s ** 1) * (s_beta_s ** 5), (s_harmonics_alpha[5] * s_harmonics_beta[1]), (s_alpha_s ** 7) * (s_beta_s ** 1), (s_alpha_s ** 3) * (s_beta_s ** 3), (s_alpha_s ** 1) * (s_beta_s ** 7), (s_harmonics_alpha[3] * s_harmonics_beta[3]), (s_harmonics_alpha[1] * s_harmonics_beta[5]), (s_alpha_s ** 9) * (s_beta_s ** 1), (s_alpha_s ** 1) * (s_beta_s ** 9), (s_alpha_s ** 11) * (s_beta_s ** 1), (s_alpha_s ** 13) * (s_beta_s ** 1), (s_alpha_s ** 1) * (s_beta_s ** 11), (s_alpha_s ** 5) * (s_beta_s ** 3), (s_alpha_s ** 3) * (s_beta_s ** 5), (s_alpha_s ** 1) * (s_beta_s ** 13), (s_harmonics_alpha[7] * s_harmonics_beta[1]), (s_alpha_s ** 7) * (s_beta_s ** 3), (s_alpha_s ** 3) * (s_beta_s ** 7), (s_alpha_s ** 5) * (s_beta_s ** 5), (s_harmonics_alpha[1] * s_harmonics_beta[7]), (s_alpha_s ** 9) * (s_beta_s ** 3), (s_harmonics_alpha[3] * s_harmonics_beta[5]), (s_alpha_s ** 3) * (s_beta_s ** 9), (s_harmonics_alpha[5] * s_harmonics_beta[3]), (s_alpha_s ** 11) * (s_beta_s ** 3), (s_alpha_s ** 3) * (s_beta_s ** 11), (s_harmonics_alpha[5] * s_harmonics_beta[5]), (s_harmonics_alpha[11] * s_harmonics_beta[1]), (s_alpha_s ** 7) * (s_beta_s ** 5), (s_alpha_s ** 13) * (s_beta_s ** 3), (s_alpha_s ** 5) * (s_beta_s ** 7), (s_harmonics_alpha[7] * s_harmonics_beta[3]), (s_harmonics_alpha[13] * s_harmonics_beta[1]), (s_alpha_s ** 11) * (s_beta_s ** 13), (s_alpha_s ** 11) * (s_beta_s ** 11), (s_alpha_s ** 13) * (s_beta_s ** 11), (s_alpha_s ** 9) * (s_beta_s ** 13), (s_alpha_s ** 13) * (s_beta_s ** 13), (s_alpha_s ** 13) * (s_beta_s ** 9), (s_alpha_s ** 9) * (s_beta_s ** 11), (s_alpha_s ** 11) * (s_beta_s ** 9), (s_alpha_s ** 3) * (s_beta_s ** 13), (s_alpha_s ** 7) * (s_beta_s ** 13), (s_alpha_s ** 9) * (s_beta_s ** 9), (s_alpha_s ** 13) * (s_beta_s ** 7), (s_alpha_s ** 7) * (s_beta_s ** 11), (s_harmonics_alpha[7] * s_harmonics_beta[5]), (s_harmonics_alpha[1] * s_harmonics_beta[11]), (s_alpha_s ** 11) * (s_beta_s ** 7), (s_harmonics_alpha[9] * s_harmonics_beta[3]), (s_harmonics_alpha[3] * s_harmonics_beta[7]), (s_harmonics_alpha[7] * s_harmonics_beta[7]), (s_alpha_s ** 7) * (s_beta_s ** 9), (s_harmonics_alpha[11] * s_harmonics_beta[5]), (s_alpha_s ** 9) * (s_beta_s ** 5), (s_alpha_s ** 5) * (s_beta_s ** 13), (s_harmonics_alpha[11] * s_harmonics_beta[11]), (s_alpha_s ** 9) * (s_beta_s ** 7), (s_harmonics_alpha[5] * s_harmonics_beta[7]), (s_harmonics_alpha[9] * s_harmonics_beta[1]), (s_harmonics_alpha[7] * s_harmonics_beta[9]), (s_harmonics_alpha[13] * s_harmonics_beta[11]), (s_harmonics_alpha[13] * s_harmonics_beta[9]), (s_harmonics_alpha[13] * s_harmonics_beta[3]), (s_harmonics_alpha[15] * s_harmonics_beta[1]), (s_harmonics_alpha[11] * s_harmonics_beta[9]), (s_harmonics_alpha[11] * s_harmonics_beta[7]), (s_alpha_s ** 5) * (s_beta_s ** 9), (s_alpha_s ** 13) * (s_beta_s ** 5), (s_harmonics_alpha[9] * s_harmonics_beta[5]), (s_harmonics_alpha[1] * s_harmonics_beta[13]), (s_harmonics_alpha[13] * s_harmonics_beta[5]), (s_harmonics_alpha[1] * s_harmonics_beta[15]), (s_harmonics_alpha[9] * s_harmonics_beta[15]), (s_harmonics_alpha[13] * s_harmonics_beta[7]), (s_alpha_s ** 5) * (s_beta_s ** 11), (s_harmonics_alpha[9] * s_harmonics_beta[13]), (s_harmonics_alpha[9] * s_harmonics_beta[7]), (s_harmonics_alpha[13] * s_harmonics_beta[13]), (s_harmonics_alpha[9] * s_harmonics_beta[9]), (s_harmonics_alpha[5] * s_harmonics_beta[11]), (s_harmonics_alpha[7] * s_harmonics_beta[15]), (s_harmonics_alpha[5] * s_harmonics_beta[13]), (s_harmonics_alpha[3] * s_harmonics_beta[9]), (s_harmonics_alpha[7] * s_harmonics_beta[11]), (s_harmonics_alpha[11] * s_harmonics_beta[13]), (s_harmonics_alpha[1] * s_harmonics_beta[9]), (s_harmonics_alpha[3] * s_harmonics_beta[13]), (s_harmonics_alpha[7] * s_harmonics_beta[13]), (s_harmonics_alpha[5] * s_harmonics_beta[9]), (s_harmonics_alpha[10] * s_harmonics_beta[9]), (s_harmonics_alpha[15] * s_harmonics_beta[11]), (s_harmonics_alpha[8] * s_harmonics_beta[9]), (s_harmonics_alpha[12] * s_harmonics_beta[9]), (s_harmonics_alpha[2] * s_harmonics_beta[13]), (s_harmonics_alpha[14] * s_harmonics_beta[11]), (s_harmonics_alpha[9] * s_harmonics_beta[11]), (s_alpha_s ** 7) * (s_beta_s ** 7), (s_harmonics_alpha[15] * s_harmonics_beta[7]), (s_harmonics_alpha[4] * s_harmonics_beta[11]), (s_harmonics_alpha[10] * s_harmonics_beta[7]), (s_harmonics_alpha[6] * s_harmonics_beta[13]), (s_harmonics_alpha[14] * s_harmonics_beta[5]), (s_harmonics_alpha[6] * s_harmonics_beta[7]), (s_harmonics_alpha[10] * s_harmonics_beta[1]), (s_harmonics_alpha[10] * s_harmonics_beta[11]), ])


    coefficients_array = np.array([-0.24595474894478908, -0.2064358628897955, -0.16304917407112404, -0.14370376818990652, -0.132857095994676, -0.100336263013211, -0.08761898351064283, 0.03892141129009239, -0.07659490508868759, -0.06730037087654327, -0.06390187755356255, 0.0283316959018593, 0.025464438819236913, -0.0617329640782535, -0.049552823466147505, -0.0516171812790877, -0.04432325866712766, -0.040056317578242746, -0.040839572830432734, -0.03809074910251406, -0.033370013003884, -0.009859754547114833, -0.02700377480135355, -0.02342999803862575, -0.018791748575208697, -0.0052918591735474415, -0.0187152009565621, 0.004246954623989539, -0.014935067824402983, 0.0036091447062752803, -0.013311310974871173, -0.009552299835362392, -0.002334984188876861, 0.002270309781993898, -0.00905258028607805, -0.00957802611119749, -0.008078466154478096, -0.0017013683168715424, -0.001577786514223969, 0.01212293662216117, 0.011119366573625498, 0.012027025185684105, 0.010834779515956143, 0.012837393791075347, 0.010551214058719387, 0.009557138606357254, 0.009364605188019202, -0.0059265092799517536, 0.00848246105899296, 0.007411893003976419, 0.007816842272391768, 0.006792822658785705, 0.0011045324659673358, 0.0010768300233725352, 0.006201725455646437, -0.0010109909397767116, -0.0008770286505779889, -0.0008602026851102844, 0.004068449439879035, -0.0007577366993721938, -0.0034290583991743386, 0.003939751240824418, 0.0006960048619415182, 0.0036571553519188175, 0.000665145304990651, 0.0006203543021365479, 0.0006100358032400742, -0.0005926105383431143, 0.0005840231196134068, 0.0005578204328421233, 0.0005244059994367992, -0.0005110680276104655, 0.000487964926322656, -0.0020823206102485153, 0.002432227787021382, 0.0004366587577813671, -0.0004184619001828464, 0.0003959887262966423, 0.0003548254443803983, 0.00032229012323178397, -0.0003108613555604482, 0.0015762219806056239, -0.0003108767267753082, 0.0002700302961242953, 0.00026581287849552636, -0.00025870642368997166, -0.00025093186401396007, -0.00022533743648514142, 0.00021771892545740374, 0.00021583361210098022, -0.00020363836725775707, -0.0001878278806297044, -0.00018343216213232303, -0.00017444892647311064, 0.00016378000497479893, -0.0001358395007222835, 0.00013243952546403644, 0.00013228226551409292, -0.00012865535452259326, -0.00012737413143875726, -0.00012557078665438592, -0.00012471142077493327, 0.00012384546955936178, -0.0005519049898749914, -0.00011488152966806219, -0.0001106108169523356, -0.00011158222502779493, -0.0001085213755504263, -0.00010441003767153828, -0.00010375096214994231, 0.0001037344913774165, -0.00010085953848120894, ])


    return np.dot(coefficients_array, expressions_array)
@jit(nopython=True, cache=True)
def F_coefficients_truncated_shadow_False_single_ideal_optical_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([(s_alpha_s ** 2), (s_beta_s ** 2), (s_alpha_s ** 2) * (c_beta_s ** 2), (s_beta_s ** 4), (c_harmonics_alpha[2] * c_harmonics_beta[4]), (c_harmonics_alpha[4] * c_harmonics_beta[2]), (c_alpha_s ** 2) * (s_beta_s ** 2), (c_harmonics_alpha[2] * c_harmonics_beta[2]), (s_alpha_s ** 4), (s_alpha_s ** 2) * (c_beta_s ** 4), (c_alpha_s ** 4) * (s_beta_s ** 2), (c_harmonics_alpha[6] * c_harmonics_beta[2]), 1, (s_alpha_s ** 4) * (c_beta_s ** 2), (c_alpha_s ** 6) * (s_beta_s ** 2), (c_harmonics_alpha[2] * c_harmonics_beta[6]), (s_alpha_s ** 2) * (c_beta_s ** 6), (c_alpha_s ** 4) * (c_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 4), (s_alpha_s ** 12), (s_beta_s ** 10), (c_alpha_s ** 4) * (s_beta_s ** 4), (s_alpha_s ** 4) * (c_beta_s ** 4), (c_alpha_s ** 6) * (c_beta_s ** 2), (s_alpha_s ** 8), (s_beta_s ** 14), (s_beta_s ** 8), (s_alpha_s ** 6), (s_alpha_s ** 6) * (s_beta_s ** 2), (s_alpha_s ** 2) * (c_beta_s ** 8), (c_alpha_s ** 6) * (s_beta_s ** 4), (s_alpha_s ** 8) * (s_beta_s ** 2), (s_alpha_s ** 4) * (c_beta_s ** 6), (s_beta_s ** 6), (c_alpha_s ** 2) * (c_beta_s ** 2), (s_alpha_s ** 10), (s_alpha_s ** 12) * (c_beta_s ** 2), (c_alpha_s ** 12) * (c_beta_s ** 2), (s_alpha_s ** 6) * (s_beta_s ** 4), (c_alpha_s ** 4) * (c_beta_s ** 4), (c_alpha_s ** 10) * (c_beta_s ** 2), (s_alpha_s ** 2) * (c_beta_s ** 14), (s_alpha_s ** 2) * (c_beta_s ** 10), (c_alpha_s ** 4) * (s_beta_s ** 6), (s_alpha_s ** 10) * (c_beta_s ** 2), (c_alpha_s ** 8) * (s_beta_s ** 2), (c_alpha_s ** 4) * (c_beta_s ** 8), (c_alpha_s ** 2) * (s_beta_s ** 6), (s_alpha_s ** 2) * (c_beta_s ** 12), (s_alpha_s ** 8) * (s_beta_s ** 4), (c_alpha_s ** 4) * (c_beta_s ** 6), (c_alpha_s ** 4) * (c_beta_s ** 10), (s_alpha_s ** 2) * (s_beta_s ** 10), (s_alpha_s ** 14), (s_alpha_s ** 2) * (s_beta_s ** 8), (c_alpha_s ** 6) * (c_beta_s ** 4), (c_harmonics_alpha[6] * c_harmonics_beta[4]), (s_alpha_s ** 6) * (c_beta_s ** 2), (c_alpha_s ** 12) * (c_beta_s ** 4), (c_alpha_s ** 10) * (c_beta_s ** 4), (s_alpha_s ** 12) * (c_beta_s ** 4), (s_beta_s ** 12), (c_alpha_s ** 12) * (s_beta_s ** 2), (s_alpha_s ** 6) * (c_beta_s ** 4), (s_alpha_s ** 10) * (c_beta_s ** 4), (c_alpha_s ** 6) * (c_beta_s ** 8), (s_alpha_s ** 4) * (s_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 14), (c_alpha_s ** 6) * (c_beta_s ** 6), (s_alpha_s ** 14) * (s_beta_s ** 2), (c_alpha_s ** 4) * (c_beta_s ** 12), (s_alpha_s ** 4) * (c_beta_s ** 8), (c_alpha_s ** 6) * (s_beta_s ** 6), (c_alpha_s ** 6) * (c_beta_s ** 10), (c_alpha_s ** 2) * (c_beta_s ** 10), (c_alpha_s ** 14) * (s_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 4), (c_alpha_s ** 10) * (s_beta_s ** 8), (c_harmonics_alpha[6] * c_harmonics_beta[6]), (c_alpha_s ** 12) * (s_beta_s ** 8), (c_alpha_s ** 10) * (s_beta_s ** 2), (c_alpha_s ** 4) * (s_beta_s ** 14), (c_alpha_s ** 12) * (s_beta_s ** 6), (c_harmonics_alpha[10] * c_harmonics_beta[4]), (c_alpha_s ** 10) * (s_beta_s ** 10), (c_alpha_s ** 10) * (s_beta_s ** 6), (c_alpha_s ** 2) * (c_beta_s ** 8), (c_alpha_s ** 12) * (s_beta_s ** 10), (c_alpha_s ** 12) * (s_beta_s ** 4), (s_alpha_s ** 6) * (s_beta_s ** 6), (c_alpha_s ** 12) * (c_beta_s ** 6), (s_alpha_s ** 2) * (s_beta_s ** 4), (c_alpha_s ** 6) * (c_beta_s ** 12), (c_alpha_s ** 10) * (c_beta_s ** 6), (c_alpha_s ** 10) * (s_beta_s ** 4), (s_alpha_s ** 8) * (c_beta_s ** 4), (s_alpha_s ** 12) * (c_beta_s ** 6), (s_alpha_s ** 8) * (s_beta_s ** 6), (s_alpha_s ** 14) * (s_beta_s ** 4), (s_alpha_s ** 2) * (s_beta_s ** 12), (c_alpha_s ** 2) * (c_beta_s ** 12), (s_alpha_s ** 4) * (c_beta_s ** 14), (c_alpha_s ** 8) * (s_beta_s ** 4), (c_alpha_s ** 10) * (s_beta_s ** 12), (c_alpha_s ** 8) * (c_beta_s ** 2), (c_alpha_s ** 4) * (c_beta_s ** 14), (c_alpha_s ** 12) * (s_beta_s ** 12), (s_alpha_s ** 6) * (s_beta_s ** 14), (s_alpha_s ** 10) * (c_beta_s ** 6), (s_alpha_s ** 8) * (c_beta_s ** 2), (c_harmonics_alpha[2] * c_harmonics_beta[8]), (s_alpha_s ** 10) * (s_beta_s ** 2), (s_alpha_s ** 4) * (c_beta_s ** 10), (c_alpha_s ** 6) * (s_beta_s ** 14), (s_alpha_s ** 6) * (c_beta_s ** 6), (c_harmonics_alpha[8] * c_harmonics_beta[4]), (c_alpha_s ** 14) * (c_beta_s ** 2), (s_alpha_s ** 4) * (c_beta_s ** 12), (c_alpha_s ** 4) * (s_beta_s ** 8), (c_harmonics_alpha[14] * c_harmonics_beta[4]), (s_alpha_s ** 8) * (s_beta_s ** 14), (s_alpha_s ** 4) * (s_beta_s ** 10), (c_alpha_s ** 6) * (c_beta_s ** 14), (s_alpha_s ** 10) * (s_beta_s ** 4), (s_alpha_s ** 2) * (s_beta_s ** 14), (s_alpha_s ** 4) * (s_beta_s ** 14), (s_alpha_s ** 2) * (s_beta_s ** 6), (c_alpha_s ** 12) * (c_beta_s ** 8), (c_harmonics_alpha[12] * c_harmonics_beta[6]), (s_alpha_s ** 4) * (s_beta_s ** 8), (c_alpha_s ** 8) * (s_beta_s ** 10), (c_alpha_s ** 2) * (s_beta_s ** 10), (c_alpha_s ** 14) * (s_beta_s ** 4), (s_alpha_s ** 14) * (c_beta_s ** 4), (c_alpha_s ** 10) * (c_beta_s ** 8), (c_alpha_s ** 4) * (s_beta_s ** 12), (s_alpha_s ** 14) * (c_beta_s ** 2), (c_alpha_s ** 2) * (c_beta_s ** 4), (c_alpha_s ** 8) * (s_beta_s ** 8), (s_alpha_s ** 2) * (s_beta_s ** 2), (c_harmonics_alpha[14] * c_harmonics_beta[2]), (c_alpha_s ** 12) * (c_beta_s ** 14), (c_harmonics_alpha[12] * c_harmonics_beta[10]), (c_alpha_s ** 12) * (s_beta_s ** 14), (c_alpha_s ** 13) * (c_beta_s ** 2), (c_alpha_s ** 10) * (c_beta_s ** 14), (c_alpha_s ** 13) * (s_beta_s ** 2), (s_alpha_s ** 12) * (c_beta_s ** 8), (c_harmonics_alpha[12] * c_harmonics_beta[8]), (c_alpha_s ** 8) * (c_beta_s ** 10), (c_alpha_s ** 9) * (c_beta_s ** 2), (c_alpha_s ** 10) * (s_beta_s ** 14), (c_alpha_s ** 12) * (c_beta_s ** 10), (c_alpha_s ** 9) * (s_beta_s ** 2), (s_alpha_s ** 14) * (s_beta_s ** 6), (c_alpha_s ** 12) * (c_beta_s ** 12), (c_alpha_s ** 6) * (s_beta_s ** 8), (c_alpha_s ** 8) * (c_beta_s ** 8), (s_alpha_s ** 12) * (s_beta_s ** 8), (s_alpha_s ** 12) * (s_beta_s ** 10), (s_alpha_s ** 8) * (c_beta_s ** 6), (c_harmonics_alpha[10] * c_harmonics_beta[2]), (c_alpha_s ** 10) * (c_beta_s ** 12), (s_alpha_s ** 6) * (s_beta_s ** 12), (c_alpha_s ** 10) * (c_beta_s ** 10), (c_alpha_s ** 5) * (s_beta_s ** 2), (s_alpha_s ** 14) * (s_beta_s ** 14), (c_alpha_s ** 5) * (c_beta_s ** 2), (c_harmonics_alpha[4] * c_harmonics_beta[10]), (c_alpha_s ** 14) * (s_beta_s ** 10), (s_alpha_s ** 6) * (s_beta_s ** 8), (s_alpha_s ** 8) * (s_beta_s ** 8), (c_alpha_s ** 8) * (s_beta_s ** 12), (s_alpha_s ** 10) * (c_beta_s ** 8), (s_alpha_s ** 8) * (s_beta_s ** 12), (c_alpha_s ** 14) * (c_beta_s ** 10), (c_alpha_s ** 14) * (c_beta_s ** 8), (c_alpha_s ** 6) * (s_beta_s ** 12), (c_alpha_s ** 8) * (c_beta_s ** 12), (c_alpha_s ** 14) * (s_beta_s ** 8), (s_alpha_s ** 10) * (s_beta_s ** 14), (c_alpha_s ** 4) * (s_beta_s ** 10), (s_alpha_s ** 12) * (c_beta_s ** 14), (c_harmonics_alpha[14] * c_harmonics_beta[10]), (s_alpha_s ** 8) * (c_beta_s ** 10), (c_harmonics_alpha[12] * c_harmonics_beta[12]), (c_harmonics_alpha[8] * c_harmonics_beta[10]), (s_alpha_s ** 10) * (s_beta_s ** 10), (c_alpha_s ** 13) * (c_beta_s ** 4), (c_alpha_s ** 13) * (s_beta_s ** 4), (c_harmonics_alpha[14] * c_harmonics_beta[6]), (s_alpha_s ** 12) * (c_beta_s ** 10), (c_alpha_s ** 9) * (c_beta_s ** 4), (c_alpha_s ** 11) * (c_beta_s ** 2), (c_alpha_s ** 9) * (s_beta_s ** 4), (c_alpha_s ** 11) * (s_beta_s ** 2), (c_harmonics_alpha[8] * c_harmonics_beta[8]), (c_harmonics_alpha[8] * c_harmonics_beta[2]), (c_alpha_s ** 14) * (c_beta_s ** 12), (s_alpha_s ** 4) * (s_beta_s ** 12), (s_alpha_s ** 12) * (c_beta_s ** 12), (s_alpha_s ** 10) * (c_beta_s ** 14), (s_alpha_s ** 10) * (s_beta_s ** 8), (s_alpha_s ** 12) * (s_beta_s ** 12), (c_harmonics_alpha[14] * c_harmonics_beta[12]), (c_harmonics_alpha[8] * c_harmonics_beta[6]), (s_alpha_s ** 14) * (c_beta_s ** 6), (s_alpha_s ** 8) * (c_beta_s ** 12), (c_alpha_s ** 2) * (c_beta_s ** 14), (c_harmonics_alpha[4] * c_harmonics_beta[6]), (c_alpha_s ** 5) * (s_beta_s ** 4), (c_alpha_s ** 5) * (c_beta_s ** 4), (c_alpha_s ** 14) * (s_beta_s ** 12), (c_harmonics_alpha[10] * c_harmonics_beta[14]), (s_alpha_s ** 4) * (s_beta_s ** 6), (c_alpha_s ** 13) * (c_beta_s ** 6), (c_harmonics_alpha[12] * c_harmonics_beta[14]), (s_alpha_s ** 14) * (c_beta_s ** 10), (c_alpha_s ** 13) * (s_beta_s ** 6), (c_harmonics_alpha[2] * c_harmonics_beta[12]), (c_alpha_s ** 14) * (c_beta_s ** 6), (s_alpha_s ** 12) * (s_beta_s ** 6), (c_alpha_s ** 9) * (c_beta_s ** 6), (c_alpha_s ** 9) * (s_beta_s ** 6), (c_harmonics_alpha[6] * c_harmonics_beta[12]), (s_alpha_s ** 8) * (s_beta_s ** 10), (c_alpha_s ** 2) * (c_beta_s ** 6), (s_alpha_s ** 6) * (c_beta_s ** 10), (c_harmonics_alpha[14] * c_harmonics_beta[14]), (c_harmonics_alpha[10] * c_harmonics_beta[6]), (s_alpha_s ** 12) * (s_beta_s ** 4), (s_alpha_s ** 14) * (c_beta_s ** 12), (c_alpha_s ** 13) * (c_beta_s ** 8), (c_harmonics_alpha[9] * c_harmonics_beta[2]), (s_alpha_s ** 10) * (s_beta_s ** 6), (c_harmonics_alpha[11] * c_harmonics_beta[2]), (c_alpha_s ** 13) * (s_beta_s ** 8), (c_alpha_s ** 5) * (c_beta_s ** 6), (c_alpha_s ** 5) * (s_beta_s ** 6), (c_harmonics_alpha[12] * c_harmonics_beta[4]), (c_harmonics_alpha[3] * c_harmonics_beta[10]), (c_alpha_s ** 11) * (c_beta_s ** 4), (c_alpha_s ** 11) * (s_beta_s ** 4), (c_alpha_s ** 8) * (s_beta_s ** 14), (s_alpha_s ** 6) * (s_beta_s ** 10), (c_alpha_s ** 9) * (c_beta_s ** 8), (c_alpha_s ** 9) * (s_beta_s ** 8), (c_alpha_s ** 8) * (c_beta_s ** 6), (c_alpha_s ** 1), (s_alpha_s ** 10) * (c_beta_s ** 10), (c_harmonics_alpha[14] * c_harmonics_beta[8]), (c_harmonics_alpha[6] * c_harmonics_beta[8]), (c_harmonics_alpha[1] * c_harmonics_beta[6]), (s_alpha_s ** 10) * (c_beta_s ** 12), (c_alpha_s ** 6) * (s_beta_s ** 10), (c_alpha_s ** 13) * (c_beta_s ** 10), (c_alpha_s ** 14) * (c_beta_s ** 4), (c_harmonics_alpha[13] * c_harmonics_beta[10]), (c_harmonics_alpha[13] * c_harmonics_beta[2]), (c_alpha_s ** 13) * (s_beta_s ** 10), (s_alpha_s ** 8) * (c_beta_s ** 8), (s_alpha_s ** 14) * (s_beta_s ** 12), (s_alpha_s ** 12) * (s_beta_s ** 14), (c_alpha_s ** 7) * (c_beta_s ** 2), (c_harmonics_alpha[4] * c_harmonics_beta[14]), (c_alpha_s ** 5) * (c_beta_s ** 8), (c_harmonics_alpha[8] * c_harmonics_beta[12]), (c_alpha_s ** 5) * (s_beta_s ** 8), (c_alpha_s ** 7) * (s_beta_s ** 2), (c_alpha_s ** 9) * (c_beta_s ** 10), (c_alpha_s ** 9) * (s_beta_s ** 10), (c_harmonics_alpha[8] * c_harmonics_beta[14]), (s_alpha_s ** 6) * (c_beta_s ** 12), (s_alpha_s ** 6) * (c_beta_s ** 14), (c_harmonics_alpha[5] * c_harmonics_beta[12]), (c_alpha_s ** 13) * (c_beta_s ** 12), (c_harmonics_alpha[9] * c_harmonics_beta[8]), (c_harmonics_alpha[3] * c_harmonics_beta[14]), (c_alpha_s ** 13) * (s_beta_s ** 12), (c_alpha_s ** 2) * (s_beta_s ** 12), (c_alpha_s ** 11) * (c_beta_s ** 6), (c_harmonics_alpha[5] * c_harmonics_beta[6]), (c_alpha_s ** 11) * (s_beta_s ** 6), (c_harmonics_alpha[3] * c_harmonics_beta[4]), (c_harmonics_alpha[7] * c_harmonics_beta[2]), (s_alpha_s ** 14) * (c_beta_s ** 8), (c_harmonics_alpha[12] * c_harmonics_beta[2]), (c_alpha_s ** 5) * (c_beta_s ** 10), (c_alpha_s ** 14) * (c_beta_s ** 14), (c_harmonics_alpha[3] * c_harmonics_beta[8]), (c_alpha_s ** 9) * (s_beta_s ** 12), (c_alpha_s ** 9) * (c_beta_s ** 12), (s_alpha_s ** 6) * (c_beta_s ** 8), (c_alpha_s ** 13) * (c_beta_s ** 14), (c_harmonics_alpha[6] * c_harmonics_beta[10]), (c_harmonics_alpha[1] * c_harmonics_beta[12]), (c_alpha_s ** 5) * (s_beta_s ** 10), (c_harmonics_alpha[3] * c_harmonics_beta[6]), (s_alpha_s ** 14) * (s_beta_s ** 8), (c_harmonics_alpha[2] * c_harmonics_beta[10]), (c_alpha_s ** 14) * (s_beta_s ** 14), (c_alpha_s ** 13) * (s_beta_s ** 14), (c_harmonics_alpha[1] * c_harmonics_beta[8]), (c_harmonics_alpha[5] * c_harmonics_beta[10]), (c_harmonics_alpha[15] * c_harmonics_beta[2]), (c_alpha_s ** 5) * (c_beta_s ** 12), (c_alpha_s ** 9) * (s_beta_s ** 14), (c_alpha_s ** 8) * (c_beta_s ** 14), (c_alpha_s ** 9) * (c_beta_s ** 14), (c_harmonics_alpha[15] * c_harmonics_beta[14]), (c_alpha_s ** 5) * (s_beta_s ** 12), (c_harmonics_alpha[10] * c_harmonics_beta[10]), (c_alpha_s ** 11) * (c_beta_s ** 8), (c_alpha_s ** 11) * (s_beta_s ** 8), (s_alpha_s ** 10) * (s_beta_s ** 12), (c_harmonics_alpha[7] * c_harmonics_beta[14]), (c_alpha_s ** 5) * (c_beta_s ** 14), (c_harmonics_alpha[15] * c_harmonics_beta[10]), (c_harmonics_alpha[5] * c_harmonics_beta[4]), (c_alpha_s ** 7) * (c_beta_s ** 4), (c_alpha_s ** 5) * (s_beta_s ** 14), (c_alpha_s ** 2) * (s_beta_s ** 8), (c_harmonics_alpha[4] * c_harmonics_beta[8]), (c_harmonics_alpha[5] * c_harmonics_beta[8]), (c_harmonics_alpha[7] * c_harmonics_beta[8]), (c_alpha_s ** 7) * (s_beta_s ** 4), (c_alpha_s ** 11) * (s_beta_s ** 10), (c_alpha_s ** 11) * (c_beta_s ** 10), (c_harmonics_alpha[9] * c_harmonics_beta[14]), (c_harmonics_alpha[13] * c_harmonics_beta[4]), (c_harmonics_alpha[11] * c_harmonics_beta[12]), (c_alpha_s ** 8) * (c_beta_s ** 4), (c_harmonics_alpha[4] * c_harmonics_beta[4]), (c_harmonics_alpha[3] * c_harmonics_beta[2]), (c_alpha_s ** 11) * (s_beta_s ** 12), (c_harmonics_alpha[15] * c_harmonics_beta[12]), (c_alpha_s ** 11) * (c_beta_s ** 12), (c_harmonics_alpha[15] * c_harmonics_beta[6]), (s_alpha_s ** 14) * (c_beta_s ** 14), (c_harmonics_alpha[13] * c_harmonics_beta[8]), (c_alpha_s ** 7) * (c_beta_s ** 6), (c_harmonics_alpha[11] * c_harmonics_beta[8]), (c_alpha_s ** 11) * (s_beta_s ** 14), (c_alpha_s ** 7) * (s_beta_s ** 6), (c_alpha_s ** 11) * (c_beta_s ** 14), (c_harmonics_alpha[9] * c_harmonics_beta[4]), (c_harmonics_alpha[15] * c_harmonics_beta[8]), (c_harmonics_alpha[10] * c_harmonics_beta[8]), (c_harmonics_alpha[5] * c_harmonics_beta[2]), (s_alpha_s ** 8) * (c_beta_s ** 14), (c_harmonics_alpha[7] * c_harmonics_beta[4]), (c_harmonics_alpha[11] * c_harmonics_beta[10]), (c_harmonics_alpha[9] * c_harmonics_beta[10]), (c_alpha_s ** 1) * (c_beta_s ** 2), (c_harmonics_alpha[10] * c_harmonics_beta[12]), (c_alpha_s ** 7) * (c_beta_s ** 8), (c_alpha_s ** 7) * (s_beta_s ** 8), (c_alpha_s ** 1) * (s_beta_s ** 2), (c_harmonics_alpha[2] * c_harmonics_beta[14]), (c_harmonics_alpha[4] * c_harmonics_beta[12]), (c_harmonics_alpha[7] * c_harmonics_beta[12]), (c_harmonics_alpha[1] * c_harmonics_beta[10]), (c_harmonics_alpha[5] * c_harmonics_beta[14]), (c_alpha_s ** 7) * (s_beta_s ** 10), (c_alpha_s ** 7) * (c_beta_s ** 10), (s_alpha_s ** 12) * (s_beta_s ** 2), (c_alpha_s ** 7) * (s_beta_s ** 12), (c_alpha_s ** 7) * (c_beta_s ** 12), ])


    coefficients_array = np.array([-0.029271380268462762, 0.02468886983490244, -0.030379942745567396, 0.019506674502600768, -0.015749023911333575, 0.014551557986189926, 0.02358030736748362, 0.013599270767230585, -0.0146908390868967, -0.028327803885153543, 0.026874996858160475, -0.010280866912779102, -0.0037512245306300773, -0.01909409104552202, 0.02199227874319523, -0.00814020073245014, -0.020912508546275542, 0.016976924611270348, 0.016345973169488628, -0.011980118300388615, -0.010812475336229683, 0.01846483112939989, -0.0182177837170759, 0.01534353330486526, 0.008691176974015368, 0.011193204695548967, -0.007596554215875705, 0.006405811536926084, 0.012580659564245701, -0.013286359967768144, 0.014790747173561956, 0.012157239985649963, -0.012960672454333182, 0.004816483504781145, 0.005691072909471415, -0.005863356664744566, -0.01187486100321123, -0.011368624964086806, 0.0110725012205549, 0.00856675888676969, -0.00967510132995291, -0.011328819047976663, -0.009634571373637041, 0.010120149153519524, -0.00963679992830921, 0.008508733457007308, 0.010559359752579234, 0.007018938643312443, -0.009380540172187347, 0.010495840292896953, 0.008501275136268836, 0.010715204593815959, -0.00832184837065707, 0.004793910755590875, -0.007354758375199083, 0.008142001727033868, 0.002363593465299996, -0.006174848037116535, -0.010853512622442017, -0.009819607575179167, -0.010815852185577896, -0.0040760916351307045, -0.00791423381797243, -0.007683006390063896, -0.009397525014269718, 0.009519739795479272, 0.004403251964097442, 0.0077826301404289025, 0.007925249743049109, 0.007651057973566008, 0.008981768885568045, -0.007435439613152603, 0.0078059675753039655, 0.00955909506633942, 0.0059218364035010344, 0.006947371279593527, 0.005279559296245231, -0.010737445331362323, -0.0017623201175995726, -0.011409467192050014, -0.005615261852848573, 0.008771863177363459, -0.00952427329823511, 0.0016358476499998761, -0.01090231788910882, -0.008445380763590393, 0.004708439396745018, -0.01140703429629827, -0.007399121478667456, 0.006314147448919647, -0.008213248470697114, 0.003160701333618922, 0.008044910213567267, -0.00727850114619864, -0.005759768090902045, -0.005127462713108749, -0.007435281096092256, 0.006177649570641208, 0.006653272420926195, -0.004527122505413599, 0.004368215650104327, -0.006325959431588061, 0.004747060358171201, -0.008723914756066303, 0.003499684013015653, 0.006029569846272332, -0.009293792768951953, 0.007397059115062834, -0.006153998944122726, -0.0034660630197145222, -0.0011271886056265692, 0.0037734432505682016, -0.004841203195623246, 0.006763844704949116, -0.004432810956178572, 0.0010360966114912496, 0.003908211837132666, -0.004766986940548089, 0.003899035538071459, -0.00098130683564452, 0.006884171963278207, -0.0041274913549633, 0.005529797462477018, 0.004012718161883483, 0.0034105745628540654, 0.004399807600080692, -0.002202455141182112, -0.005333026393782164, 0.0008046794993864983, -0.0032139269933221114, -0.004748442037845618, -0.0024906269624382, 0.003825284856371711, -0.003854932767048706, -0.004343846607787392, 0.003547191930738823, -0.0028571472177573477, -0.001543261283699924, -0.0037561503865170287, 0.0011085624725910524, 0.0006589513203600399, -0.005400370419655715, 0.0006312981471175557, -0.005355018071697734, 0.0022854749212333743, -0.0047521539479842894, 0.0022860770816670404, -0.004001234361216412, -0.0006071157189498206, 0.0035040835310160452, -0.001796023923605167, -0.004527493584800926, -0.00410047319164157, -0.0017847422974641084, 0.00351726417093549, -0.004292406979487095, 0.0026324300176225556, 0.002940111264371507, -0.0036358973792689872, -0.00403790578073978, -0.0024706716882680955, 0.0004954956409435841, -0.0034593855403307052, 0.0028263115257916734, -0.0031428359740606894, 0.0011159372861905081, 0.004387558812448373, 0.0010961711103924076, 0.00045763273679642197, -0.003583894905649755, 0.0021935099095204244, 0.0024789719335498424, -0.0029371360152484053, -0.0026795150713078827, 0.002921480360444613, 0.003320049098930712, 0.002970002664554307, 0.0023860800241906135, 0.002575261841850028, -0.0028063639630057126, 0.0031161701337862613, 0.0017037300578947936, -0.0032186801381467738, -0.00037254090503186925, 0.002158850220503787, -0.00035656704147299216, -0.00035425207402934846, -0.0024146250344832944, 0.001720386206592022, 0.00172098836567391, -0.00033910800162565547, -0.002379790200603593, -0.001342671684911425, -0.0010904069306331059, -0.0013313900571721598, -0.0010844658886320013, 0.00031339460341030907, 0.00030670782415695143, 0.002545609925586401, -0.001430961445292339, -0.002300455524122571, -0.002257936049927886, -0.0017648263707823481, -0.0023033428623603206, 0.0002821022671064679, -0.00028161613878032636, -0.001716710079537905, 0.0018010471745455532, 0.0010267102295190675, -0.00026614238544546426, 0.0008436282829868872, 0.0008238621081969215, -0.0022057257915190295, 0.00025695257842623986, 0.0008987553653829579, 0.0014416904549610617, 0.0002452184081616978, 0.0019044969901916727, 0.0014345954033402268, -0.00023907289327685565, 0.0014289637178236236, -0.001367810750128539, -0.0011115163765550403, -0.0011091931267750883, 0.00021925293390085476, 0.0013228937010981183, 0.000549439042270966, 0.0011082745151104504, -0.00020786807092561385, 0.00019576888996649384, 0.000953751524081449, 0.0016442570541249112, 0.0012693196544457616, 0.00019108717216963366, 0.00100846699514718, 0.00018738453514184064, 0.0012545273986034305, 0.0006927785090269838, 0.0007024028783998066, -0.00018319521046137853, 0.0001801866229319916, -0.0008124291694562248, -0.0008064881290336972, 0.001245687557258877, 0.0009453264397430575, -0.0009649106779963444, -0.0009715458042249847, 0.0007835021367467902, -0.0001071329198518007, -0.0010975681069859977, 0.00016290919825043984, 0.0001615867720203179, 0.00015931425276460642, -0.0011491213022920257, 0.0008252692768585822, 0.0011495701412010688, 0.000786125411389418, 0.00015165304881188346, 0.00015010909021952748, 0.0011281630610459092, 0.0008056324310035052, 0.0012965476690845064, 0.0012937342808155622, -0.00040594309523435954, 0.00014680354813671458, 0.000613334139372669, 0.00014201497609867719, 0.0006128167018368873, -0.0003897327054348416, -0.0008612160449723778, -0.000875537023167334, -0.0001373351636668192, 0.0007834249700506233, -0.00082332742874837, 0.00013375090348414516, 0.0010602407654262164, -0.00013184768971779976, 0.00012830336183770105, 0.0010333012359567692, 0.00045103086664916427, -0.0006692820538321188, 0.00012265747492985751, -0.0006716574842397509, 0.00012221074312503244, 0.00012191987019480412, 0.0008421512343547891, -0.00011892867743092517, 0.0005589669134390518, 0.001048235098404242, 0.00011741785734645086, -0.0008036127344067193, -0.0007828784224642404, -0.0005448993019658001, 0.0009903168238813973, -0.00011411725459235819, 0.0001137262370826841, 0.0005497926121630645, 0.00011284873227217318, 0.0008018945437405614, 0.00010988498393924266, 0.0009931003375827716, 0.0009587554729968196, 0.00010625086778714235, 0.00010421413107132456, 0.0001042824154566712, 0.000518844648637912, -0.0007470975972356062, 0.0006855692185530327, -0.0007210190940717359, -9.750268839595248e-05, 0.0005024984232721896, -9.339557096311805e-05, -0.0005778465914495519, -0.0005885384904430454, -0.0006818922414675763, 9.003888629649779e-05, 0.00048767233449660243, 8.757565455183541e-05, 8.407123091614447e-05, -0.00030130316772840283, 0.00046539696554079557, -0.00024179584005599045, -8.040183120370723e-05, 7.906777511354883e-05, 7.761171706177308e-05, -0.00028509277824323605, -0.0005306883893791631, -0.0005128538879936997, 7.575398734911462e-05, 7.295925870362953e-05, 7.028472338127886e-05, -0.00026198908595087794, -6.645104129177836e-05, -6.63577698877672e-05, -0.0004873889260887863, 6.411662826353723e-05, -0.0004635856836447966, 6.028519507433345e-05, 0.0005283027824733943, 5.599025185619203e-05, -0.0002441874272180037, 5.547269096769506e-05, -0.00045337435875582256, -0.00023756859007633595, -0.00042458945214833484, 5.3538384201108354e-05, 5.381506407517105e-05, -5.1431171657989516e-05, 5.136375839212033e-05, 0.0003348487225519051, 4.6767922010490974e-05, -4.438863124752961e-05, 4.4378286348098717e-05, -5.535815158175248e-05, -4.307652912266132e-05, -0.00020618346505720894, -0.00020915617998773785, -5.177477769586232e-05, 3.957593470917328e-05, -3.9092548026611075e-05, 3.884264905714824e-05, 3.851790104552081e-05, 3.829560329663265e-05, -0.00018961103157208561, -0.00017842401905955577, -0.00010525728732478306, -0.00017501811809042233, -0.0001569940660263785, ])


    return np.dot(coefficients_array, expressions_array)

@jit(nopython=True, cache=True)
def A_coefficients_truncated_shadow_True_single_ideal_optical_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([1, (s_alpha_s ** 2), (c_harmonics_alpha[2] * c_harmonics_beta[4]), (s_alpha_s ** 4), (s_beta_s ** 2), (s_alpha_s ** 6), (s_alpha_s ** 8), (s_alpha_s ** 2) * (s_beta_s ** 2), (s_alpha_s ** 14), (c_alpha_s ** 2) * (c_beta_s ** 2), (c_harmonics_alpha[4] * c_harmonics_beta[2]), (s_alpha_s ** 10), (s_beta_s ** 4), (c_alpha_s ** 4) * (c_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 2), (c_alpha_s ** 2) * (c_beta_s ** 4), (c_alpha_s ** 6) * (c_beta_s ** 2), (s_alpha_s ** 2) * (s_beta_s ** 4), (c_harmonics_alpha[2] * c_harmonics_beta[2]), (s_beta_s ** 14), (c_alpha_s ** 4) * (s_beta_s ** 2), (c_alpha_s ** 8) * (c_beta_s ** 2), (s_alpha_s ** 6) * (s_beta_s ** 2), (c_alpha_s ** 6) * (s_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 2), (c_alpha_s ** 4) * (c_beta_s ** 4), (s_alpha_s ** 8) * (s_beta_s ** 2), (c_harmonics_alpha[6] * c_harmonics_beta[2]), (c_alpha_s ** 8) * (s_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 4), (c_alpha_s ** 2) * (c_beta_s ** 6), (c_alpha_s ** 6) * (c_beta_s ** 4), (c_harmonics_alpha[4] * c_harmonics_beta[4]), (c_harmonics_alpha[6] * c_harmonics_beta[4]), (s_alpha_s ** 14) * (c_beta_s ** 2), (s_alpha_s ** 10) * (s_beta_s ** 2), (c_alpha_s ** 10) * (c_beta_s ** 2), (s_alpha_s ** 2) * (s_beta_s ** 6), (c_harmonics_alpha[4] * c_harmonics_beta[6]), (c_alpha_s ** 8) * (c_beta_s ** 4), (s_alpha_s ** 2) * (c_beta_s ** 2), (s_alpha_s ** 6) * (s_beta_s ** 4), (c_alpha_s ** 4) * (s_beta_s ** 4), (c_alpha_s ** 6) * (s_beta_s ** 4), (c_alpha_s ** 14) * (s_beta_s ** 2), (c_alpha_s ** 4) * (c_beta_s ** 6), (s_alpha_s ** 14) * (c_beta_s ** 4), (s_alpha_s ** 4) * (c_beta_s ** 2), (c_alpha_s ** 10) * (s_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 8), (s_alpha_s ** 14) * (s_beta_s ** 2), (s_alpha_s ** 8) * (s_beta_s ** 4), (s_alpha_s ** 8) * (c_beta_s ** 2), (c_alpha_s ** 14) * (c_beta_s ** 2), (c_alpha_s ** 4) * (s_beta_s ** 6), (c_alpha_s ** 8) * (s_beta_s ** 4), (c_alpha_s ** 2) * (s_beta_s ** 6), (s_alpha_s ** 2) * (s_beta_s ** 14), (s_beta_s ** 8), (c_alpha_s ** 6) * (c_beta_s ** 6), (c_alpha_s ** 6) * (s_beta_s ** 6), (c_harmonics_alpha[2] * c_harmonics_beta[6]), (s_alpha_s ** 6) * (c_beta_s ** 2), (c_alpha_s ** 4) * (s_beta_s ** 8), (c_alpha_s ** 2) * (s_beta_s ** 4), (c_alpha_s ** 6) * (s_beta_s ** 8), (s_beta_s ** 10), (c_alpha_s ** 2) * (s_beta_s ** 10), (c_alpha_s ** 8) * (s_beta_s ** 6), (s_alpha_s ** 14) * (c_beta_s ** 6), (s_alpha_s ** 4) * (s_beta_s ** 6), (c_alpha_s ** 8) * (c_beta_s ** 6), (c_alpha_s ** 14) * (s_beta_s ** 4), (s_alpha_s ** 10) * (s_beta_s ** 4), (s_beta_s ** 6), (c_alpha_s ** 10) * (c_beta_s ** 4), (c_alpha_s ** 2) * (c_beta_s ** 8), (s_alpha_s ** 10) * (c_beta_s ** 2), (c_alpha_s ** 4) * (s_beta_s ** 10), (s_alpha_s ** 14) * (s_beta_s ** 4), (c_alpha_s ** 8) * (s_beta_s ** 8), (s_alpha_s ** 14) * (s_beta_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 4), (c_alpha_s ** 6) * (s_beta_s ** 10), (s_alpha_s ** 2) * (s_beta_s ** 12), (s_alpha_s ** 14) * (s_beta_s ** 8), (s_beta_s ** 12), (s_alpha_s ** 2) * (s_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 6), (c_alpha_s ** 4) * (c_beta_s ** 8), (s_alpha_s ** 14) * (c_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 10), (s_alpha_s ** 4) * (s_beta_s ** 14), (s_alpha_s ** 6) * (s_beta_s ** 6), (c_alpha_s ** 8) * (s_beta_s ** 10), (s_alpha_s ** 12), (c_alpha_s ** 10) * (s_beta_s ** 4), (s_alpha_s ** 14) * (s_beta_s ** 10), (s_alpha_s ** 8) * (s_beta_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 12), (c_alpha_s ** 6) * (c_beta_s ** 8), (c_alpha_s ** 14) * (s_beta_s ** 6), (s_alpha_s ** 12) * (s_beta_s ** 2), (c_alpha_s ** 10) * (s_beta_s ** 6), (c_harmonics_alpha[6] * c_harmonics_beta[10]), (c_alpha_s ** 14) * (c_beta_s ** 14), (c_harmonics_alpha[4] * c_harmonics_beta[10]), (s_alpha_s ** 14) * (c_beta_s ** 10), (s_alpha_s ** 2) * (c_beta_s ** 10), (c_harmonics_alpha[10] * c_harmonics_beta[4]), (s_alpha_s ** 2) * (s_beta_s ** 10), (c_harmonics_alpha[8] * c_harmonics_beta[14]), (c_harmonics_alpha[6] * c_harmonics_beta[14]), (c_alpha_s ** 6) * (s_beta_s ** 12), (c_alpha_s ** 4) * (s_beta_s ** 12), (c_alpha_s ** 10) * (s_beta_s ** 8), (c_alpha_s ** 8) * (c_beta_s ** 8), (s_alpha_s ** 14) * (s_beta_s ** 12), (c_alpha_s ** 14) * (s_beta_s ** 14), (s_alpha_s ** 2) * (c_beta_s ** 12), (c_harmonics_alpha[8] * c_harmonics_beta[8]), (c_alpha_s ** 5) * (c_beta_s ** 2), (c_alpha_s ** 5) * (s_beta_s ** 2), (c_alpha_s ** 10) * (c_beta_s ** 6), (s_alpha_s ** 6) * (s_beta_s ** 14), (s_alpha_s ** 12) * (c_beta_s ** 4), (c_harmonics_alpha[4] * c_harmonics_beta[12]), (s_alpha_s ** 14) * (c_beta_s ** 12), (s_alpha_s ** 2) * (c_beta_s ** 4), (c_alpha_s ** 14) * (s_beta_s ** 8), (c_alpha_s ** 8) * (s_beta_s ** 12), (c_harmonics_alpha[8] * c_harmonics_beta[12]), (c_alpha_s ** 2) * (s_beta_s ** 12), (s_alpha_s ** 14) * (c_beta_s ** 14), (c_alpha_s ** 9) * (c_beta_s ** 2), (c_alpha_s ** 14) * (s_beta_s ** 12), (s_alpha_s ** 10) * (s_beta_s ** 6), (c_alpha_s ** 9) * (s_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 12), (s_alpha_s ** 8) * (s_beta_s ** 14), (c_alpha_s ** 13) * (c_beta_s ** 2), (c_alpha_s ** 13) * (s_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 8), (c_harmonics_alpha[10] * c_harmonics_beta[12]), (c_alpha_s ** 2) * (s_beta_s ** 14), (c_alpha_s ** 12) * (c_beta_s ** 10), (c_alpha_s ** 14) * (s_beta_s ** 10), (c_alpha_s ** 10) * (s_beta_s ** 10), (c_alpha_s ** 12) * (c_beta_s ** 12), (c_harmonics_alpha[2] * c_harmonics_beta[8]), (s_alpha_s ** 12) * (c_beta_s ** 6), (s_alpha_s ** 8) * (c_beta_s ** 4), (s_alpha_s ** 2) * (c_beta_s ** 6), (s_alpha_s ** 14) * (s_beta_s ** 14), (s_alpha_s ** 4) * (c_beta_s ** 10), (s_alpha_s ** 8) * (c_beta_s ** 10), (c_alpha_s ** 12) * (c_beta_s ** 8), (c_alpha_s ** 12) * (c_beta_s ** 14), (c_harmonics_alpha[14] * c_harmonics_beta[2]), (c_alpha_s ** 6) * (c_beta_s ** 10), (s_alpha_s ** 2) * (c_beta_s ** 14), (s_alpha_s ** 4) * (c_beta_s ** 12), (s_alpha_s ** 8) * (c_beta_s ** 8), (c_alpha_s ** 4) * (c_beta_s ** 10), (c_harmonics_alpha[12] * c_harmonics_beta[4]), (s_alpha_s ** 8) * (s_beta_s ** 8), (s_alpha_s ** 10) * (s_beta_s ** 14), (c_alpha_s ** 5) * (c_beta_s ** 4), (c_alpha_s ** 2) * (c_beta_s ** 10), (c_alpha_s ** 5) * (s_beta_s ** 4), (s_alpha_s ** 8) * (c_beta_s ** 12), (s_alpha_s ** 6) * (c_beta_s ** 10), (s_alpha_s ** 12) * (c_beta_s ** 2), (s_alpha_s ** 6) * (s_beta_s ** 12), (c_alpha_s ** 12) * (s_beta_s ** 14), (s_alpha_s ** 6) * (s_beta_s ** 8), ])


    coefficients_array = np.array([0.4549693796915666, 0.0157829306682663, 0.016315288434923175, 0.01340475477320478, 0.008094622843757874, 0.01199669746825981, 0.01283835375706317, 0.01283401655300524, -0.014016598401805226, -0.011043536968041005, 0.0064522636221585935, 0.010084768779932538, 0.006243529760976929, -0.010817530580012785, 0.010229834277435838, -0.008976511649605036, -0.01069490220803517, 0.008915898147507303, 0.003580959168231209, 0.006757959914492086, -0.007343575982551637, -0.009737447570189826, 0.008718398937916715, -0.008436322916779057, -0.004739393707476505, -0.008187670672738415, 0.008621850925503362, -0.002810049707841068, -0.008114182528457413, 0.006874550461597948, -0.006009195398519346, -0.007883149512947505, 0.002187261941296566, -0.0021559647802329427, -0.008396223213702725, 0.006887727893713505, -0.005987500424080517, 0.0048711133159374965, -0.0018243817258697728, -0.0070766947828835875, 0.002948914123613555, 0.005744056923445222, -0.00471371607205339, -0.005624570218836997, 0.006174913642365553, -0.005473708926458434, -0.007677556447342287, 0.0031749205122804285, -0.0047395798023714035, -0.004276370484006816, -0.005620375182626013, 0.005695558002552761, 0.004216502828486825, 0.005333336262310917, -0.004797817906305338, -0.00545342974587858, -0.0035726593126961157, 0.0052774888275614745, -0.0020009938857231137, -0.005337974811965141, -0.00535799221695193, -0.0012805462074015523, 0.0032782985328823236, -0.004955152859697061, -0.0026723683862175753, -0.005276235122731209, -0.0018472696122313614, -0.003577385020673447, -0.005104860302945736, -0.006495502493900831, 0.003645954722864203, -0.004764511438303148, 0.005130884450967877, 0.004423630472694418, 0.0012984540011182755, -0.004224786667386964, -0.002845299398368518, 0.003197040905692689, -0.004178112938788711, -0.004901708419186285, -0.0049594019484032695, -0.00536509560853002, 0.004289307071860701, -0.004481524131641494, 0.0029148394255067746, -0.005649902193136233, 0.0013934169647518483, 0.0022753766018755216, 0.005132056900783783, 0.004501556241956973, -0.002832980304254846, -0.00513486793613353, 0.0054360676345283155, 0.0037337329589475945, 0.0029809704421861626, -0.004212965687034566, 0.0012563557965658205, -0.0029768660454500308, -0.005297218413552147, 0.0031292923856081917, 0.005326755147052677, -0.002977621018602623, 0.0038746060898104365, 0.002213282562957426, -0.002969826077357946, -0.0005593882841914197, 0.004921496782904176, 0.0005480620868163892, -0.004233143141538831, 0.0017074638160620615, -0.0005162184764505703, 0.0017301154090497073, -0.0005129595253949254, 0.0005099689979083747, -0.002935984092044604, -0.002453119862106517, -0.0030292903737930686, -0.0026554391797558377, -0.004353602140199968, 0.004526236488741828, 0.0017598332039703984, -0.00048438850269626454, 0.0011448369071301915, 0.0011520478043984008, -0.002469112878570646, 0.002988312237016939, -0.002223769932512678, -0.00046193150711662615, -0.003836885976424168, -0.0009692042806283279, 0.0030365792102927157, -0.0028233974329287073, 0.0004215264097477824, -0.0015214224570995404, -0.0038064876813938917, -0.001276232982660497, 0.0035079163879183336, 0.0022090182385926128, -0.0012750719664227845, 0.0019831420207135626, 0.0029227659365562665, 0.0014867484947398708, 0.0014829552902432953, 0.0015965942211052118, -0.0003894459496157685, 0.0014804710845560509, 0.0026789346587889297, 0.0029432937486282107, -0.0024910643887845357, 0.002822573834408339, -0.00035721177147318006, -0.001964447353345522, 0.0012902099102215286, -0.0008425378503642786, -0.003005220003174109, 0.001395124413164013, 0.0018805787731045742, 0.002004232504537717, 0.0025920354329765655, 0.00030282803518908667, -0.0015150420252551323, 0.001121854342593254, 0.0013806419932472396, 0.0015262379685382303, -0.001199859672160892, 0.0002766056571815604, 0.0015191094275316054, 0.0022005037456348333, 0.0008633818263849936, -0.0008875202648422566, 0.0008705927220338236, 0.001781996429169735, 0.0013979673626246577, -0.0009569267657762603, 0.0015343088500415368, 0.0022286410531758213, 0.0012388941087277262, ])


    return np.dot(coefficients_array, expressions_array)
@jit(nopython=True, cache=True)
def B_coefficients_truncated_shadow_True_single_ideal_optical_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([(s_harmonics_alpha[2] * s_harmonics_beta[1]), (s_harmonics_alpha[4] * s_harmonics_beta[1]), (s_harmonics_alpha[2] * s_harmonics_beta[3]), (s_harmonics_alpha[6] * s_harmonics_beta[1]), (s_harmonics_alpha[4] * s_harmonics_beta[3]), (s_harmonics_alpha[12] * s_harmonics_beta[1]), (s_harmonics_alpha[10] * s_harmonics_beta[1]), (s_harmonics_alpha[8] * s_harmonics_beta[1]), (s_harmonics_alpha[4] * s_harmonics_beta[5]), (s_harmonics_alpha[2] * s_harmonics_beta[5]), (s_harmonics_alpha[6] * s_harmonics_beta[3]), (s_harmonics_alpha[14] * s_harmonics_beta[1]), (s_harmonics_alpha[4] * s_harmonics_beta[7]), (s_harmonics_alpha[2] * s_harmonics_beta[7]), (s_harmonics_alpha[2] * s_harmonics_beta[9]), (s_harmonics_alpha[6] * s_harmonics_beta[5]), (s_harmonics_alpha[10] * s_harmonics_beta[11]), (s_harmonics_alpha[10] * s_harmonics_beta[13]), (s_harmonics_alpha[12] * s_harmonics_beta[9]), (s_harmonics_alpha[2] * s_harmonics_beta[11]), (s_harmonics_alpha[4] * s_harmonics_beta[9]), (s_harmonics_alpha[10] * s_harmonics_beta[9]), (s_harmonics_alpha[8] * s_harmonics_beta[15]), (s_harmonics_alpha[12] * s_harmonics_beta[11]), (s_harmonics_alpha[6] * s_harmonics_beta[7]), (s_harmonics_alpha[12] * s_harmonics_beta[7]), (s_harmonics_alpha[10] * s_harmonics_beta[15]), (s_harmonics_alpha[14] * s_harmonics_beta[13]), (s_harmonics_alpha[8] * s_harmonics_beta[3]), (s_harmonics_alpha[8] * s_harmonics_beta[13]), (s_harmonics_alpha[10] * s_harmonics_beta[3]), (s_harmonics_alpha[14] * s_harmonics_beta[5]), (s_harmonics_alpha[6] * s_harmonics_beta[11]), (s_harmonics_alpha[8] * s_harmonics_beta[5]), (s_harmonics_alpha[14] * s_harmonics_beta[7]), (s_harmonics_alpha[2] * s_harmonics_beta[13]), (s_harmonics_alpha[12] * s_harmonics_beta[5]), (s_harmonics_alpha[4] * s_harmonics_beta[11]), (s_harmonics_alpha[4] * s_harmonics_beta[15]), (s_harmonics_alpha[10] * s_harmonics_beta[5]), (s_harmonics_alpha[12] * s_harmonics_beta[13]), (s_harmonics_alpha[10] * s_harmonics_beta[7]), (s_harmonics_alpha[14] * s_harmonics_beta[15]), (s_harmonics_alpha[12] * s_harmonics_beta[3]), (s_harmonics_alpha[14] * s_harmonics_beta[3]), (s_harmonics_alpha[14] * s_harmonics_beta[9]), (s_harmonics_alpha[6] * s_harmonics_beta[15]), (s_harmonics_alpha[6] * s_harmonics_beta[13]), (s_harmonics_alpha[11] * s_harmonics_beta[9]), (s_harmonics_alpha[15] * s_harmonics_beta[11]), (s_harmonics_alpha[8] * s_harmonics_beta[9]), (s_harmonics_alpha[3] * s_harmonics_beta[11]), (s_harmonics_alpha[11] * s_harmonics_beta[3]), (s_harmonics_alpha[14] * s_harmonics_beta[11]), (s_harmonics_alpha[1] * s_harmonics_beta[15]), (s_harmonics_alpha[3] * s_harmonics_beta[13]), ])


    coefficients_array = np.array([-0.2349973368763135, 0.011918807308041656, -0.007723797840762084, -0.005278969874839671, 0.004776676540470666, 0.0043182291805599765, -0.004256228050754051, 0.0035545840508298264, -0.002988937035559901, 0.002650601080703246, -0.0023906503304674353, -0.002272052311479019, 0.0020734790629611186, -0.0020552138018271045, 0.0019992981782536684, 0.0019233676735125492, -0.0017165242613443649, 0.0016551120162785148, -0.00144395563711923, -0.001377605197979166, -0.0013421795297504247, 0.0012195339948399256, 0.0012081592015047856, 0.0011460381861915553, -0.000922781390798886, 0.000912111671381309, -0.0008706840274708004, -0.000739677276496756, 0.0007244149541580226, -0.000703051625662603, 0.0006768192296929542, 0.0006318824205131784, 0.0006187008722703245, -0.0005680702157098813, -0.0005360954834800087, 0.0005231347880448297, -0.0005259257283374918, 0.00048131515191039616, -0.0004778158419482519, -0.0004575062338490818, -0.0004496281949824188, -0.00044549788965012337, 0.0004139893801723528, -0.00036070121777386405, -0.0003486837140917836, 0.00027390314202974976, -0.00027780997848156477, -0.0002684272434761384, 0.0002382114066807899, 0.00024090399859571168, -0.00023272603974663032, -0.00022723240714464166, 0.0002265143680207727, 0.0002104181855974388, -0.00020594907634522108, 0.00020083585459600874, ])


    return np.dot(coefficients_array, expressions_array)
@jit(nopython=True, cache=True)
def C_coefficients_truncated_shadow_True_single_ideal_optical_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([1, (s_alpha_s ** 2), (c_harmonics_alpha[2] * c_harmonics_beta[4]), (s_alpha_s ** 4), (s_beta_s ** 2), (s_alpha_s ** 6), (s_alpha_s ** 8), (s_alpha_s ** 2) * (s_beta_s ** 2), (s_alpha_s ** 14), (c_alpha_s ** 2) * (c_beta_s ** 2), (c_harmonics_alpha[4] * c_harmonics_beta[2]), (s_alpha_s ** 10), (s_beta_s ** 4), (c_alpha_s ** 4) * (c_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 2), (c_alpha_s ** 2) * (c_beta_s ** 4), (c_alpha_s ** 6) * (c_beta_s ** 2), (s_alpha_s ** 2) * (s_beta_s ** 4), (c_harmonics_alpha[2] * c_harmonics_beta[2]), (s_beta_s ** 14), (c_alpha_s ** 4) * (s_beta_s ** 2), (c_alpha_s ** 8) * (c_beta_s ** 2), (s_alpha_s ** 6) * (s_beta_s ** 2), (c_alpha_s ** 6) * (s_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 2), (c_alpha_s ** 4) * (c_beta_s ** 4), (s_alpha_s ** 8) * (s_beta_s ** 2), (c_harmonics_alpha[6] * c_harmonics_beta[2]), (c_alpha_s ** 8) * (s_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 4), (c_alpha_s ** 2) * (c_beta_s ** 6), (c_alpha_s ** 6) * (c_beta_s ** 4), (c_harmonics_alpha[4] * c_harmonics_beta[4]), (c_harmonics_alpha[6] * c_harmonics_beta[4]), (s_alpha_s ** 14) * (c_beta_s ** 2), (s_alpha_s ** 10) * (s_beta_s ** 2), (c_alpha_s ** 10) * (c_beta_s ** 2), (s_alpha_s ** 2) * (s_beta_s ** 6), (c_harmonics_alpha[4] * c_harmonics_beta[6]), (c_alpha_s ** 8) * (c_beta_s ** 4), (s_alpha_s ** 2) * (c_beta_s ** 2), (s_alpha_s ** 6) * (s_beta_s ** 4), (c_alpha_s ** 4) * (s_beta_s ** 4), (c_alpha_s ** 6) * (s_beta_s ** 4), (c_alpha_s ** 14) * (s_beta_s ** 2), (c_alpha_s ** 4) * (c_beta_s ** 6), (s_alpha_s ** 14) * (c_beta_s ** 4), (s_alpha_s ** 4) * (c_beta_s ** 2), (c_alpha_s ** 10) * (s_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 8), (s_alpha_s ** 14) * (s_beta_s ** 2), (s_alpha_s ** 8) * (s_beta_s ** 4), (s_alpha_s ** 8) * (c_beta_s ** 2), (c_alpha_s ** 14) * (c_beta_s ** 2), (c_alpha_s ** 4) * (s_beta_s ** 6), (c_alpha_s ** 8) * (s_beta_s ** 4), (c_alpha_s ** 2) * (s_beta_s ** 6), (s_alpha_s ** 2) * (s_beta_s ** 14), (s_beta_s ** 8), (c_alpha_s ** 6) * (c_beta_s ** 6), (c_alpha_s ** 6) * (s_beta_s ** 6), (c_harmonics_alpha[2] * c_harmonics_beta[6]), (s_alpha_s ** 6) * (c_beta_s ** 2), (c_alpha_s ** 4) * (s_beta_s ** 8), (c_alpha_s ** 2) * (s_beta_s ** 4), (c_alpha_s ** 6) * (s_beta_s ** 8), (s_beta_s ** 10), (c_alpha_s ** 2) * (s_beta_s ** 10), (c_alpha_s ** 8) * (s_beta_s ** 6), (s_alpha_s ** 14) * (c_beta_s ** 6), (s_alpha_s ** 4) * (s_beta_s ** 6), (c_alpha_s ** 8) * (c_beta_s ** 6), (c_alpha_s ** 14) * (s_beta_s ** 4), (s_alpha_s ** 10) * (s_beta_s ** 4), (s_beta_s ** 6), (c_alpha_s ** 10) * (c_beta_s ** 4), (c_alpha_s ** 2) * (c_beta_s ** 8), (s_alpha_s ** 10) * (c_beta_s ** 2), (c_alpha_s ** 4) * (s_beta_s ** 10), (s_alpha_s ** 14) * (s_beta_s ** 4), (c_alpha_s ** 8) * (s_beta_s ** 8), (s_alpha_s ** 14) * (s_beta_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 4), (c_alpha_s ** 6) * (s_beta_s ** 10), (s_alpha_s ** 2) * (s_beta_s ** 12), (s_alpha_s ** 14) * (s_beta_s ** 8), (s_beta_s ** 12), (s_alpha_s ** 2) * (s_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 6), (c_alpha_s ** 4) * (c_beta_s ** 8), (s_alpha_s ** 14) * (c_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 10), (s_alpha_s ** 4) * (s_beta_s ** 14), (s_alpha_s ** 6) * (s_beta_s ** 6), (c_alpha_s ** 8) * (s_beta_s ** 10), (s_alpha_s ** 12), (c_alpha_s ** 10) * (s_beta_s ** 4), (s_alpha_s ** 14) * (s_beta_s ** 10), (s_alpha_s ** 8) * (s_beta_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 12), (c_alpha_s ** 6) * (c_beta_s ** 8), (c_alpha_s ** 14) * (s_beta_s ** 6), (s_alpha_s ** 12) * (s_beta_s ** 2), (c_alpha_s ** 10) * (s_beta_s ** 6), (c_harmonics_alpha[6] * c_harmonics_beta[10]), (c_alpha_s ** 14) * (c_beta_s ** 14), (c_harmonics_alpha[4] * c_harmonics_beta[10]), (s_alpha_s ** 14) * (c_beta_s ** 10), (s_alpha_s ** 2) * (c_beta_s ** 10), (c_harmonics_alpha[10] * c_harmonics_beta[4]), (s_alpha_s ** 2) * (s_beta_s ** 10), (c_harmonics_alpha[8] * c_harmonics_beta[14]), (c_harmonics_alpha[6] * c_harmonics_beta[14]), (c_alpha_s ** 6) * (s_beta_s ** 12), (c_alpha_s ** 4) * (s_beta_s ** 12), (c_alpha_s ** 10) * (s_beta_s ** 8), (c_alpha_s ** 8) * (c_beta_s ** 8), (s_alpha_s ** 14) * (s_beta_s ** 12), (c_alpha_s ** 14) * (s_beta_s ** 14), (s_alpha_s ** 2) * (c_beta_s ** 12), (c_harmonics_alpha[8] * c_harmonics_beta[8]), (c_alpha_s ** 5) * (c_beta_s ** 2), (c_alpha_s ** 5) * (s_beta_s ** 2), (c_alpha_s ** 10) * (c_beta_s ** 6), (s_alpha_s ** 6) * (s_beta_s ** 14), (s_alpha_s ** 12) * (c_beta_s ** 4), (c_harmonics_alpha[4] * c_harmonics_beta[12]), (s_alpha_s ** 14) * (c_beta_s ** 12), (s_alpha_s ** 2) * (c_beta_s ** 4), (c_alpha_s ** 14) * (s_beta_s ** 8), (c_alpha_s ** 8) * (s_beta_s ** 12), (c_harmonics_alpha[8] * c_harmonics_beta[12]), (c_alpha_s ** 2) * (s_beta_s ** 12), (s_alpha_s ** 14) * (c_beta_s ** 14), (c_alpha_s ** 9) * (c_beta_s ** 2), (c_alpha_s ** 14) * (s_beta_s ** 12), (s_alpha_s ** 10) * (s_beta_s ** 6), (c_alpha_s ** 9) * (s_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 12), (s_alpha_s ** 8) * (s_beta_s ** 14), (c_alpha_s ** 13) * (c_beta_s ** 2), (c_alpha_s ** 13) * (s_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 8), (c_harmonics_alpha[10] * c_harmonics_beta[12]), (c_alpha_s ** 2) * (s_beta_s ** 14), (c_alpha_s ** 12) * (c_beta_s ** 10), (c_alpha_s ** 14) * (s_beta_s ** 10), (c_alpha_s ** 10) * (s_beta_s ** 10), (c_alpha_s ** 12) * (c_beta_s ** 12), (c_harmonics_alpha[2] * c_harmonics_beta[8]), (s_alpha_s ** 12) * (c_beta_s ** 6), (s_alpha_s ** 8) * (c_beta_s ** 4), (s_alpha_s ** 2) * (c_beta_s ** 6), (s_alpha_s ** 14) * (s_beta_s ** 14), (s_alpha_s ** 4) * (c_beta_s ** 10), (s_alpha_s ** 8) * (c_beta_s ** 10), (c_alpha_s ** 12) * (c_beta_s ** 8), (c_alpha_s ** 12) * (c_beta_s ** 14), (c_harmonics_alpha[14] * c_harmonics_beta[2]), (c_alpha_s ** 6) * (c_beta_s ** 10), (s_alpha_s ** 2) * (c_beta_s ** 14), (s_alpha_s ** 4) * (c_beta_s ** 12), (s_alpha_s ** 8) * (c_beta_s ** 8), (c_alpha_s ** 4) * (c_beta_s ** 10), ])


    coefficients_array = np.array([0.545030620308573, -0.015782930668555614, -0.016315288434898812, -0.013404754773311477, -0.008094622843758335, -0.011996697468191393, -0.012838353757033127, -0.012834016553140646, 0.014016598401767428, 0.011043536967901864, -0.006452263622202979, -0.010084768779922374, -0.006243529760937367, 0.01081753057990636, -0.010229834277421343, 0.008976511649599162, 0.010694902208078724, -0.008915898147401086, -0.0035809591682689937, -0.00675795991429564, 0.007343575982504939, 0.009737447570207095, -0.008718398937836354, 0.008436322916759616, 0.004739393707564046, 0.008187670672788125, -0.008621850925422715, 0.0028100497078589193, 0.00811418252845637, -0.006874550461515206, 0.0060091953985765825, 0.007883149512880912, -0.0021872619412653745, 0.0021559647802220265, 0.008396223213681355, -0.006887727893632892, 0.005987500424189218, -0.004871113315708479, 0.001824381725869464, 0.00707669478275544, -0.002948914123426262, -0.005744056923574233, 0.0047137160722190916, 0.005624570218742206, -0.006174913642419517, 0.00547370892650731, 0.007677556447279719, -0.003174920512280771, 0.004739579802372483, 0.004276370483939851, 0.005620375182606345, -0.005695558002496655, -0.004216502828587033, -0.005333336262362128, 0.004797817906199933, 0.005453429745967576, 0.003572659312653206, -0.005277488827828722, 0.0020009938857680513, 0.005337974811953975, 0.005357992216916615, 0.0012805462073713265, -0.00327829853295027, 0.0049551528596921595, 0.00267236838606362, 0.005276235122658233, 0.0018472696122837037, 0.0035773850206525007, 0.005104860302979138, 0.006495502493844497, -0.0036459547227082273, 0.004764511438315379, -0.005130884450944988, -0.004423630472862413, -0.0012984540012170385, 0.004224786667264647, 0.002845299398238968, -0.003197040905706252, 0.004178112938891832, 0.004901708419206306, 0.004959401948444057, 0.005365095608544035, -0.0042893070717308895, 0.004481524131613416, -0.002914839425588216, 0.005649902193113237, -0.0013934169647672704, -0.0022753766018705967, -0.005132056900763379, -0.004501556241903963, 0.002832980304280705, 0.005134867936108287, -0.00543606763450633, -0.00373373295894276, -0.0029809704422890915, 0.004212965687004769, -0.0012563557964440596, 0.002976866045482025, 0.005297218413461792, -0.003129292385873732, -0.0053267551469983205, 0.0029776210186365447, -0.0038746060899248545, -0.00221328256310338, 0.0029698260773375522, 0.0005593882841911837, -0.004921496782897538, -0.0005480620868161871, 0.004233143141540367, -0.001707463815898232, 0.0005162184764500164, -0.0017301154089348542, 0.0005129595253949303, -0.0005099689979083702, 0.0029359840919433514, 0.002453119861976871, 0.003029290373808025, 0.0026554391798106077, 0.004353602140172819, -0.004526236488689874, -0.0017598332039805832, 0.0004843885026966199, -0.0011448369070796707, -0.0011520478044581796, 0.002469112878612242, -0.0029883122369796494, 0.002223769932782314, 0.0004619315071166655, 0.0038368859763557154, 0.00096920428058728, -0.003036579210239205, 0.002823397432992427, -0.00042152640974777133, 0.0015214224570103915, 0.0038064876813661765, 0.0012762329826864806, -0.0035079163879599994, -0.0022090182385319864, 0.00127507196638325, -0.0019831420207275055, -0.0029227659365957588, -0.0014867484947283837, -0.0014829552902626524, -0.0015965942211599393, 0.00038944594961575624, -0.0014804710845038446, -0.0026789346589027587, -0.0029432937487637247, 0.0024910643887822953, -0.0028225738344523927, 0.0003572117714653639, 0.0019644473534035376, -0.0012902099102107324, 0.0008425378503785317, 0.003005220003232259, -0.0013951244131895995, -0.0018805787731174396, -0.002004232504564183, -0.002592035433004016, -0.0003028280351891221, 0.001515042025278597, -0.0011218543426077018, -0.001380641993238184, -0.0015262379685110745, 0.0011998596720944603, ])


    return np.dot(coefficients_array, expressions_array)
@jit(nopython=True, cache=True)
def D_coefficients_truncated_shadow_True_single_ideal_optical_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([(c_alpha_s ** 1), (c_alpha_s ** 1) * (c_beta_s ** 2), (c_alpha_s ** 1) * (s_beta_s ** 2), (c_harmonics_alpha[1] * c_harmonics_beta[4]), (c_alpha_s ** 1) * (c_beta_s ** 4), (c_alpha_s ** 1) * (s_beta_s ** 4), (c_alpha_s ** 1) * (c_beta_s ** 6), (c_alpha_s ** 1) * (s_beta_s ** 6), (c_alpha_s ** 1) * (c_beta_s ** 8), (c_harmonics_alpha[3] * c_harmonics_beta[4]), (c_alpha_s ** 1) * (s_beta_s ** 8), (c_harmonics_alpha[3] * c_harmonics_beta[2]), (c_alpha_s ** 1) * (c_beta_s ** 10), (c_alpha_s ** 3) * (s_beta_s ** 2), (c_alpha_s ** 3) * (c_beta_s ** 2), (c_alpha_s ** 1) * (s_beta_s ** 10), (c_alpha_s ** 1) * (c_beta_s ** 12), (c_alpha_s ** 1) * (s_beta_s ** 12), (c_alpha_s ** 1) * (c_beta_s ** 14), (c_alpha_s ** 3) * (s_beta_s ** 4), (c_alpha_s ** 3) * (c_beta_s ** 4), (c_alpha_s ** 5) * (s_beta_s ** 2), (c_alpha_s ** 5) * (c_beta_s ** 2), (c_alpha_s ** 1) * (s_beta_s ** 14), (c_alpha_s ** 3) * (s_beta_s ** 6), (c_alpha_s ** 3) * (c_beta_s ** 6), (c_alpha_s ** 3) * (s_beta_s ** 8), (c_alpha_s ** 3) * (c_beta_s ** 8), (c_harmonics_alpha[1] * c_harmonics_beta[2]), (c_harmonics_alpha[5] * c_harmonics_beta[2]), (c_alpha_s ** 3) * (s_beta_s ** 10), (c_alpha_s ** 3) * (c_beta_s ** 10), (c_alpha_s ** 3) * (c_beta_s ** 12), (c_alpha_s ** 3) * (s_beta_s ** 12), (c_alpha_s ** 3) * (c_beta_s ** 14), (c_alpha_s ** 3) * (s_beta_s ** 14), (c_harmonics_alpha[5] * c_harmonics_beta[4]), (c_alpha_s ** 5) * (s_beta_s ** 4), (c_alpha_s ** 5) * (c_beta_s ** 4), (c_alpha_s ** 7) * (s_beta_s ** 2), (c_alpha_s ** 7) * (c_beta_s ** 2), (c_alpha_s ** 13) * (s_beta_s ** 2), (c_alpha_s ** 13) * (c_beta_s ** 2), (c_alpha_s ** 5) * (s_beta_s ** 6), (c_alpha_s ** 5) * (c_beta_s ** 6), (c_harmonics_alpha[11] * c_harmonics_beta[2]), (c_harmonics_alpha[1] * c_harmonics_beta[8]), (c_harmonics_alpha[9] * c_harmonics_beta[2]), (c_harmonics_alpha[13] * c_harmonics_beta[2]), (c_harmonics_alpha[3] * c_harmonics_beta[6]), (c_harmonics_alpha[5] * c_harmonics_beta[8]), (c_harmonics_alpha[7] * c_harmonics_beta[2]), (c_alpha_s ** 9) * (c_beta_s ** 4), (c_harmonics_alpha[1] * c_harmonics_beta[6]), (c_alpha_s ** 9) * (c_beta_s ** 6), (c_alpha_s ** 7) * (s_beta_s ** 4), (c_alpha_s ** 5) * (s_beta_s ** 8), (c_alpha_s ** 13) * (s_beta_s ** 4), (c_alpha_s ** 9) * (c_beta_s ** 8), (c_harmonics_alpha[5] * c_harmonics_beta[6]), (c_harmonics_alpha[3] * c_harmonics_beta[10]), (c_alpha_s ** 5) * (c_beta_s ** 8), (c_alpha_s ** 9) * (c_beta_s ** 2), (c_alpha_s ** 9) * (c_beta_s ** 10), (c_alpha_s ** 11) * (c_beta_s ** 4), (c_alpha_s ** 11) * (c_beta_s ** 6), (c_alpha_s ** 9) * (s_beta_s ** 6), (c_alpha_s ** 9) * (c_beta_s ** 12), (c_alpha_s ** 7) * (c_beta_s ** 4), (c_alpha_s ** 9) * (s_beta_s ** 4), (c_alpha_s ** 9) * (s_beta_s ** 8), (c_alpha_s ** 11) * (c_beta_s ** 8), (c_harmonics_alpha[7] * c_harmonics_beta[6]), (c_alpha_s ** 13) * (c_beta_s ** 4), (c_alpha_s ** 9) * (c_beta_s ** 14), (c_alpha_s ** 9) * (s_beta_s ** 10), 1, (c_alpha_s ** 11) * (c_beta_s ** 2), (c_alpha_s ** 11) * (c_beta_s ** 10), (c_alpha_s ** 9) * (s_beta_s ** 12), (c_harmonics_alpha[7] * c_harmonics_beta[12]), (c_alpha_s ** 11) * (c_beta_s ** 12), (c_alpha_s ** 11) * (s_beta_s ** 6), (c_alpha_s ** 9) * (s_beta_s ** 14), (c_alpha_s ** 11) * (s_beta_s ** 8), (c_alpha_s ** 11) * (s_beta_s ** 4), (s_alpha_s ** 8), (c_alpha_s ** 11) * (c_beta_s ** 14), (c_alpha_s ** 5) * (s_beta_s ** 10), (c_harmonics_alpha[11] * c_harmonics_beta[12]), (s_alpha_s ** 2), (c_alpha_s ** 11) * (s_beta_s ** 10), (c_alpha_s ** 9) * (s_beta_s ** 2), (c_harmonics_alpha[9] * c_harmonics_beta[14]), (c_harmonics_alpha[7] * c_harmonics_beta[10]), (c_harmonics_alpha[11] * c_harmonics_beta[14]), (c_alpha_s ** 11) * (s_beta_s ** 12), (c_alpha_s ** 5) * (c_beta_s ** 10), (c_harmonics_alpha[1] * c_harmonics_beta[10]), (c_alpha_s ** 11) * (s_beta_s ** 14), (c_alpha_s ** 13) * (s_beta_s ** 6), (s_alpha_s ** 4), (c_harmonics_alpha[5] * c_harmonics_beta[14]), (c_alpha_s ** 11) * (s_beta_s ** 2), (c_harmonics_alpha[15] * c_harmonics_beta[10]), (c_harmonics_alpha[11] * c_harmonics_beta[10]), (c_alpha_s ** 5) * (s_beta_s ** 12), (c_harmonics_alpha[15] * c_harmonics_beta[12]), (c_harmonics_alpha[15] * c_harmonics_beta[2]), (c_harmonics_alpha[13] * c_harmonics_beta[6]), (c_alpha_s ** 14) * (c_beta_s ** 2), (c_alpha_s ** 14) * (s_beta_s ** 2), (c_harmonics_alpha[13] * c_harmonics_beta[8]), (c_alpha_s ** 7) * (s_beta_s ** 6), (s_alpha_s ** 14), (c_harmonics_alpha[15] * c_harmonics_beta[6]), (c_harmonics_alpha[5] * c_harmonics_beta[12]), (c_alpha_s ** 13) * (c_beta_s ** 6), (c_alpha_s ** 5) * (c_beta_s ** 12), (c_harmonics_alpha[3] * c_harmonics_beta[8]), (c_harmonics_alpha[3] * c_harmonics_beta[12]), (c_harmonics_alpha[1] * c_harmonics_beta[12]), (s_alpha_s ** 10), (c_alpha_s ** 7) * (c_beta_s ** 14), (c_harmonics_alpha[11] * c_harmonics_beta[8]), (c_alpha_s ** 10) * (c_beta_s ** 2), (c_alpha_s ** 10) * (s_beta_s ** 2), (c_alpha_s ** 13) * (s_beta_s ** 8), (c_alpha_s ** 5) * (s_beta_s ** 14), (c_alpha_s ** 7) * (c_beta_s ** 12), (c_alpha_s ** 8) * (c_beta_s ** 2), (c_harmonics_alpha[15] * c_harmonics_beta[14]), (c_alpha_s ** 8) * (s_beta_s ** 2), (c_harmonics_alpha[3] * c_harmonics_beta[14]), (s_alpha_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 4), (c_harmonics_alpha[11] * c_harmonics_beta[4]), (c_alpha_s ** 14) * (s_beta_s ** 4), (c_harmonics_alpha[15] * c_harmonics_beta[4]), (c_alpha_s ** 7) * (c_beta_s ** 10), (c_harmonics_alpha[11] * c_harmonics_beta[6]), (c_harmonics_alpha[13] * c_harmonics_beta[4]), (c_alpha_s ** 5) * (c_beta_s ** 14), (c_harmonics_alpha[9] * c_harmonics_beta[8]), (c_alpha_s ** 7) * (s_beta_s ** 14), (c_alpha_s ** 7) * (c_beta_s ** 6), (c_harmonics_alpha[7] * c_harmonics_beta[4]), (c_harmonics_alpha[13] * c_harmonics_beta[10]), (s_alpha_s ** 8) * (c_beta_s ** 2), (s_alpha_s ** 8) * (s_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 2), (c_alpha_s ** 10) * (c_beta_s ** 4), (c_alpha_s ** 13) * (s_beta_s ** 10), (s_alpha_s ** 2) * (s_beta_s ** 2), (c_alpha_s ** 2) * (c_beta_s ** 2), (s_alpha_s ** 2) * (c_beta_s ** 2), (c_alpha_s ** 10) * (s_beta_s ** 4), (c_alpha_s ** 14) * (s_beta_s ** 6), (c_alpha_s ** 14) * (c_beta_s ** 6), (c_alpha_s ** 7) * (s_beta_s ** 12), (c_alpha_s ** 8) * (c_beta_s ** 4), (c_alpha_s ** 8) * (s_beta_s ** 4), (c_alpha_s ** 13) * (c_beta_s ** 8), (c_harmonics_alpha[9] * c_harmonics_beta[12]), (c_harmonics_alpha[9] * c_harmonics_beta[10]), (c_harmonics_alpha[10] * c_harmonics_beta[2]), (s_alpha_s ** 4) * (c_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 2), (s_alpha_s ** 12), (c_alpha_s ** 2) * (c_beta_s ** 14), (c_alpha_s ** 14) * (s_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 8), (c_alpha_s ** 4) * (s_beta_s ** 2), (c_alpha_s ** 4) * (c_beta_s ** 2), (c_alpha_s ** 10) * (c_beta_s ** 6), (c_harmonics_alpha[4] * c_harmonics_beta[14]), (s_beta_s ** 14), (c_harmonics_alpha[6] * c_harmonics_beta[12]), (c_alpha_s ** 10) * (s_beta_s ** 6), (c_alpha_s ** 8) * (c_beta_s ** 6), (c_harmonics_alpha[13] * c_harmonics_beta[14]), (c_harmonics_alpha[7] * c_harmonics_beta[8]), (c_alpha_s ** 2) * (s_beta_s ** 4), (c_harmonics_alpha[8] * c_harmonics_beta[2]), (c_alpha_s ** 2) * (c_beta_s ** 4), (c_alpha_s ** 8) * (s_beta_s ** 6), (s_alpha_s ** 8) * (c_beta_s ** 4), (s_alpha_s ** 8) * (s_beta_s ** 4), (s_alpha_s ** 14) * (c_beta_s ** 2), (s_alpha_s ** 14) * (s_beta_s ** 2), (c_harmonics_alpha[4] * c_harmonics_beta[4]), (s_beta_s ** 12), (c_alpha_s ** 10) * (c_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 10), (c_alpha_s ** 14) * (s_beta_s ** 10), (s_beta_s ** 10), (c_harmonics_alpha[12] * c_harmonics_beta[4]), (c_alpha_s ** 13) * (s_beta_s ** 12), (c_alpha_s ** 14) * (c_beta_s ** 14), (c_alpha_s ** 8) * (c_beta_s ** 8), (c_alpha_s ** 7) * (c_beta_s ** 8), (c_harmonics_alpha[2] * c_harmonics_beta[6]), (c_alpha_s ** 2) * (s_beta_s ** 6), (c_harmonics_alpha[2] * c_harmonics_beta[4]), (s_alpha_s ** 2) * (s_beta_s ** 4), (c_alpha_s ** 6) * (c_beta_s ** 2), (s_alpha_s ** 2) * (c_beta_s ** 4), (c_harmonics_alpha[14] * c_harmonics_beta[10]), (s_alpha_s ** 2) * (c_beta_s ** 10), (c_alpha_s ** 14) * (c_beta_s ** 12), (c_alpha_s ** 10) * (s_beta_s ** 8), (c_harmonics_alpha[14] * c_harmonics_beta[2]), (c_harmonics_alpha[9] * c_harmonics_beta[6]), (c_harmonics_alpha[4] * c_harmonics_beta[10]), (c_alpha_s ** 6) * (s_beta_s ** 2), (c_alpha_s ** 10) * (c_beta_s ** 10), (c_harmonics_alpha[8] * c_harmonics_beta[12]), (s_alpha_s ** 10) * (c_beta_s ** 2), (s_alpha_s ** 10) * (s_beta_s ** 2), (s_alpha_s ** 2) * (c_beta_s ** 8), ])


    coefficients_array = np.array([-0.44105092887338915, -0.22736642848772035, -0.21368450041076006, 0.12269910168921501, -0.15689767461247123, -0.14321574658733607, -0.12114669741113311, -0.10849797006783818, -0.09953755298917662, -0.039173580718946464, -0.0879220264338828, 0.0340066279374694, -0.08506674320600106, 0.057229525355191886, 0.0554697362147119, -0.0743495811460653, -0.07469354266714162, -0.06473990876257475, -0.06688694334136772, 0.05342098396539129, 0.05166119487289512, -0.04656491308793184, -0.04532111961254709, -0.05758329205455404, 0.05142140662410076, 0.0498522309840911, 0.04951404963579524, 0.04813548725168256, -0.013681928088292435, -0.013313164213125558, 0.0476664497538384, 0.04645120672367597, 0.04484347170088281, 0.04592268938494543, 0.043336601208381384, 0.04430253199068348, -0.008700391385812361, -0.02709148144014952, -0.025847688085953217, -0.0223107494674211, -0.020040934285366102, -0.023252572066940213, -0.02045853167818603, -0.017343566142918404, -0.016122171729285404, 0.003999583660507579, 0.0037945799537150997, -0.0036585532080004412, -0.0036117909103969715, -0.0033877551386539426, -0.0032420599721943513, 0.0031886184654944176, 0.011741218995593694, 0.0028492842566646723, 0.013798737091871316, -0.01035574174508184, -0.01173131133688246, -0.01309597874334846, 0.014707690659102572, 0.002612491957272365, -0.0025712895392155256, -0.010532315909642504, 0.007497098743577859, 0.015049080289549346, 0.01058080913282694, 0.012419875690667997, 0.011277825367869853, 0.015098350092556254, -0.008085926491997839, 0.009091223266088985, 0.012315862965584687, 0.013227218429371726, -0.002114315500092417, -0.010301938279002982, 0.014992326015030581, 0.012772899976110775, -0.0008197874122980947, 0.006760547085278587, 0.013526358038499088, 0.012924380470229098, -0.0018508010320552135, 0.013564612286458484, 0.00978505746053709, 0.012908922762307859, 0.010734529109400991, 0.007803862017915425, -0.0025548072115924264, 0.01346458394123113, -0.008186689240882948, 0.0016765700863367531, 0.0013465779747131, 0.011160479938602953, 0.004847103038140844, 0.0015428798325803103, 0.001504115380468319, -0.0014902859930087534, 0.011310227709594558, -0.007010487850630096, 0.0013936161842008964, 0.011308487410347304, -0.00794412322097745, 0.0014147076500246904, -0.0011988994680640144, 0.0039836000079390855, 0.001144457914501101, -0.0011053770914238707, -0.005798669630145594, -0.0011000655866129539, 0.0010863346304529234, 0.0010480692622950897, -0.00386860274137956, -0.003867237579029371, -0.0009737357802733594, -0.004329159251187333, 0.001882037635920101, -0.0009768759370374924, 0.000940760807705798, -0.005297200520389971, -0.004645657380120272, -0.0008631911728877036, 0.0008291076426835172, -0.0008227696051991889, -0.0013360880976790285, 0.005132105646354979, 0.0007757129420933265, 0.002448648553081124, 0.002436551782315603, -0.004983805961032981, -0.0041119359591627195, 0.004324777767367925, 0.0020643813986679833, 0.0007193945742897173, 0.002046330109394342, 0.0006837460068705355, -0.0008908962572801975, -0.0029358780303089683, -0.0005809610891753359, -0.0029345128777900015, 0.0005850720561788374, 0.0030874599455030494, -0.0005562050827379002, -0.0005440121404736005, -0.0029821108250256884, 0.0005108413702069265, 0.003298333842568069, -0.0021575011857956623, -0.0004644101506205237, 0.0004394859823900798, -0.001278140777010482, -0.001276666432785713, -0.0006838255295151215, 0.0017995313966822253, -0.0031273408732103384, 0.0006784941249375226, -0.0006627523790106675, 0.0006680837777892018, 0.0017874346092437371, -0.002490837842752201, -0.0024468283735247904, 0.0024196575057858576, 0.0015093057721976477, 0.0014912545008617514, -0.002484001026858188, -0.000374753483503705, -0.0003509814813740215, -0.0003358414678584755, 0.000703597372193996, 0.0007111102233810525, 0.000577488477448145, -0.0012019039278362393, -0.002162130020122676, -0.0020727459229397957, -0.0006512094183684258, -0.0006272387969763057, 0.001501737554460548, -0.000286751556712207, -0.0005574747283308396, -0.0002833914351881665, 0.00143611128309434, 0.0012617774294086408, -0.0002705583572327311, 0.00026447438920329763, -0.0005714830044737962, -0.0002598694426755111, -0.0005504098853184121, 0.001183707236830747, -0.0009768624823567203, -0.0009753881318292003, 0.0009403936630399231, 0.000941644004080761, -0.00023905609227492424, 0.0004321438971868193, 0.0013961075540587062, -0.0018037395508140317, -0.0018433133053851747, 0.0003882016504497513, -0.0002304563479955004, -0.0018886504197206297, -0.0020450702420483535, 0.001196642710604175, 0.0011243060718071577, -0.00022511383026252788, -0.000574402955023724, -0.00021946705236554584, 0.00048162554032561315, 0.0005588575896396097, 0.0004712151914422997, -0.00021572021019759452, 0.0007104638074535105, -0.0017807125114561533, 0.0012769518443989797, -0.0002100449990957755, 0.00021146126886692658, -0.00020898910495340225, 0.000536427701682731, 0.0013306484919701034, -0.00020216560530877877, -0.0006686120950358755, -0.0006674760008949772, 0.0005880475502673171, ])


    return np.dot(coefficients_array, expressions_array)
@jit(nopython=True, cache=True)
def E_coefficients_truncated_shadow_True_single_ideal_optical_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([(s_alpha_s ** 1) * (s_beta_s ** 1), (s_harmonics_alpha[1] * s_harmonics_beta[3]), (s_harmonics_alpha[3] * s_harmonics_beta[1]), (s_alpha_s ** 3) * (s_beta_s ** 1), (s_alpha_s ** 1) * (s_beta_s ** 3), (s_alpha_s ** 5) * (s_beta_s ** 1), (s_alpha_s ** 1) * (s_beta_s ** 5), (s_harmonics_alpha[5] * s_harmonics_beta[1]), (s_alpha_s ** 7) * (s_beta_s ** 1), (s_alpha_s ** 3) * (s_beta_s ** 3), (s_alpha_s ** 1) * (s_beta_s ** 7), (s_harmonics_alpha[1] * s_harmonics_beta[5]), (s_harmonics_alpha[3] * s_harmonics_beta[3]), (s_alpha_s ** 9) * (s_beta_s ** 1), (s_alpha_s ** 1) * (s_beta_s ** 9), (s_alpha_s ** 11) * (s_beta_s ** 1), (s_alpha_s ** 1) * (s_beta_s ** 11), (s_alpha_s ** 13) * (s_beta_s ** 1), (s_alpha_s ** 5) * (s_beta_s ** 3), (s_alpha_s ** 3) * (s_beta_s ** 5), (s_alpha_s ** 1) * (s_beta_s ** 13), (s_alpha_s ** 7) * (s_beta_s ** 3), (s_alpha_s ** 3) * (s_beta_s ** 7), (s_harmonics_alpha[7] * s_harmonics_beta[1]), (s_harmonics_alpha[1] * s_harmonics_beta[7]), (s_alpha_s ** 5) * (s_beta_s ** 5), (s_alpha_s ** 9) * (s_beta_s ** 3), (s_alpha_s ** 3) * (s_beta_s ** 9), (s_harmonics_alpha[3] * s_harmonics_beta[5]), (s_alpha_s ** 11) * (s_beta_s ** 3), (s_alpha_s ** 3) * (s_beta_s ** 11), (s_alpha_s ** 7) * (s_beta_s ** 5), (s_alpha_s ** 13) * (s_beta_s ** 3), (s_alpha_s ** 5) * (s_beta_s ** 7), (s_harmonics_alpha[13] * s_harmonics_beta[1]), (s_alpha_s ** 11) * (s_beta_s ** 13), (s_alpha_s ** 13) * (s_beta_s ** 11), (s_alpha_s ** 11) * (s_beta_s ** 11), (s_alpha_s ** 3) * (s_beta_s ** 13), (s_alpha_s ** 13) * (s_beta_s ** 13), (s_alpha_s ** 9) * (s_beta_s ** 13), (s_alpha_s ** 13) * (s_beta_s ** 9), (s_alpha_s ** 9) * (s_beta_s ** 11), (s_alpha_s ** 11) * (s_beta_s ** 9), (s_harmonics_alpha[9] * s_harmonics_beta[9]), (s_alpha_s ** 7) * (s_beta_s ** 13), (s_harmonics_alpha[15] * s_harmonics_beta[1]), (s_harmonics_alpha[9] * s_harmonics_beta[1]), (s_harmonics_alpha[5] * s_harmonics_beta[3]), (s_harmonics_alpha[7] * s_harmonics_beta[9]), (s_alpha_s ** 9) * (s_beta_s ** 9), (s_alpha_s ** 13) * (s_beta_s ** 7), (s_harmonics_alpha[1] * s_harmonics_beta[11]), (s_harmonics_alpha[11] * s_harmonics_beta[13]), (s_harmonics_alpha[7] * s_harmonics_beta[11]), (s_harmonics_alpha[9] * s_harmonics_beta[3]), (s_harmonics_alpha[13] * s_harmonics_beta[11]), (s_alpha_s ** 7) * (s_beta_s ** 11), (s_harmonics_alpha[9] * s_harmonics_beta[11]), (s_alpha_s ** 11) * (s_beta_s ** 7), (s_harmonics_alpha[13] * s_harmonics_beta[9]), (s_harmonics_alpha[13] * s_harmonics_beta[13]), (s_harmonics_alpha[7] * s_harmonics_beta[5]), (s_alpha_s ** 9) * (s_beta_s ** 5), (s_harmonics_alpha[5] * s_harmonics_beta[5]), (s_harmonics_alpha[9] * s_harmonics_beta[5]), (s_harmonics_alpha[1] * s_harmonics_beta[13]), (s_harmonics_alpha[5] * s_harmonics_beta[7]), (s_alpha_s ** 7) * (s_beta_s ** 9), (s_harmonics_alpha[11] * s_harmonics_beta[15]), (s_harmonics_alpha[11] * s_harmonics_beta[1]), (s_alpha_s ** 5) * (s_beta_s ** 13), (s_alpha_s ** 9) * (s_beta_s ** 7), (s_harmonics_alpha[11] * s_harmonics_beta[11]), (s_harmonics_alpha[15] * s_harmonics_beta[9]), (s_harmonics_alpha[15] * s_harmonics_beta[7]), (s_harmonics_alpha[9] * s_harmonics_beta[15]), (s_harmonics_alpha[9] * s_harmonics_beta[7]), (s_alpha_s ** 5) * (s_beta_s ** 9), (s_harmonics_alpha[15] * s_harmonics_beta[15]), (s_harmonics_alpha[7] * s_harmonics_beta[13]), (s_harmonics_alpha[13] * s_harmonics_beta[3]), (s_harmonics_alpha[13] * s_harmonics_beta[7]), (s_alpha_s ** 13) * (s_beta_s ** 5), (s_harmonics_alpha[11] * s_harmonics_beta[7]), (s_harmonics_alpha[15] * s_harmonics_beta[11]), (s_harmonics_alpha[3] * s_harmonics_beta[15]), (s_harmonics_alpha[1] * s_harmonics_beta[9]), (s_harmonics_alpha[15] * s_harmonics_beta[3]), (s_harmonics_alpha[12] * s_harmonics_beta[9]), (s_harmonics_alpha[7] * s_harmonics_beta[3]), (s_harmonics_alpha[11] * s_harmonics_beta[5]), (s_alpha_s ** 5) * (s_beta_s ** 11), (s_harmonics_alpha[2] * s_harmonics_beta[15]), (s_harmonics_alpha[5] * s_harmonics_beta[11]), (s_harmonics_alpha[15] * s_harmonics_beta[5]), (s_harmonics_alpha[14] * s_harmonics_beta[11]), (s_harmonics_alpha[3] * s_harmonics_beta[9]), (s_alpha_s ** 7) * (s_beta_s ** 7), (s_harmonics_alpha[3] * s_harmonics_beta[11]), (s_harmonics_alpha[2] * s_harmonics_beta[13]), (s_harmonics_alpha[15] * s_harmonics_beta[13]), (s_harmonics_alpha[14] * s_harmonics_beta[5]), (s_harmonics_alpha[8] * s_harmonics_beta[3]), (s_harmonics_alpha[4] * s_harmonics_beta[15]), (s_harmonics_alpha[11] * s_harmonics_beta[9]), (s_harmonics_alpha[12] * s_harmonics_beta[11]), (s_harmonics_alpha[7] * s_harmonics_beta[7]), (s_harmonics_alpha[6] * s_harmonics_beta[11]), (s_harmonics_alpha[12] * s_harmonics_beta[3]), (s_harmonics_alpha[2] * s_harmonics_beta[1]), ])


    coefficients_array = np.array([-0.24182692038661302, -0.19824281940751315, -0.16355995175174828, -0.14048020234743328, -0.13180948545608814, -0.09784285189211729, -0.08748566879665663, 0.03498381547026233, -0.07465483671876613, -0.06656274589822803, -0.064127499100948, 0.027284406107434354, 0.026030035810714513, -0.06020730530015848, -0.049937753595024996, -0.05040356006675403, -0.040514788369144385, -0.04334742757595767, -0.0403915146954667, -0.038077035768583706, -0.03386106312198031, -0.02678360685021929, -0.02369096185861952, -0.006386969998197132, -0.0056922233665913, -0.01891667230898691, -0.01866524326472716, -0.015311229063062438, 0.0033678827464659147, -0.013386345780228822, -0.00997650373236484, -0.00929110963872722, -0.009744546613689455, -0.008407203677193472, -0.0018826724200855318, 0.011702220758120965, 0.011583291511952396, 0.010672932861547314, -0.006367609873526464, 0.012423881366814916, 0.010408920357558452, 0.010081815714370028, 0.009111938910500317, 0.008899877127221508, -0.001289360587329069, 0.008053804060361025, 0.001245585622460538, 0.0011857875816319555, 0.0011784239201391195, 0.001181978380873055, 0.006958543279318592, 0.007340546107241069, 0.0011134124136813438, -0.0011107437340071764, -0.0010962564972785411, -0.0011028463634898406, -0.0010760834680528994, 0.006353723425586286, 0.0010066682878262156, 0.005742754220480974, 0.0008801355148186956, 0.0008687093235028745, -0.0008574467658132627, -0.00375162445701552, -0.0008161992401930489, 0.0007739651048126172, -0.0006848112673559319, -0.0006816492170373266, 0.003635076258120256, 0.0006859370670971283, 0.0006489275166039135, 0.0035089257696593696, 0.003226570428049423, 0.0005729537336005598, -0.0005846789207270325, 0.0005729783966209775, -0.0005710455137698907, 0.00055337082716192, -0.002487178284936086, -0.0005109486963513468, 0.0004317482448740733, 0.00042976104752049174, -0.0003943357376629471, 0.0020093775992617276, -0.0003299502327807264, 0.0003136126273946058, 0.00026619292727714017, 0.00026160677803747337, -0.00025985541887210017, -0.0002532217477516689, 0.0002448382852603057, 0.00023446257778753524, 0.0011470174470527292, 0.00023079800505745087, 0.0002201233538268924, -0.00021846748764928843, -0.0002059009699709445, -0.00020564736433547397, -0.0009396326114994788, -0.00018435607710637851, -0.00018098230556529463, 0.00017503002104888189, -0.00016094769202022044, 0.0001493277665784904, -0.00015145786236610672, 0.00013926254480912847, 0.00013462630397306828, 0.00012540729474351037, -0.00012515643243614415, -0.00012420107740535537, 0.00012236189032755385, ])


    return np.dot(coefficients_array, expressions_array)
@jit(nopython=True, cache=True)
def F_coefficients_truncated_shadow_True_single_ideal_optical_model(alpha_s_rad, beta_s_rad):
    alpha_s = alpha_s_rad
    beta_s = beta_s_rad
    c_alpha_s = np.cos(alpha_s)
    s_alpha_s = np.sin(alpha_s)
    c_beta_s = np.cos(beta_s)
    s_beta_s = np.sin(beta_s)
    s_harmonics_alpha = [np.sin(j * alpha_s) for j in range(16)]
    c_harmonics_alpha = [np.cos(j * alpha_s) for j in range(16)]
    s_harmonics_beta = [np.sin(j * beta_s) for j in range(16)]
    c_harmonics_beta = [np.cos(j * beta_s) for j in range(16)]
    expressions_array = np.array([1, (s_alpha_s ** 2), (s_beta_s ** 2), (s_alpha_s ** 4), (s_beta_s ** 4), (s_alpha_s ** 2) * (c_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 2), (c_harmonics_alpha[2] * c_harmonics_beta[4]), (c_harmonics_alpha[2] * c_harmonics_beta[2]), (s_alpha_s ** 2) * (c_beta_s ** 4), (s_alpha_s ** 4) * (c_beta_s ** 2), (s_beta_s ** 14), (c_harmonics_alpha[4] * c_harmonics_beta[2]), (s_alpha_s ** 6), (s_beta_s ** 10), (c_alpha_s ** 4) * (s_beta_s ** 2), (s_alpha_s ** 4) * (c_beta_s ** 4), (s_beta_s ** 8), (c_alpha_s ** 2) * (s_beta_s ** 4), (c_harmonics_alpha[2] * c_harmonics_beta[6]), (s_alpha_s ** 2) * (c_beta_s ** 6), (c_harmonics_alpha[6] * c_harmonics_beta[2]), (s_alpha_s ** 6) * (c_beta_s ** 2), (s_alpha_s ** 10), (c_alpha_s ** 4) * (s_beta_s ** 4), (s_alpha_s ** 4) * (c_beta_s ** 6), (s_alpha_s ** 6) * (c_beta_s ** 4), (s_alpha_s ** 14), (s_alpha_s ** 8) * (s_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 14), (s_alpha_s ** 10) * (s_beta_s ** 2), (c_alpha_s ** 14) * (s_beta_s ** 2), (c_alpha_s ** 4) * (c_beta_s ** 2), (c_alpha_s ** 6) * (s_beta_s ** 2), (s_beta_s ** 6), (s_alpha_s ** 2) * (s_beta_s ** 8), (s_alpha_s ** 2) * (s_beta_s ** 10), (s_alpha_s ** 8), (s_alpha_s ** 2) * (c_beta_s ** 8), (c_alpha_s ** 2) * (c_beta_s ** 10), (c_alpha_s ** 2) * (c_beta_s ** 8), (c_alpha_s ** 10) * (c_beta_s ** 2), (s_alpha_s ** 2) * (c_beta_s ** 14), (s_alpha_s ** 14) * (c_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 6), (c_alpha_s ** 8) * (c_beta_s ** 2), (s_alpha_s ** 8) * (s_beta_s ** 4), (s_alpha_s ** 2) * (s_beta_s ** 14), (c_alpha_s ** 2) * (c_beta_s ** 2), (c_alpha_s ** 14) * (c_beta_s ** 2), (s_alpha_s ** 10) * (s_beta_s ** 4), (c_alpha_s ** 4) * (c_beta_s ** 8), (s_alpha_s ** 6) * (c_beta_s ** 6), (s_alpha_s ** 2) * (s_beta_s ** 4), (s_alpha_s ** 12) * (s_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 8), (c_alpha_s ** 4) * (c_beta_s ** 10), (s_alpha_s ** 4) * (c_beta_s ** 8), (s_alpha_s ** 8) * (c_beta_s ** 2), (s_alpha_s ** 4) * (s_beta_s ** 10), (c_alpha_s ** 8) * (c_beta_s ** 4), (c_harmonics_alpha[2] * c_harmonics_beta[8]), (c_alpha_s ** 10) * (c_beta_s ** 4), (c_harmonics_alpha[6] * c_harmonics_beta[6]), (c_alpha_s ** 4) * (s_beta_s ** 14), (s_alpha_s ** 2) * (c_beta_s ** 12), (c_alpha_s ** 2) * (c_beta_s ** 12), (c_harmonics_alpha[6] * c_harmonics_beta[4]), (c_alpha_s ** 8) * (s_beta_s ** 8), (s_alpha_s ** 8) * (c_beta_s ** 4), (s_alpha_s ** 14) * (c_beta_s ** 4), (c_alpha_s ** 14) * (s_beta_s ** 4), (c_alpha_s ** 10) * (s_beta_s ** 8), (s_alpha_s ** 4) * (c_beta_s ** 14), (c_alpha_s ** 8) * (s_beta_s ** 10), (s_alpha_s ** 2) * (c_beta_s ** 10), (c_alpha_s ** 6) * (s_beta_s ** 4), (c_harmonics_alpha[14] * c_harmonics_beta[2]), (c_harmonics_alpha[8] * c_harmonics_beta[4]), (c_alpha_s ** 10) * (s_beta_s ** 10), (s_alpha_s ** 2) * (s_beta_s ** 2), (s_alpha_s ** 12), (s_alpha_s ** 12) * (s_beta_s ** 4), (s_alpha_s ** 6) * (s_beta_s ** 2), (c_alpha_s ** 4) * (c_beta_s ** 12), (s_alpha_s ** 12) * (c_beta_s ** 2), (s_beta_s ** 12), (c_harmonics_alpha[4] * c_harmonics_beta[10]), (c_alpha_s ** 4) * (s_beta_s ** 6), (c_alpha_s ** 2) * (s_beta_s ** 10), (s_alpha_s ** 6) * (s_beta_s ** 4), (c_harmonics_alpha[4] * c_harmonics_beta[6]), (c_harmonics_alpha[4] * c_harmonics_beta[4]), (s_alpha_s ** 4) * (c_beta_s ** 12), (c_alpha_s ** 10) * (s_beta_s ** 6), (c_harmonics_alpha[6] * c_harmonics_beta[8]), (c_alpha_s ** 4) * (c_beta_s ** 6), (s_alpha_s ** 8) * (s_beta_s ** 14), (c_alpha_s ** 6) * (s_beta_s ** 10), (s_alpha_s ** 4) * (c_beta_s ** 10), (c_alpha_s ** 8) * (s_beta_s ** 6), (c_alpha_s ** 6) * (s_beta_s ** 8), (c_harmonics_alpha[8] * c_harmonics_beta[12]), (s_alpha_s ** 12) * (c_beta_s ** 4), (s_alpha_s ** 10) * (s_beta_s ** 14), (s_alpha_s ** 6) * (s_beta_s ** 14), (c_alpha_s ** 14) * (c_beta_s ** 8), (c_alpha_s ** 2) * (c_beta_s ** 4), (s_alpha_s ** 4) * (s_beta_s ** 14), (c_harmonics_alpha[8] * c_harmonics_beta[6]), (s_alpha_s ** 4) * (s_beta_s ** 6), (c_harmonics_alpha[4] * c_harmonics_beta[12]), (s_alpha_s ** 10) * (s_beta_s ** 6), (c_alpha_s ** 12) * (s_beta_s ** 8), (c_harmonics_alpha[14] * c_harmonics_beta[10]), (c_alpha_s ** 10) * (c_beta_s ** 6), (s_alpha_s ** 2) * (s_beta_s ** 12), (c_alpha_s ** 14) * (c_beta_s ** 10), (s_alpha_s ** 8) * (s_beta_s ** 6), (c_alpha_s ** 12) * (s_beta_s ** 10), (s_alpha_s ** 10) * (c_beta_s ** 4), (c_alpha_s ** 8) * (s_beta_s ** 12), (c_harmonics_alpha[12] * c_harmonics_beta[14]), (c_harmonics_alpha[6] * c_harmonics_beta[10]), (c_alpha_s ** 10) * (s_beta_s ** 2), (c_alpha_s ** 10) * (s_beta_s ** 12), (c_harmonics_alpha[12] * c_harmonics_beta[12]), (c_alpha_s ** 6) * (c_beta_s ** 10), (c_alpha_s ** 14) * (c_beta_s ** 4), (c_alpha_s ** 14) * (c_beta_s ** 6), (c_alpha_s ** 8) * (c_beta_s ** 6), (s_alpha_s ** 6) * (s_beta_s ** 10), (c_alpha_s ** 6) * (c_beta_s ** 8), (s_alpha_s ** 10) * (c_beta_s ** 2), (c_harmonics_alpha[8] * c_harmonics_beta[14]), (c_alpha_s ** 12) * (c_beta_s ** 4), (s_alpha_s ** 6) * (s_beta_s ** 8), (s_alpha_s ** 14) * (c_beta_s ** 6), (s_alpha_s ** 2) * (s_beta_s ** 6), (s_alpha_s ** 4) * (s_beta_s ** 2), (c_alpha_s ** 2) * (s_beta_s ** 8), (s_alpha_s ** 4) * (s_beta_s ** 12), (s_alpha_s ** 12) * (s_beta_s ** 14), (c_alpha_s ** 6) * (s_beta_s ** 14), (c_harmonics_alpha[6] * c_harmonics_beta[14]), (c_alpha_s ** 4) * (s_beta_s ** 10), (c_harmonics_alpha[10] * c_harmonics_beta[10]), (c_alpha_s ** 6) * (c_beta_s ** 4), (c_alpha_s ** 2) * (c_beta_s ** 6), (c_alpha_s ** 10) * (s_beta_s ** 4), (c_alpha_s ** 12) * (c_beta_s ** 2), (s_alpha_s ** 6) * (c_beta_s ** 8), (c_alpha_s ** 14) * (c_beta_s ** 12), (s_alpha_s ** 6) * (c_beta_s ** 14), (c_harmonics_alpha[14] * c_harmonics_beta[12]), (c_harmonics_alpha[4] * c_harmonics_beta[8]), (c_alpha_s ** 14) * (s_beta_s ** 14), (c_harmonics_alpha[10] * c_harmonics_beta[12]), (s_alpha_s ** 8) * (c_beta_s ** 6), (c_alpha_s ** 14) * (s_beta_s ** 6), (c_harmonics_alpha[14] * c_harmonics_beta[8]), (c_alpha_s ** 4) * (c_beta_s ** 14), (c_harmonics_alpha[8] * c_harmonics_beta[10]), (c_harmonics_alpha[8] * c_harmonics_beta[8]), (c_alpha_s ** 4) * (c_beta_s ** 4), (c_alpha_s ** 12) * (s_beta_s ** 6), (s_alpha_s ** 10) * (c_beta_s ** 10), (c_harmonics_alpha[12] * c_harmonics_beta[2]), (s_alpha_s ** 12) * (s_beta_s ** 6), (c_harmonics_alpha[10] * c_harmonics_beta[8]), (c_harmonics_alpha[10] * c_harmonics_beta[2]), (c_alpha_s ** 6) * (c_beta_s ** 12), (c_alpha_s ** 12) * (s_beta_s ** 2), (c_alpha_s ** 13) * (c_beta_s ** 2), (c_alpha_s ** 13) * (s_beta_s ** 2), (c_alpha_s ** 12) * (s_beta_s ** 12), (s_alpha_s ** 14) * (s_beta_s ** 4), (c_alpha_s ** 6) * (s_beta_s ** 12), (s_alpha_s ** 14) * (s_beta_s ** 2), (c_alpha_s ** 4) * (s_beta_s ** 8), (c_alpha_s ** 2) * (c_beta_s ** 14), (s_alpha_s ** 14) * (s_beta_s ** 14), (s_alpha_s ** 14) * (s_beta_s ** 10), (c_alpha_s ** 9) * (c_beta_s ** 2), (s_alpha_s ** 10) * (c_beta_s ** 8), (s_alpha_s ** 14) * (s_beta_s ** 8), (c_harmonics_alpha[12] * c_harmonics_beta[4]), (s_alpha_s ** 8) * (c_beta_s ** 10), (c_alpha_s ** 9) * (s_beta_s ** 2), (c_alpha_s ** 10) * (c_beta_s ** 14), (c_harmonics_alpha[12] * c_harmonics_beta[10]), (c_harmonics_alpha[10] * c_harmonics_beta[4]), (c_alpha_s ** 14) * (c_beta_s ** 14), (s_alpha_s ** 10) * (s_beta_s ** 12), (s_alpha_s ** 12) * (c_beta_s ** 6), (c_alpha_s ** 8) * (c_beta_s ** 14), (s_alpha_s ** 6) * (c_beta_s ** 12), (c_harmonics_alpha[2] * c_harmonics_beta[14]), (s_alpha_s ** 10) * (c_beta_s ** 12), (c_harmonics_alpha[6] * c_harmonics_beta[12]), (c_alpha_s ** 8) * (s_beta_s ** 4), (c_harmonics_alpha[8] * c_harmonics_beta[2]), (s_alpha_s ** 8) * (s_beta_s ** 12), (c_alpha_s ** 5) * (s_beta_s ** 2), (s_alpha_s ** 12) * (c_beta_s ** 10), (s_alpha_s ** 4) * (s_beta_s ** 4), (c_alpha_s ** 5) * (c_beta_s ** 2), (c_alpha_s ** 13) * (c_beta_s ** 4), (c_alpha_s ** 12) * (c_beta_s ** 10), (c_alpha_s ** 13) * (s_beta_s ** 4), (c_alpha_s ** 2) * (s_beta_s ** 12), (c_harmonics_alpha[14] * c_harmonics_beta[14]), (c_harmonics_alpha[2] * c_harmonics_beta[10]), (s_alpha_s ** 6) * (c_beta_s ** 10), (c_alpha_s ** 12) * (c_beta_s ** 6), (c_harmonics_alpha[9] * c_harmonics_beta[2]), (s_alpha_s ** 8) * (c_beta_s ** 12), (c_harmonics_alpha[12] * c_harmonics_beta[6]), (c_alpha_s ** 9) * (c_beta_s ** 4), (s_alpha_s ** 8) * (c_beta_s ** 8), (c_alpha_s ** 9) * (s_beta_s ** 4), (c_alpha_s ** 11) * (c_beta_s ** 2), (c_alpha_s ** 10) * (c_beta_s ** 8), (c_harmonics_alpha[13] * c_harmonics_beta[10]), (c_alpha_s ** 11) * (s_beta_s ** 2), (s_alpha_s ** 14) * (c_beta_s ** 14), (c_alpha_s ** 12) * (c_beta_s ** 8), (c_alpha_s ** 8) * (s_beta_s ** 2), (s_alpha_s ** 10) * (s_beta_s ** 8), (c_alpha_s ** 13) * (c_beta_s ** 6), (c_harmonics_alpha[7] * c_harmonics_beta[12]), (s_alpha_s ** 14) * (c_beta_s ** 8), (c_alpha_s ** 13) * (s_beta_s ** 6), (c_harmonics_alpha[14] * c_harmonics_beta[4]), (c_alpha_s ** 10) * (c_beta_s ** 12), (c_alpha_s ** 12) * (s_beta_s ** 14), (c_harmonics_alpha[3] * c_harmonics_beta[14]), (s_alpha_s ** 12) * (c_beta_s ** 12), (s_alpha_s ** 12) * (c_beta_s ** 8), (s_alpha_s ** 10) * (c_beta_s ** 6), (c_alpha_s ** 5) * (s_beta_s ** 4), (s_alpha_s ** 12) * (s_beta_s ** 12), (c_harmonics_alpha[3] * c_harmonics_beta[4]), (c_harmonics_alpha[13] * c_harmonics_beta[4]), (c_alpha_s ** 5) * (c_beta_s ** 4), (c_harmonics_alpha[11] * c_harmonics_beta[2]), (c_alpha_s ** 9) * (c_beta_s ** 6), (c_harmonics_alpha[1] * c_harmonics_beta[6]), (c_alpha_s ** 9) * (s_beta_s ** 6), (c_alpha_s ** 13) * (c_beta_s ** 8), (c_harmonics_alpha[4] * c_harmonics_beta[14]), (c_alpha_s ** 13) * (s_beta_s ** 8), (c_harmonics_alpha[5] * c_harmonics_beta[8]), (c_alpha_s ** 6) * (s_beta_s ** 6), (c_alpha_s ** 14) * (s_beta_s ** 10), (s_alpha_s ** 6) * (s_beta_s ** 12), (s_alpha_s ** 12) * (s_beta_s ** 10), (c_harmonics_alpha[5] * c_harmonics_beta[14]), (c_harmonics_alpha[5] * c_harmonics_beta[10]), (c_alpha_s ** 4) * (s_beta_s ** 12), (c_alpha_s ** 6) * (c_beta_s ** 2), (c_harmonics_alpha[15] * c_harmonics_beta[2]), (c_alpha_s ** 11) * (c_beta_s ** 4), (c_harmonics_alpha[1] * c_harmonics_beta[12]), (c_alpha_s ** 13) * (c_beta_s ** 10), (c_alpha_s ** 11) * (s_beta_s ** 4), (c_alpha_s ** 9) * (c_beta_s ** 8), (c_alpha_s ** 9) * (s_beta_s ** 8), (c_alpha_s ** 5) * (c_beta_s ** 6), (c_alpha_s ** 5) * (s_beta_s ** 6), (c_alpha_s ** 7) * (c_beta_s ** 2), (c_alpha_s ** 13) * (s_beta_s ** 10), (c_alpha_s ** 14) * (s_beta_s ** 12), (c_alpha_s ** 8) * (s_beta_s ** 14), (c_alpha_s ** 12) * (c_beta_s ** 12), (c_alpha_s ** 7) * (s_beta_s ** 2), (c_alpha_s ** 12) * (s_beta_s ** 4), (c_alpha_s ** 12) * (c_beta_s ** 14), (s_alpha_s ** 8) * (s_beta_s ** 10), (s_alpha_s ** 14) * (s_beta_s ** 12), (c_harmonics_alpha[15] * c_harmonics_beta[6]), (c_alpha_s ** 8) * (c_beta_s ** 10), (c_alpha_s ** 13) * (c_beta_s ** 12), (c_harmonics_alpha[3] * c_harmonics_beta[10]), (c_alpha_s ** 13) * (s_beta_s ** 12), (c_harmonics_alpha[7] * c_harmonics_beta[10]), (c_alpha_s ** 9) * (s_beta_s ** 10), (c_alpha_s ** 9) * (c_beta_s ** 10), (c_harmonics_alpha[5] * c_harmonics_beta[6]), (s_alpha_s ** 10) * (c_beta_s ** 14), (c_alpha_s ** 5) * (c_beta_s ** 8), (c_alpha_s ** 5) * (s_beta_s ** 8), (c_alpha_s ** 13) * (c_beta_s ** 14), (c_harmonics_alpha[11] * c_harmonics_beta[10]), (c_harmonics_alpha[1] * c_harmonics_beta[8]), (c_alpha_s ** 13) * (s_beta_s ** 14), (c_alpha_s ** 11) * (c_beta_s ** 6), (c_alpha_s ** 11) * (s_beta_s ** 6), (c_harmonics_alpha[3] * c_harmonics_beta[8]), (c_harmonics_alpha[3] * c_harmonics_beta[6]), (c_alpha_s ** 9) * (s_beta_s ** 12), (c_alpha_s ** 9) * (c_beta_s ** 12), (s_alpha_s ** 14) * (c_beta_s ** 12), ])


    coefficients_array = np.array([0.02480809732849392, -0.026091377012479308, 0.024878997811330437, -0.02708991070910856, 0.021018872588026323, -0.028575711598938715, 0.022394663229853805, -0.012739518542493961, 0.012362096744154368, -0.026448132179014042, -0.025275390687034563, 0.022131659238334073, 0.011035408503368323, -0.01158592543351341, -0.01435301993897624, 0.018095808620332235, -0.022520326203146396, -0.011392608489199102, 0.016406958581332187, -0.0071173122262407525, -0.017509557891005504, -0.006652318185447861, -0.01532650393582272, 0.008378768886101316, 0.01273558904164894, -0.015208854817274077, -0.01431471077964335, -0.007677870601773762, 0.010259744538836052, 0.013098904349819713, 0.011257593005699456, 0.01260419665047757, 0.006997034696771665, 0.008241855483458276, 0.0039479723611559, -0.008947886583111792, -0.009862831859800693, 0.0043379165213082785, -0.008508794479974172, 0.008983693092800093, 0.007921540824042804, -0.008219623325383311, -0.009639141603242515, -0.009551026344992466, 0.006147053210728037, -0.006844307829206473, 0.009378793833663128, 0.009032754892833648, 0.003696713788130421, 0.008606010779746372, 0.009928177643354288, 0.008349760928814435, -0.008868982462284668, 0.004611914008737837, 0.007618894139126599, -0.008355460263566695, 0.008862799306336891, -0.008080574372101095, -0.005921828032418911, -0.008829946809683733, -0.007612487166251731, -0.001945873283932938, -0.008360270578601168, -0.0018785956590156789, 0.009671292633101534, -0.0064335264014345715, 0.00621402927613964, 0.0017519615647179035, -0.009329407564962642, -0.006802778739279119, -0.008812399728848114, 0.008618992843928846, -0.00982795308268555, -0.008340049781078268, -0.00973494613349364, -0.005279702378953151, 0.005252392305137243, 0.0015164657141860318, -0.001516136459182638, -0.010054765017419795, 0.002484334584252952, 0.002628642940940369, 0.00704440307671419, 0.0037405785038688, 0.0065692391632378834, -0.0049902512012510725, -0.0024981441598564127, 0.0013597150127918315, 0.004730271643223688, -0.004490188075866139, 0.004752371670380156, -0.0013142186026220764, 0.0012897730223469406, -0.006078316520052506, -0.006663001007979001, 0.001254545931593084, 0.0042819129358635495, 0.008969907023660342, -0.0065416690443659544, -0.005400596168495791, -0.0055991225131945535, -0.005582396637030641, 0.0011619307510840077, -0.005564742261178003, 0.008878574579789935, 0.006930219090550097, 0.007367588642905065, -0.002290990859855526, 0.005605143173947746, 0.001045059364747449, -0.003615862424375619, -0.0010089040360262759, 0.005390899995604928, -0.0064812962957570925, -0.0009763320843790582, -0.005031094748858095, -0.0035551614663538057, 0.007357845647496676, 0.004625502379623888, -0.0069444776101199165, -0.004208239508211915, -0.006148725435361435, 0.0009334801025332277, -0.0009275514907576797, -0.003052530686360605, -0.006721845691581357, -0.0009206543140917734, 0.004742744599801809, 0.004620806972098972, 0.005501691819482955, -0.004197753465961538, -0.004712695742896194, 0.004038095095429248, -0.0028788241477394265, -0.0008541735634130878, -0.003917993718842018, -0.004032932890307415, -0.005160073009555879, -0.002199080855207733, -0.0018145200234147107, -0.002444721903280649, -0.003948718359562294, 0.00696194839286176, 0.004918605004247875, 0.000792247411161312, -0.003457303024893455, 0.0007735031290415993, -0.0026409943317388727, 0.001981209857909736, -0.003193177931114551, -0.0025702365379070935, -0.0033406884348435605, 0.005850342765905044, -0.004255166357184998, 0.0006680205490899048, -0.0006644171882489619, 0.00604017474034942, -0.000643925324761337, -0.0029304379895653122, 0.0037529041829988358, 0.0006081790411075754, 0.003055993711768854, -0.000601194654346662, -0.0005792760359604078, 0.001636815118449264, -0.0032121945930042453, 0.0037065995198951453, -0.0005548218147073498, 0.0032148791650483807, -0.0005455199025016577, -0.0005389237067394614, 0.0030369974766952705, 0.001913124098874031, 0.001924491242319438, 0.0019242741515731292, -0.004079696277627657, 0.002611782341326359, -0.0028183208024905814, 0.0018731557308859538, -0.0018522955860764529, 0.001756901891160304, 0.004242857149809537, -0.003602445527551963, -0.0013734505866706628, 0.0026667895469895753, -0.0031770316235425486, 0.00043979311226964953, 0.0026398871710735343, -0.0013636895563577701, -0.003325438888691605, 0.0004229601134304526, 0.00042146510787144766, 0.0037089331586576857, 0.0030127999888696667, -0.002309709414868643, -0.0027442414314752185, -0.002190864935681258, -0.00037730350497508893, 0.002714888256048613, 0.00036892339698116024, -0.00141620947752256, 0.0003559919622714209, 0.002379106876038701, 0.0007740002525995396, 0.0023302003080995404, 0.0009405444676101782, 0.0007568216545057357, 0.0014510360276827363, 0.002090878286269874, 0.0014508189374392638, 0.0010570173037287454, -0.00028552472492616093, 0.0002711681141544154, -0.0014014352578437714, -0.0014881893950549267, 0.00026399875047002156, 0.0016468197264901943, -0.00025135988298705624, -0.0010235145671296264, 0.001342376455393051, -0.001013753534190952, -0.000812948601265008, -0.0013970479115998095, 0.0002353608779104551, -0.0008080939273083112, -0.002144695929344794, 0.0014500747377255607, -0.0006480301372724451, 0.0013129268420533648, 0.0012180264652940627, 0.0002082325788581812, -0.0014691600213298755, 0.0012103732850082024, -0.00020012128282978289, -0.001407170492989843, 0.001647001961924673, 0.0001924070135916173, 0.0015190848135627191, 0.0012444988739614422, -0.0010003772319132275, 0.0005897693340719976, 0.0014985705925665831, 0.00018485233262052, 0.00018436023640190115, 0.0005725907355566353, 0.00017498438117254157, -0.0008442245350732817, 0.00016918665693178375, -0.0008431075455713257, 0.0010740612001371428, 0.00015838260179415326, 0.0010589719308469322, 0.0001516575216697333, -0.0006208088806393875, -0.0011485973945429089, -0.0008604940347479333, -0.001078135469422969, 0.0001424199642089612, 0.00013891073828223372, 0.000663460412325682, 0.00034846885438096994, 0.0001369676676676193, -0.0006025685566540594, 0.00013268874854039864, 0.0009740573249056093, -0.0005977138814226632, -0.0007302714557876961, -0.0007377985080360861, 0.0004854010850116141, 0.0004927280668141, -0.00034815941572187626, 0.0009526534880929697, 0.001069509425448897, 0.0008805293827838261, 0.0009562635323948921, -0.000334079110010722, 0.0005653669185087412, -0.0009656815036658672, -0.0007043557432475962, -0.000997382643342898, 0.0001165457492369256, 0.0006648514009529151, 0.0008994165479324066, 0.00010914441137841224, 0.0008728196600249704, 0.00010446700121780118, -0.0006644918389666471, -0.0006496529545836961, 0.00010355070956806057, 0.0007953986012347283, 0.0004330570927709918, 0.0004305324534194619, 0.0008409352748186739, -9.359605381161601e-05, 9.266562307124867e-05, 0.0008100757452837801, -0.0004933625258992723, -0.0004965398690235579, 9.050283111878322e-05, 9.034792173869941e-05, -0.0006096237068295414, -0.0005888052001532433, -0.0007398982599099928, ])


    return np.dot(coefficients_array, expressions_array)

def ellipse_truncated_coefficients_function_shadow_FALSE_ideal_model():
    A_func = lambda alpha, beta: A_coefficients_truncated_shadow_False_ideal_model(alpha, beta)
    B_func = lambda alpha, beta: B_coefficients_truncated_shadow_False_ideal_model(alpha, beta)
    C_func = lambda alpha, beta: C_coefficients_truncated_shadow_False_ideal_model(alpha, beta)
    D_func = lambda alpha, beta: D_coefficients_truncated_shadow_False_ideal_model(alpha, beta)
    E_func = lambda alpha, beta: E_coefficients_truncated_shadow_False_ideal_model(alpha, beta)
    F_func = lambda alpha, beta: F_coefficients_truncated_shadow_False_ideal_model(alpha, beta)
    ellipse_coefficient_functions_list = [A_func, B_func, C_func, D_func, E_func, F_func]
    return ellipse_coefficient_functions_list

def ellipse_truncated_coefficients_function_shadow_TRUE_ideal_model():
    A_func = lambda alpha, beta: A_coefficients_truncated_shadow_True_ideal_model(alpha, beta)
    B_func = lambda alpha, beta: B_coefficients_truncated_shadow_True_ideal_model(alpha, beta)
    C_func = lambda alpha, beta: C_coefficients_truncated_shadow_True_ideal_model(alpha, beta)
    D_func = lambda alpha, beta: D_coefficients_truncated_shadow_True_ideal_model(alpha, beta)
    E_func = lambda alpha, beta: E_coefficients_truncated_shadow_True_ideal_model(alpha, beta)
    F_func = lambda alpha, beta: F_coefficients_truncated_shadow_True_ideal_model(alpha, beta)
    ellipse_coefficient_functions_list = [A_func, B_func, C_func, D_func, E_func, F_func]
    return ellipse_coefficient_functions_list

def ellipse_truncated_coefficients_function_shadow_FALSE_single_ideal_optical_model():
    A_func = lambda alpha, beta: A_coefficients_truncated_shadow_False_single_ideal_optical_model(alpha, beta)
    B_func = lambda alpha, beta: B_coefficients_truncated_shadow_False_single_ideal_optical_model(alpha, beta)
    C_func = lambda alpha, beta: C_coefficients_truncated_shadow_False_single_ideal_optical_model(alpha, beta)
    D_func = lambda alpha, beta: D_coefficients_truncated_shadow_False_single_ideal_optical_model(alpha, beta)
    E_func = lambda alpha, beta: E_coefficients_truncated_shadow_False_single_ideal_optical_model(alpha, beta)
    F_func = lambda alpha, beta: F_coefficients_truncated_shadow_False_single_ideal_optical_model(alpha, beta)
    ellipse_coefficient_functions_list = [A_func, B_func, C_func, D_func, E_func, F_func]
    return ellipse_coefficient_functions_list

def ellipse_truncated_coefficients_function_shadow_TRUE_single_ideal_optical_model():
    A_func = lambda alpha, beta: A_coefficients_truncated_shadow_True_single_ideal_optical_model(alpha, beta)
    B_func = lambda alpha, beta: B_coefficients_truncated_shadow_True_single_ideal_optical_model(alpha, beta)
    C_func = lambda alpha, beta: C_coefficients_truncated_shadow_True_single_ideal_optical_model(alpha, beta)
    D_func = lambda alpha, beta: D_coefficients_truncated_shadow_True_single_ideal_optical_model(alpha, beta)
    E_func = lambda alpha, beta: E_coefficients_truncated_shadow_True_single_ideal_optical_model(alpha, beta)
    F_func = lambda alpha, beta: F_coefficients_truncated_shadow_True_single_ideal_optical_model(alpha, beta)
    ellipse_coefficient_functions_list = [A_func, B_func, C_func, D_func, E_func, F_func]
    return ellipse_coefficient_functions_list
